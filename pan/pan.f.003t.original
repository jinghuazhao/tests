mksig23 (integer(kind=4) & restrict ntot, real(kind=8)[0:D.3506] * restrict delta, integer(kind=4) & restrict m, real(kind=8) & restrict sigma2, integer(kind=4) & restrict nmax, integer(kind=4)[0:D.3500] * restrict occ, integer(kind=4)[0:D.3512] * restrict ist, integer(kind=4)[0:D.3509] * restrict ifin, real(kind=8)[0:D.3503] * restrict w)
{
  integer(kind=8) ubound.0;
  integer(kind=8) size.1;
  integer(kind=4) fin;
  integer(kind=4) i;
  integer(kind=8) ubound.2;
  integer(kind=8) size.3;
  integer(kind=8) ubound.4;
  integer(kind=8) size.5;
  integer(kind=4) j;
  integer(kind=8) ubound.6;
  integer(kind=8) size.7;
  integer(kind=4) s;
  integer(kind=4) st;
  real(kind=8) sum;
  integer(kind=8) ubound.8;
  integer(kind=8) ubound.9;
  integer(kind=8) stride.10;
  integer(kind=8) ubound.11;
  integer(kind=8) stride.12;
  integer(kind=8) offset.13;
  integer(kind=8) size.14;
  integer(kind=8) D.3500;
  bitsizetype D.3501;
  sizetype D.3502;
  integer(kind=8) D.3503;
  bitsizetype D.3504;
  sizetype D.3505;
  integer(kind=8) D.3506;
  bitsizetype D.3507;
  sizetype D.3508;
  integer(kind=8) D.3509;
  bitsizetype D.3510;
  sizetype D.3511;
  integer(kind=8) D.3512;
  bitsizetype D.3513;
  sizetype D.3514;

  ubound.4 = (integer(kind=8)) *m;
  size.5 = NON_LVALUE_EXPR <ubound.4>;
  size.5 = MAX_EXPR <size.5, 0>;
  D.3512 = size.5 + -1;
  D.3513 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.5> * 32;
  D.3514 = (sizetype) NON_LVALUE_EXPR <size.5> * 4;
  ubound.2 = (integer(kind=8)) *m;
  size.3 = NON_LVALUE_EXPR <ubound.2>;
  size.3 = MAX_EXPR <size.3, 0>;
  D.3509 = size.3 + -1;
  D.3510 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.3> * 32;
  D.3511 = (sizetype) NON_LVALUE_EXPR <size.3> * 4;
  ubound.0 = (integer(kind=8)) *ntot;
  size.1 = NON_LVALUE_EXPR <ubound.0>;
  size.1 = MAX_EXPR <size.1, 0>;
  D.3506 = size.1 + -1;
  D.3507 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1> * 64;
  D.3508 = (sizetype) NON_LVALUE_EXPR <size.1> * 8;
  ubound.8 = (integer(kind=8)) *nmax;
  stride.10 = NON_LVALUE_EXPR <ubound.8>;
  stride.10 = MAX_EXPR <stride.10, 0>;
  ubound.9 = (integer(kind=8)) *nmax;
  stride.12 = stride.10 * NON_LVALUE_EXPR <ubound.9>;
  stride.12 = MAX_EXPR <stride.12, 0>;
  ubound.11 = (integer(kind=8)) *m;
  size.14 = stride.12 * NON_LVALUE_EXPR <ubound.11>;
  size.14 = MAX_EXPR <size.14, 0>;
  D.3503 = size.14 + -1;
  D.3504 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.14> * 64;
  D.3505 = (sizetype) NON_LVALUE_EXPR <size.14> * 8;
  offset.13 = ~NON_LVALUE_EXPR <stride.10> - NON_LVALUE_EXPR <stride.12>;
  ubound.6 = (integer(kind=8)) *ntot;
  size.7 = NON_LVALUE_EXPR <ubound.6>;
  size.7 = MAX_EXPR <size.7, 0>;
  D.3500 = size.7 + -1;
  D.3501 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.7> * 32;
  D.3502 = (sizetype) NON_LVALUE_EXPR <size.7> * 4;
  *sigma2 = 0.0;
  {
    integer(kind=4) D.3477;

    D.3477 = *m;
    s = 1;
    if (s <= D.3477)
      {
        while (1)
          {
            {
              logical(kind=4) D.3499;

              st = (*ist)[(integer(kind=8)) s + -1];
              fin = (*ifin)[(integer(kind=8)) s + -1];
              {
                integer(kind=4) D.3480;
                integer(kind=4) D.3481;

                D.3480 = st;
                D.3481 = fin;
                i = D.3480;
                if (i <= D.3481)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.3497;

                          sum = 0.0;
                          {
                            integer(kind=4) D.3484;
                            integer(kind=4) D.3485;

                            D.3484 = st;
                            D.3485 = i;
                            j = D.3484;
                            if (j <= D.3485)
                              {
                                while (1)
                                  {
                                    {
                                      logical(kind=4) D.3489;

                                      sum = (*delta)[(integer(kind=8)) j + -1] * (*w)[(((integer(kind=8)) s * stride.12 + offset.13) + (integer(kind=8)) (*occ)[(integer(kind=8)) i + -1] * stride.10) + (integer(kind=8)) (*occ)[(integer(kind=8)) j + -1]] + sum;
                                      __label_000100:;
                                      L.5:;
                                      D.3489 = j == D.3485;
                                      j = j + 1;
                                      if (D.3489) goto L.6;
                                    }
                                  }
                              }
                            L.6:;
                          }
                          {
                            integer(kind=4) D.3490;
                            integer(kind=4) D.3491;

                            D.3490 = i + 1;
                            D.3491 = fin;
                            j = D.3490;
                            if (j <= D.3491)
                              {
                                while (1)
                                  {
                                    {
                                      logical(kind=4) D.3495;

                                      sum = (*delta)[(integer(kind=8)) j + -1] * (*w)[(((integer(kind=8)) s * stride.12 + offset.13) + (integer(kind=8)) (*occ)[(integer(kind=8)) j + -1] * stride.10) + (integer(kind=8)) (*occ)[(integer(kind=8)) i + -1]] + sum;
                                      __label_000200:;
                                      L.7:;
                                      D.3495 = j == D.3491;
                                      j = j + 1;
                                      if (D.3495) goto L.8;
                                    }
                                  }
                              }
                            L.8:;
                          }
                          *sigma2 = *sigma2 + (*delta)[(integer(kind=8)) i + -1] * sum;
                          __label_000300:;
                          L.3:;
                          D.3497 = i == D.3481;
                          i = i + 1;
                          if (D.3497) goto L.4;
                        }
                      }
                  }
                L.4:;
              }
              __label_000900:;
              L.1:;
              D.3499 = s == D.3477;
              s = s + 1;
              if (D.3499) goto L.2;
            }
          }
      }
    L.2:;
  }
  *sigma2 = *sigma2 / (real(kind=8)) *ntot;
  return;
}


mkdel (integer(kind=4) & restrict ntot, integer(kind=4) & restrict pcol, real(kind=8)[0:D.3576] * restrict pred, integer(kind=4) & restrict p, integer(kind=4)[0:D.3573] * restrict xcol, real(kind=8)[0:D.3564] * restrict y, real(kind=8)[0:D.3570] * restrict beta, real(kind=8)[0:D.3567] * restrict delta)
{
  integer(kind=8) ubound.15;
  integer(kind=8) size.16;
  integer(kind=8) ubound.17;
  integer(kind=8) size.18;
  integer(kind=4) i;
  integer(kind=4) j;
  integer(kind=8) ubound.19;
  integer(kind=8) ubound.20;
  integer(kind=8) stride.21;
  integer(kind=8) offset.22;
  integer(kind=8) size.23;
  real(kind=8) sum;
  integer(kind=8) ubound.24;
  integer(kind=8) size.25;
  integer(kind=8) ubound.26;
  integer(kind=8) size.27;
  integer(kind=8) D.3564;
  bitsizetype D.3565;
  sizetype D.3566;
  integer(kind=8) D.3567;
  bitsizetype D.3568;
  sizetype D.3569;
  integer(kind=8) D.3570;
  bitsizetype D.3571;
  sizetype D.3572;
  integer(kind=8) D.3573;
  bitsizetype D.3574;
  sizetype D.3575;
  integer(kind=8) D.3576;
  bitsizetype D.3577;
  sizetype D.3578;

  ubound.19 = (integer(kind=8)) *ntot;
  stride.21 = NON_LVALUE_EXPR <ubound.19>;
  stride.21 = MAX_EXPR <stride.21, 0>;
  ubound.20 = (integer(kind=8)) *pcol;
  size.23 = stride.21 * NON_LVALUE_EXPR <ubound.20>;
  size.23 = MAX_EXPR <size.23, 0>;
  D.3576 = size.23 + -1;
  D.3577 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.23> * 64;
  D.3578 = (sizetype) NON_LVALUE_EXPR <size.23> * 8;
  offset.22 = ~NON_LVALUE_EXPR <stride.21>;
  ubound.24 = (integer(kind=8)) *p;
  size.25 = NON_LVALUE_EXPR <ubound.24>;
  size.25 = MAX_EXPR <size.25, 0>;
  D.3573 = size.25 + -1;
  D.3574 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.25> * 32;
  D.3575 = (sizetype) NON_LVALUE_EXPR <size.25> * 4;
  ubound.15 = (integer(kind=8)) *p;
  size.16 = NON_LVALUE_EXPR <ubound.15>;
  size.16 = MAX_EXPR <size.16, 0>;
  D.3570 = size.16 + -1;
  D.3571 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.16> * 64;
  D.3572 = (sizetype) NON_LVALUE_EXPR <size.16> * 8;
  ubound.17 = (integer(kind=8)) *ntot;
  size.18 = NON_LVALUE_EXPR <ubound.17>;
  size.18 = MAX_EXPR <size.18, 0>;
  D.3567 = size.18 + -1;
  D.3568 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.18> * 64;
  D.3569 = (sizetype) NON_LVALUE_EXPR <size.18> * 8;
  ubound.26 = (integer(kind=8)) *ntot;
  size.27 = NON_LVALUE_EXPR <ubound.26>;
  size.27 = MAX_EXPR <size.27, 0>;
  D.3564 = size.27 + -1;
  D.3565 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.27> * 64;
  D.3566 = (sizetype) NON_LVALUE_EXPR <size.27> * 8;
  {
    integer(kind=4) D.3554;

    D.3554 = *ntot;
    i = 1;
    if (i <= D.3554)
      {
        while (1)
          {
            {
              logical(kind=4) D.3563;

              sum = 0.0;
              {
                integer(kind=4) D.3557;

                D.3557 = *p;
                j = 1;
                if (j <= D.3557)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.3561;

                          sum = (*pred)[((integer(kind=8)) (*xcol)[(integer(kind=8)) j + -1] * stride.21 + offset.22) + (integer(kind=8)) i] * (*beta)[(integer(kind=8)) j + -1] + sum;
                          __label_000070:;
                          L.11:;
                          D.3561 = j == D.3557;
                          j = j + 1;
                          if (D.3561) goto L.12;
                        }
                      }
                  }
                L.12:;
              }
              (*delta)[(integer(kind=8)) i + -1] = (*y)[(integer(kind=8)) i + -1] - sum;
              __label_000100:;
              L.9:;
              D.3563 = i == D.3554;
              i = i + 1;
              if (D.3563) goto L.10;
            }
          }
      }
    L.10:;
  }
  return;
}


mkbeta3 (integer(kind=4) & restrict q, integer(kind=4) & restrict nmax, integer(kind=4) & restrict m, real(kind=8)[0:D.3848] * restrict wk, real(kind=8)[0:D.3845] * restrict ztv, real(kind=8)[0:D.3842] * restrict vi, real(kind=8)[0:D.3839] * restrict w, integer(kind=4) & restrict ntot, integer(kind=4)[0:D.3836] * restrict occ, integer(kind=4)[0:D.3854] * restrict ist, integer(kind=4)[0:D.3851] * restrict ifin, integer(kind=4) & restrict pcol, real(kind=8)[0:D.3833] * restrict pred, integer(kind=4) & restrict p, integer(kind=4)[0:D.3830] * restrict xcol, real(kind=8)[0:D.3824] * restrict y, real(kind=8)[0:D.3827] * restrict xtw, real(kind=8)[0:D.3857] * restrict xtwx, real(kind=8)[0:D.3860] * restrict xtwy, real(kind=8)[0:D.3821] * restrict xtwxinv, real(kind=8)[0:D.3818] * restrict beta, integer(kind=4) & restrict iflag)
{
  integer(kind=8) ubound.28;
  integer(kind=8) size.29;
  integer(kind=4) fin;
  integer(kind=4) i;
  integer(kind=8) ubound.30;
  integer(kind=8) size.31;
  integer(kind=8) ubound.32;
  integer(kind=8) size.33;
  integer(kind=4) j;
  integer(kind=8) ubound.34;
  integer(kind=8) size.35;
  integer(kind=8) ubound.36;
  integer(kind=8) ubound.37;
  integer(kind=8) stride.38;
  integer(kind=8) offset.39;
  integer(kind=8) size.40;
  integer(kind=4) s;
  integer(kind=4) st;
  real(kind=8) sum;
  integer(kind=8) ubound.41;
  integer(kind=8) ubound.42;
  integer(kind=8) stride.43;
  integer(kind=8) ubound.44;
  integer(kind=8) stride.45;
  integer(kind=8) offset.46;
  integer(kind=8) size.47;
  integer(kind=8) ubound.48;
  integer(kind=8) ubound.49;
  integer(kind=8) stride.50;
  integer(kind=8) ubound.51;
  integer(kind=8) stride.52;
  integer(kind=8) offset.53;
  integer(kind=8) size.54;
  integer(kind=8) ubound.55;
  integer(kind=8) ubound.56;
  integer(kind=8) stride.57;
  integer(kind=8) ubound.58;
  integer(kind=8) stride.59;
  integer(kind=8) offset.60;
  integer(kind=8) size.61;
  integer(kind=8) ubound.62;
  integer(kind=8) size.63;
  integer(kind=8) ubound.64;
  integer(kind=8) ubound.65;
  integer(kind=8) stride.66;
  integer(kind=8) offset.67;
  integer(kind=8) size.68;
  integer(kind=8) ubound.69;
  integer(kind=8) ubound.70;
  integer(kind=8) stride.71;
  integer(kind=8) offset.72;
  integer(kind=8) size.73;
  integer(kind=8) ubound.74;
  integer(kind=8) ubound.75;
  integer(kind=8) stride.76;
  integer(kind=8) offset.77;
  integer(kind=8) size.78;
  integer(kind=8) ubound.79;
  integer(kind=8) size.80;
  integer(kind=8) ubound.81;
  integer(kind=8) size.82;
  integer(kind=8) ubound.83;
  integer(kind=8) ubound.84;
  integer(kind=8) stride.85;
  integer(kind=8) ubound.86;
  integer(kind=8) stride.87;
  integer(kind=8) offset.88;
  integer(kind=8) size.89;
  integer(kind=8) D.3818;
  bitsizetype D.3819;
  sizetype D.3820;
  integer(kind=8) D.3821;
  bitsizetype D.3822;
  sizetype D.3823;
  integer(kind=8) D.3824;
  bitsizetype D.3825;
  sizetype D.3826;
  integer(kind=8) D.3827;
  bitsizetype D.3828;
  sizetype D.3829;
  integer(kind=8) D.3830;
  bitsizetype D.3831;
  sizetype D.3832;
  integer(kind=8) D.3833;
  bitsizetype D.3834;
  sizetype D.3835;
  integer(kind=8) D.3836;
  bitsizetype D.3837;
  sizetype D.3838;
  integer(kind=8) D.3839;
  bitsizetype D.3840;
  sizetype D.3841;
  integer(kind=8) D.3842;
  bitsizetype D.3843;
  sizetype D.3844;
  integer(kind=8) D.3845;
  bitsizetype D.3846;
  sizetype D.3847;
  integer(kind=8) D.3848;
  bitsizetype D.3849;
  sizetype D.3850;
  integer(kind=8) D.3851;
  bitsizetype D.3852;
  sizetype D.3853;
  integer(kind=8) D.3854;
  bitsizetype D.3855;
  sizetype D.3856;
  integer(kind=8) D.3857;
  bitsizetype D.3858;
  sizetype D.3859;
  integer(kind=8) D.3860;
  bitsizetype D.3861;
  sizetype D.3862;

  ubound.79 = (integer(kind=8)) *p;
  size.80 = NON_LVALUE_EXPR <ubound.79>;
  size.80 = MAX_EXPR <size.80, 0>;
  D.3860 = size.80 + -1;
  D.3861 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.80> * 64;
  D.3862 = (sizetype) NON_LVALUE_EXPR <size.80> * 8;
  ubound.69 = (integer(kind=8)) *p;
  stride.71 = NON_LVALUE_EXPR <ubound.69>;
  stride.71 = MAX_EXPR <stride.71, 0>;
  ubound.70 = (integer(kind=8)) *p;
  size.73 = stride.71 * NON_LVALUE_EXPR <ubound.70>;
  size.73 = MAX_EXPR <size.73, 0>;
  D.3857 = size.73 + -1;
  D.3858 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.73> * 64;
  D.3859 = (sizetype) NON_LVALUE_EXPR <size.73> * 8;
  offset.72 = ~NON_LVALUE_EXPR <stride.71>;
  ubound.32 = (integer(kind=8)) *m;
  size.33 = NON_LVALUE_EXPR <ubound.32>;
  size.33 = MAX_EXPR <size.33, 0>;
  D.3854 = size.33 + -1;
  D.3855 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.33> * 32;
  D.3856 = (sizetype) NON_LVALUE_EXPR <size.33> * 4;
  ubound.30 = (integer(kind=8)) *m;
  size.31 = NON_LVALUE_EXPR <ubound.30>;
  size.31 = MAX_EXPR <size.31, 0>;
  D.3851 = size.31 + -1;
  D.3852 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.31> * 32;
  D.3853 = (sizetype) NON_LVALUE_EXPR <size.31> * 4;
  ubound.55 = (integer(kind=8)) *q;
  stride.57 = NON_LVALUE_EXPR <ubound.55>;
  stride.57 = MAX_EXPR <stride.57, 0>;
  ubound.56 = (integer(kind=8)) *nmax;
  stride.59 = stride.57 * NON_LVALUE_EXPR <ubound.56>;
  stride.59 = MAX_EXPR <stride.59, 0>;
  ubound.58 = (integer(kind=8)) *m;
  size.61 = stride.59 * NON_LVALUE_EXPR <ubound.58>;
  size.61 = MAX_EXPR <size.61, 0>;
  D.3848 = size.61 + -1;
  D.3849 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.61> * 64;
  D.3850 = (sizetype) NON_LVALUE_EXPR <size.61> * 8;
  offset.60 = ~NON_LVALUE_EXPR <stride.57> - NON_LVALUE_EXPR <stride.59>;
  ubound.83 = (integer(kind=8)) *q;
  stride.85 = NON_LVALUE_EXPR <ubound.83>;
  stride.85 = MAX_EXPR <stride.85, 0>;
  ubound.84 = (integer(kind=8)) *nmax;
  stride.87 = stride.85 * NON_LVALUE_EXPR <ubound.84>;
  stride.87 = MAX_EXPR <stride.87, 0>;
  ubound.86 = (integer(kind=8)) *m;
  size.89 = stride.87 * NON_LVALUE_EXPR <ubound.86>;
  size.89 = MAX_EXPR <size.89, 0>;
  D.3845 = size.89 + -1;
  D.3846 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.89> * 64;
  D.3847 = (sizetype) NON_LVALUE_EXPR <size.89> * 8;
  offset.88 = ~NON_LVALUE_EXPR <stride.85> - NON_LVALUE_EXPR <stride.87>;
  ubound.41 = (integer(kind=8)) *nmax;
  stride.43 = NON_LVALUE_EXPR <ubound.41>;
  stride.43 = MAX_EXPR <stride.43, 0>;
  ubound.42 = (integer(kind=8)) *nmax;
  stride.45 = stride.43 * NON_LVALUE_EXPR <ubound.42>;
  stride.45 = MAX_EXPR <stride.45, 0>;
  ubound.44 = (integer(kind=8)) *m;
  size.47 = stride.45 * NON_LVALUE_EXPR <ubound.44>;
  size.47 = MAX_EXPR <size.47, 0>;
  D.3842 = size.47 + -1;
  D.3843 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.47> * 64;
  D.3844 = (sizetype) NON_LVALUE_EXPR <size.47> * 8;
  offset.46 = ~NON_LVALUE_EXPR <stride.43> - NON_LVALUE_EXPR <stride.45>;
  ubound.48 = (integer(kind=8)) *nmax;
  stride.50 = NON_LVALUE_EXPR <ubound.48>;
  stride.50 = MAX_EXPR <stride.50, 0>;
  ubound.49 = (integer(kind=8)) *nmax;
  stride.52 = stride.50 * NON_LVALUE_EXPR <ubound.49>;
  stride.52 = MAX_EXPR <stride.52, 0>;
  ubound.51 = (integer(kind=8)) *m;
  size.54 = stride.52 * NON_LVALUE_EXPR <ubound.51>;
  size.54 = MAX_EXPR <size.54, 0>;
  D.3839 = size.54 + -1;
  D.3840 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.54> * 64;
  D.3841 = (sizetype) NON_LVALUE_EXPR <size.54> * 8;
  offset.53 = ~NON_LVALUE_EXPR <stride.50> - NON_LVALUE_EXPR <stride.52>;
  ubound.34 = (integer(kind=8)) *ntot;
  size.35 = NON_LVALUE_EXPR <ubound.34>;
  size.35 = MAX_EXPR <size.35, 0>;
  D.3836 = size.35 + -1;
  D.3837 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.35> * 32;
  D.3838 = (sizetype) NON_LVALUE_EXPR <size.35> * 4;
  ubound.36 = (integer(kind=8)) *ntot;
  stride.38 = NON_LVALUE_EXPR <ubound.36>;
  stride.38 = MAX_EXPR <stride.38, 0>;
  ubound.37 = (integer(kind=8)) *pcol;
  size.40 = stride.38 * NON_LVALUE_EXPR <ubound.37>;
  size.40 = MAX_EXPR <size.40, 0>;
  D.3833 = size.40 + -1;
  D.3834 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.40> * 64;
  D.3835 = (sizetype) NON_LVALUE_EXPR <size.40> * 8;
  offset.39 = ~NON_LVALUE_EXPR <stride.38>;
  ubound.62 = (integer(kind=8)) *p;
  size.63 = NON_LVALUE_EXPR <ubound.62>;
  size.63 = MAX_EXPR <size.63, 0>;
  D.3830 = size.63 + -1;
  D.3831 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.63> * 32;
  D.3832 = (sizetype) NON_LVALUE_EXPR <size.63> * 4;
  ubound.64 = (integer(kind=8)) *p;
  stride.66 = NON_LVALUE_EXPR <ubound.64>;
  stride.66 = MAX_EXPR <stride.66, 0>;
  ubound.65 = (integer(kind=8)) *nmax;
  size.68 = stride.66 * NON_LVALUE_EXPR <ubound.65>;
  size.68 = MAX_EXPR <size.68, 0>;
  D.3827 = size.68 + -1;
  D.3828 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.68> * 64;
  D.3829 = (sizetype) NON_LVALUE_EXPR <size.68> * 8;
  offset.67 = ~NON_LVALUE_EXPR <stride.66>;
  ubound.81 = (integer(kind=8)) *ntot;
  size.82 = NON_LVALUE_EXPR <ubound.81>;
  size.82 = MAX_EXPR <size.82, 0>;
  D.3824 = size.82 + -1;
  D.3825 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.82> * 64;
  D.3826 = (sizetype) NON_LVALUE_EXPR <size.82> * 8;
  ubound.74 = (integer(kind=8)) *p;
  stride.76 = NON_LVALUE_EXPR <ubound.74>;
  stride.76 = MAX_EXPR <stride.76, 0>;
  ubound.75 = (integer(kind=8)) *p;
  size.78 = stride.76 * NON_LVALUE_EXPR <ubound.75>;
  size.78 = MAX_EXPR <size.78, 0>;
  D.3821 = size.78 + -1;
  D.3822 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.78> * 64;
  D.3823 = (sizetype) NON_LVALUE_EXPR <size.78> * 8;
  offset.77 = ~NON_LVALUE_EXPR <stride.76>;
  ubound.28 = (integer(kind=8)) *p;
  size.29 = NON_LVALUE_EXPR <ubound.28>;
  size.29 = MAX_EXPR <size.29, 0>;
  D.3818 = size.29 + -1;
  D.3819 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.29> * 64;
  D.3820 = (sizetype) NON_LVALUE_EXPR <size.29> * 8;
  {
    integer(kind=4) D.3700;

    D.3700 = *p;
    i = 1;
    if (i <= D.3700)
      {
        while (1)
          {
            {
              logical(kind=4) D.3710;

              (*xtwy)[(integer(kind=8)) i + -1] = 0.0;
              {
                integer(kind=4) D.3703;
                integer(kind=4) D.3704;

                D.3703 = i;
                D.3704 = *p;
                j = D.3703;
                if (j <= D.3704)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.3708;

                          (*xtwx)[((integer(kind=8)) j * stride.71 + offset.72) + (integer(kind=8)) i] = 0.0;
                          __label_000005:;
                          L.15:;
                          D.3708 = j == D.3704;
                          j = j + 1;
                          if (D.3708) goto L.16;
                        }
                      }
                  }
                L.16:;
              }
              __label_000010:;
              L.13:;
              D.3710 = i == D.3700;
              i = i + 1;
              if (D.3710) goto L.14;
            }
          }
      }
    L.14:;
  }
  {
    integer(kind=4) D.3711;

    D.3711 = *m;
    s = 1;
    if (s <= D.3711)
      {
        while (1)
          {
            {
              logical(kind=4) D.3785;

              st = (*ist)[(integer(kind=8)) s + -1];
              fin = (*ifin)[(integer(kind=8)) s + -1];
              mkw3 ((integer(kind=4) *) q, (integer(kind=4) *) nmax, (integer(kind=4) *) m, wk, ztv, vi, &s, w, (integer(kind=4) *) ntot, occ, &st, &fin, (integer(kind=4) *) iflag);
              mkxtw ((integer(kind=4) *) ntot, (integer(kind=4) *) pcol, pred, (integer(kind=4) *) p, xcol, occ, &st, &fin, (integer(kind=4) *) nmax, w, xtw, &s, (integer(kind=4) *) m);
              mkxtwx ((integer(kind=4) *) ntot, (integer(kind=4) *) pcol, pred, (integer(kind=4) *) p, xcol, occ, &st, &fin, (integer(kind=4) *) nmax, xtw, xtwx);
              mkxtwy ((integer(kind=4) *) ntot, (integer(kind=4) *) p, occ, &st, &fin, (integer(kind=4) *) nmax, xtw, y, xtwy);
              __label_000100:;
              L.17:;
              D.3785 = s == D.3711;
              s = s + 1;
              if (D.3785) goto L.18;
            }
          }
      }
    L.18:;
  }
  chfc ((integer(kind=4) *) p, (integer(kind=4) *) p, xtwx);
  bkslv ((integer(kind=4) *) p, (integer(kind=4) *) p, xtwx);
  mm ((integer(kind=4) *) p, (integer(kind=4) *) p, xtwx, xtwxinv);
  {
    integer(kind=4) D.3802;

    D.3802 = *p;
    i = 1;
    if (i <= D.3802)
      {
        while (1)
          {
            {
              logical(kind=4) D.3817;

              sum = 0.0;
              {
                integer(kind=4) D.3805;

                D.3805 = i;
                j = 1;
                if (j <= D.3805)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.3809;

                          sum = (*xtwxinv)[((integer(kind=8)) i * stride.76 + offset.77) + (integer(kind=8)) j] * (*xtwy)[(integer(kind=8)) j + -1] + sum;
                          __label_000110:;
                          L.21:;
                          D.3809 = j == D.3805;
                          j = j + 1;
                          if (D.3809) goto L.22;
                        }
                      }
                  }
                L.22:;
              }
              {
                integer(kind=4) D.3810;
                integer(kind=4) D.3811;

                D.3810 = i + 1;
                D.3811 = *p;
                j = D.3810;
                if (j <= D.3811)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.3815;

                          sum = (*xtwxinv)[((integer(kind=8)) j * stride.76 + offset.77) + (integer(kind=8)) i] * (*xtwy)[(integer(kind=8)) j + -1] + sum;
                          __label_000120:;
                          L.23:;
                          D.3815 = j == D.3811;
                          j = j + 1;
                          if (D.3815) goto L.24;
                        }
                      }
                  }
                L.24:;
              }
              (*beta)[(integer(kind=8)) i + -1] = sum;
              __label_000130:;
              L.19:;
              D.3817 = i == D.3802;
              i = i + 1;
              if (D.3817) goto L.20;
            }
          }
      }
    L.20:;
  }
  return;
}


mm (integer(kind=4) & restrict p, integer(kind=4) & restrict pw, real(kind=8)[0:D.3900] * restrict wm, real(kind=8)[0:D.3897] * restrict cm)
{
  integer(kind=8) ubound.90;
  integer(kind=8) ubound.91;
  integer(kind=8) stride.92;
  integer(kind=8) offset.93;
  integer(kind=8) size.94;
  integer(kind=4) i;
  integer(kind=4) j;
  integer(kind=4) k;
  real(kind=8) sum;
  integer(kind=8) ubound.95;
  integer(kind=8) ubound.96;
  integer(kind=8) stride.97;
  integer(kind=8) offset.98;
  integer(kind=8) size.99;
  integer(kind=8) D.3897;
  bitsizetype D.3898;
  sizetype D.3899;
  integer(kind=8) D.3900;
  bitsizetype D.3901;
  sizetype D.3902;

  ubound.95 = (integer(kind=8)) *p;
  stride.97 = NON_LVALUE_EXPR <ubound.95>;
  stride.97 = MAX_EXPR <stride.97, 0>;
  ubound.96 = (integer(kind=8)) *p;
  size.99 = stride.97 * NON_LVALUE_EXPR <ubound.96>;
  size.99 = MAX_EXPR <size.99, 0>;
  D.3900 = size.99 + -1;
  D.3901 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.99> * 64;
  D.3902 = (sizetype) NON_LVALUE_EXPR <size.99> * 8;
  offset.98 = ~NON_LVALUE_EXPR <stride.97>;
  ubound.90 = (integer(kind=8)) *p;
  stride.92 = NON_LVALUE_EXPR <ubound.90>;
  stride.92 = MAX_EXPR <stride.92, 0>;
  ubound.91 = (integer(kind=8)) *p;
  size.94 = stride.92 * NON_LVALUE_EXPR <ubound.91>;
  size.94 = MAX_EXPR <size.94, 0>;
  D.3897 = size.94 + -1;
  D.3898 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.94> * 64;
  D.3899 = (sizetype) NON_LVALUE_EXPR <size.94> * 8;
  offset.93 = ~NON_LVALUE_EXPR <stride.92>;
  {
    integer(kind=4) D.3879;

    D.3879 = *pw;
    i = 1;
    if (i <= D.3879)
      {
        while (1)
          {
            {
              logical(kind=4) D.3896;

              {
                integer(kind=4) D.3882;
                integer(kind=4) D.3883;

                D.3882 = i;
                D.3883 = *pw;
                j = D.3882;
                if (j <= D.3883)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.3894;

                          sum = 0.0;
                          {
                            integer(kind=4) M.100;
                            integer(kind=4) D.3887;
                            integer(kind=4) D.3888;

                            M.100 = i;
                            if (j > M.100)
                              {
                                M.100 = j;
                              }
                            D.3887 = M.100;
                            D.3888 = *pw;
                            k = D.3887;
                            if (k <= D.3888)
                              {
                                while (1)
                                  {
                                    {
                                      logical(kind=4) D.3892;

                                      sum = (*wm)[((integer(kind=8)) k * stride.97 + offset.98) + (integer(kind=8)) i] * (*wm)[((integer(kind=8)) k * stride.97 + offset.98) + (integer(kind=8)) j] + sum;
                                      __label_000002:;
                                      L.29:;
                                      D.3892 = k == D.3888;
                                      k = k + 1;
                                      if (D.3892) goto L.30;
                                    }
                                  }
                              }
                            L.30:;
                          }
                          (*cm)[((integer(kind=8)) j * stride.92 + offset.93) + (integer(kind=8)) i] = sum;
                          __label_000005:;
                          L.27:;
                          D.3894 = j == D.3883;
                          j = j + 1;
                          if (D.3894) goto L.28;
                        }
                      }
                  }
                L.28:;
              }
              __label_000010:;
              L.25:;
              D.3896 = i == D.3879;
              i = i + 1;
              if (D.3896) goto L.26;
            }
          }
      }
    L.26:;
  }
  return;
}


bkslv (integer(kind=4) & restrict p, integer(kind=4) & restrict pw, real(kind=8)[0:D.3929] * restrict s)
{
  integer(kind=4) i;
  integer(kind=4) j;
  integer(kind=4) k;
  integer(kind=8) ubound.101;
  integer(kind=8) ubound.102;
  integer(kind=8) stride.103;
  integer(kind=8) offset.104;
  integer(kind=8) size.105;
  real(kind=8) sum;
  integer(kind=8) D.3929;
  bitsizetype D.3930;
  sizetype D.3931;

  ubound.101 = (integer(kind=8)) *p;
  stride.103 = NON_LVALUE_EXPR <ubound.101>;
  stride.103 = MAX_EXPR <stride.103, 0>;
  ubound.102 = (integer(kind=8)) *p;
  size.105 = stride.103 * NON_LVALUE_EXPR <ubound.102>;
  size.105 = MAX_EXPR <size.105, 0>;
  D.3929 = size.105 + -1;
  D.3930 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.105> * 64;
  D.3931 = (sizetype) NON_LVALUE_EXPR <size.105> * 8;
  offset.104 = ~NON_LVALUE_EXPR <stride.103>;
  (*s)[(offset.104 + NON_LVALUE_EXPR <stride.103>) + 1] = 1.0e+0 / (*s)[(offset.104 + NON_LVALUE_EXPR <stride.103>) + 1];
  {
    integer(kind=4) D.3913;

    D.3913 = *pw;
    k = 2;
    if (k <= D.3913)
      {
        while (1)
          {
            {
              logical(kind=4) D.3928;

              (*s)[((integer(kind=8)) k * stride.103 + offset.104) + (integer(kind=8)) k] = 1.0e+0 / (*s)[((integer(kind=8)) k * stride.103 + offset.104) + (integer(kind=8)) k];
              {
                integer(kind=4) D.3916;

                D.3916 = k + -1;
                j = 1;
                if (j <= D.3916)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.3926;

                          sum = 0.0;
                          {
                            integer(kind=4) D.3919;
                            integer(kind=4) D.3920;

                            D.3919 = j;
                            D.3920 = k + -1;
                            i = D.3919;
                            if (i <= D.3920)
                              {
                                while (1)
                                  {
                                    {
                                      logical(kind=4) D.3924;

                                      sum = (*s)[((integer(kind=8)) i * stride.103 + offset.104) + (integer(kind=8)) j] * (*s)[((integer(kind=8)) k * stride.103 + offset.104) + (integer(kind=8)) i] + sum;
                                      __label_000003:;
                                      L.35:;
                                      D.3924 = i == D.3920;
                                      i = i + 1;
                                      if (D.3924) goto L.36;
                                    }
                                  }
                              }
                            L.36:;
                          }
                          (*s)[((integer(kind=8)) k * stride.103 + offset.104) + (integer(kind=8)) j] = -((*s)[((integer(kind=8)) k * stride.103 + offset.104) + (integer(kind=8)) k] * sum);
                          __label_000005:;
                          L.33:;
                          D.3926 = j == D.3916;
                          j = j + 1;
                          if (D.3926) goto L.34;
                        }
                      }
                  }
                L.34:;
              }
              __label_000010:;
              L.31:;
              D.3928 = k == D.3913;
              k = k + 1;
              if (D.3928) goto L.32;
            }
          }
      }
    L.32:;
  }
  return;
}


chfc (integer(kind=4) & restrict p, integer(kind=4) & restrict pw, real(kind=8)[0:D.3965] * restrict s)
{
  integer(kind=4) i;
  integer(kind=4) j;
  integer(kind=4) k;
  integer(kind=8) ubound.106;
  integer(kind=8) ubound.107;
  integer(kind=8) stride.108;
  integer(kind=8) offset.109;
  integer(kind=8) size.110;
  real(kind=8) sum;
  integer(kind=8) D.3965;
  bitsizetype D.3966;
  sizetype D.3967;

  ubound.106 = (integer(kind=8)) *p;
  stride.108 = NON_LVALUE_EXPR <ubound.106>;
  stride.108 = MAX_EXPR <stride.108, 0>;
  ubound.107 = (integer(kind=8)) *p;
  size.110 = stride.108 * NON_LVALUE_EXPR <ubound.107>;
  size.110 = MAX_EXPR <size.110, 0>;
  D.3965 = size.110 + -1;
  D.3966 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.110> * 64;
  D.3967 = (sizetype) NON_LVALUE_EXPR <size.110> * 8;
  offset.109 = ~NON_LVALUE_EXPR <stride.108>;
  {
    integer(kind=4) D.3942;

    D.3942 = *pw;
    i = 1;
    if (i <= D.3942)
      {
        while (1)
          {
            {
              logical(kind=4) D.3964;

              sum = 0.0;
              {
                integer(kind=4) D.3945;

                D.3945 = i + -1;
                k = 1;
                if (k <= D.3945)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.3951;

                          {
                            real(kind=8) D.3948;
                            real(kind=8) D.3949;

                            D.3948 = (*s)[((integer(kind=8)) i * stride.108 + offset.109) + (integer(kind=8)) k];
                            D.3949 = D.3948 * D.3948;
                            sum = sum + D.3949;
                          }
                          __label_000010:;
                          L.39:;
                          D.3951 = k == D.3945;
                          k = k + 1;
                          if (D.3951) goto L.40;
                        }
                      }
                  }
                L.40:;
              }
              (*s)[((integer(kind=8)) i * stride.108 + offset.109) + (integer(kind=8)) i] = __builtin_sqrt ((*s)[((integer(kind=8)) i * stride.108 + offset.109) + (integer(kind=8)) i] - sum);
              {
                integer(kind=4) D.3952;
                integer(kind=4) D.3953;

                D.3952 = i + 1;
                D.3953 = *pw;
                j = D.3952;
                if (j <= D.3953)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.3962;

                          sum = 0.0;
                          {
                            integer(kind=4) D.3956;

                            D.3956 = i + -1;
                            k = 1;
                            if (k <= D.3956)
                              {
                                while (1)
                                  {
                                    {
                                      logical(kind=4) D.3960;

                                      sum = (*s)[((integer(kind=8)) i * stride.108 + offset.109) + (integer(kind=8)) k] * (*s)[((integer(kind=8)) j * stride.108 + offset.109) + (integer(kind=8)) k] + sum;
                                      __label_000030:;
                                      L.43:;
                                      D.3960 = k == D.3956;
                                      k = k + 1;
                                      if (D.3960) goto L.44;
                                    }
                                  }
                              }
                            L.44:;
                          }
                          (*s)[((integer(kind=8)) j * stride.108 + offset.109) + (integer(kind=8)) i] = (((*s)[((integer(kind=8)) j * stride.108 + offset.109) + (integer(kind=8)) i] - sum)) / (*s)[((integer(kind=8)) i * stride.108 + offset.109) + (integer(kind=8)) i];
                          __label_000040:;
                          L.41:;
                          D.3962 = j == D.3953;
                          j = j + 1;
                          if (D.3962) goto L.42;
                        }
                      }
                  }
                L.42:;
              }
              __label_000050:;
              L.37:;
              D.3964 = i == D.3942;
              i = i + 1;
              if (D.3964) goto L.38;
            }
          }
      }
    L.38:;
  }
  return;
}


mkxtwy (integer(kind=4) & restrict ntot, integer(kind=4) & restrict p, integer(kind=4)[0:D.4003] * restrict occ, integer(kind=4) & restrict st, integer(kind=4) & restrict fin, integer(kind=4) & restrict nmax, real(kind=8)[0:D.4006] * restrict xtw, real(kind=8)[0:D.4000] * restrict y, real(kind=8)[0:D.3997] * restrict xtwy)
{
  integer(kind=4) i;
  integer(kind=4) j;
  integer(kind=8) ubound.111;
  integer(kind=8) size.112;
  real(kind=8) sum;
  integer(kind=8) ubound.113;
  integer(kind=8) ubound.114;
  integer(kind=8) stride.115;
  integer(kind=8) offset.116;
  integer(kind=8) size.117;
  integer(kind=8) ubound.118;
  integer(kind=8) size.119;
  integer(kind=8) ubound.120;
  integer(kind=8) size.121;
  integer(kind=8) D.3997;
  bitsizetype D.3998;
  sizetype D.3999;
  integer(kind=8) D.4000;
  bitsizetype D.4001;
  sizetype D.4002;
  integer(kind=8) D.4003;
  bitsizetype D.4004;
  sizetype D.4005;
  integer(kind=8) D.4006;
  bitsizetype D.4007;
  sizetype D.4008;

  ubound.113 = (integer(kind=8)) *p;
  stride.115 = NON_LVALUE_EXPR <ubound.113>;
  stride.115 = MAX_EXPR <stride.115, 0>;
  ubound.114 = (integer(kind=8)) *nmax;
  size.117 = stride.115 * NON_LVALUE_EXPR <ubound.114>;
  size.117 = MAX_EXPR <size.117, 0>;
  D.4006 = size.117 + -1;
  D.4007 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.117> * 64;
  D.4008 = (sizetype) NON_LVALUE_EXPR <size.117> * 8;
  offset.116 = ~NON_LVALUE_EXPR <stride.115>;
  ubound.111 = (integer(kind=8)) *ntot;
  size.112 = NON_LVALUE_EXPR <ubound.111>;
  size.112 = MAX_EXPR <size.112, 0>;
  D.4003 = size.112 + -1;
  D.4004 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.112> * 32;
  D.4005 = (sizetype) NON_LVALUE_EXPR <size.112> * 4;
  ubound.120 = (integer(kind=8)) *ntot;
  size.121 = NON_LVALUE_EXPR <ubound.120>;
  size.121 = MAX_EXPR <size.121, 0>;
  D.4000 = size.121 + -1;
  D.4001 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.121> * 64;
  D.4002 = (sizetype) NON_LVALUE_EXPR <size.121> * 8;
  ubound.118 = (integer(kind=8)) *p;
  size.119 = NON_LVALUE_EXPR <ubound.118>;
  size.119 = MAX_EXPR <size.119, 0>;
  D.3997 = size.119 + -1;
  D.3998 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.119> * 64;
  D.3999 = (sizetype) NON_LVALUE_EXPR <size.119> * 8;
  {
    integer(kind=4) D.3986;

    D.3986 = *p;
    i = 1;
    if (i <= D.3986)
      {
        while (1)
          {
            {
              logical(kind=4) D.3996;

              sum = 0.0;
              {
                integer(kind=4) D.3989;
                integer(kind=4) D.3990;

                D.3989 = *st;
                D.3990 = *fin;
                j = D.3989;
                if (j <= D.3990)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.3994;

                          sum = (*xtw)[((integer(kind=8)) (*occ)[(integer(kind=8)) j + -1] * stride.115 + offset.116) + (integer(kind=8)) i] * (*y)[(integer(kind=8)) j + -1] + sum;
                          __label_000100:;
                          L.47:;
                          D.3994 = j == D.3990;
                          j = j + 1;
                          if (D.3994) goto L.48;
                        }
                      }
                  }
                L.48:;
              }
              (*xtwy)[(integer(kind=8)) i + -1] = (*xtwy)[(integer(kind=8)) i + -1] + sum;
              __label_000200:;
              L.45:;
              D.3996 = i == D.3986;
              i = i + 1;
              if (D.3996) goto L.46;
            }
          }
      }
    L.46:;
  }
  return;
}


mkxtwx (integer(kind=4) & restrict ntot, integer(kind=4) & restrict pcol, real(kind=8)[0:D.4060] * restrict pred, integer(kind=4) & restrict p, integer(kind=4)[0:D.4057] * restrict xcol, integer(kind=4)[0:D.4063] * restrict occ, integer(kind=4) & restrict st, integer(kind=4) & restrict fin, integer(kind=4) & restrict nmax, real(kind=8)[0:D.4066] * restrict xtw, real(kind=8)[0:D.4054] * restrict xtwx)
{
  integer(kind=4) i;
  integer(kind=4) j;
  integer(kind=4) k;
  integer(kind=8) ubound.122;
  integer(kind=8) size.123;
  integer(kind=8) ubound.124;
  integer(kind=8) ubound.125;
  integer(kind=8) stride.126;
  integer(kind=8) offset.127;
  integer(kind=8) size.128;
  real(kind=8) sum;
  integer(kind=8) ubound.129;
  integer(kind=8) size.130;
  integer(kind=8) ubound.131;
  integer(kind=8) ubound.132;
  integer(kind=8) stride.133;
  integer(kind=8) offset.134;
  integer(kind=8) size.135;
  integer(kind=8) ubound.136;
  integer(kind=8) ubound.137;
  integer(kind=8) stride.138;
  integer(kind=8) offset.139;
  integer(kind=8) size.140;
  integer(kind=8) D.4054;
  bitsizetype D.4055;
  sizetype D.4056;
  integer(kind=8) D.4057;
  bitsizetype D.4058;
  sizetype D.4059;
  integer(kind=8) D.4060;
  bitsizetype D.4061;
  sizetype D.4062;
  integer(kind=8) D.4063;
  bitsizetype D.4064;
  sizetype D.4065;
  integer(kind=8) D.4066;
  bitsizetype D.4067;
  sizetype D.4068;

  ubound.131 = (integer(kind=8)) *p;
  stride.133 = NON_LVALUE_EXPR <ubound.131>;
  stride.133 = MAX_EXPR <stride.133, 0>;
  ubound.132 = (integer(kind=8)) *nmax;
  size.135 = stride.133 * NON_LVALUE_EXPR <ubound.132>;
  size.135 = MAX_EXPR <size.135, 0>;
  D.4066 = size.135 + -1;
  D.4067 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.135> * 64;
  D.4068 = (sizetype) NON_LVALUE_EXPR <size.135> * 8;
  offset.134 = ~NON_LVALUE_EXPR <stride.133>;
  ubound.122 = (integer(kind=8)) *ntot;
  size.123 = NON_LVALUE_EXPR <ubound.122>;
  size.123 = MAX_EXPR <size.123, 0>;
  D.4063 = size.123 + -1;
  D.4064 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.123> * 32;
  D.4065 = (sizetype) NON_LVALUE_EXPR <size.123> * 4;
  ubound.124 = (integer(kind=8)) *ntot;
  stride.126 = NON_LVALUE_EXPR <ubound.124>;
  stride.126 = MAX_EXPR <stride.126, 0>;
  ubound.125 = (integer(kind=8)) *pcol;
  size.128 = stride.126 * NON_LVALUE_EXPR <ubound.125>;
  size.128 = MAX_EXPR <size.128, 0>;
  D.4060 = size.128 + -1;
  D.4061 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.128> * 64;
  D.4062 = (sizetype) NON_LVALUE_EXPR <size.128> * 8;
  offset.127 = ~NON_LVALUE_EXPR <stride.126>;
  ubound.129 = (integer(kind=8)) *p;
  size.130 = NON_LVALUE_EXPR <ubound.129>;
  size.130 = MAX_EXPR <size.130, 0>;
  D.4057 = size.130 + -1;
  D.4058 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.130> * 32;
  D.4059 = (sizetype) NON_LVALUE_EXPR <size.130> * 4;
  ubound.136 = (integer(kind=8)) *p;
  stride.138 = NON_LVALUE_EXPR <ubound.136>;
  stride.138 = MAX_EXPR <stride.138, 0>;
  ubound.137 = (integer(kind=8)) *p;
  size.140 = stride.138 * NON_LVALUE_EXPR <ubound.137>;
  size.140 = MAX_EXPR <size.140, 0>;
  D.4054 = size.140 + -1;
  D.4055 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.140> * 64;
  D.4056 = (sizetype) NON_LVALUE_EXPR <size.140> * 8;
  offset.139 = ~NON_LVALUE_EXPR <stride.138>;
  {
    integer(kind=4) D.4037;

    D.4037 = *p;
    i = 1;
    if (i <= D.4037)
      {
        while (1)
          {
            {
              logical(kind=4) D.4053;

              {
                integer(kind=4) D.4040;
                integer(kind=4) D.4041;

                D.4040 = i;
                D.4041 = *p;
                j = D.4040;
                if (j <= D.4041)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.4051;

                          sum = 0.0;
                          {
                            integer(kind=4) D.4044;
                            integer(kind=4) D.4045;

                            D.4044 = *st;
                            D.4045 = *fin;
                            k = D.4044;
                            if (k <= D.4045)
                              {
                                while (1)
                                  {
                                    {
                                      logical(kind=4) D.4049;

                                      sum = (*xtw)[((integer(kind=8)) (*occ)[(integer(kind=8)) k + -1] * stride.133 + offset.134) + (integer(kind=8)) i] * (*pred)[((integer(kind=8)) (*xcol)[(integer(kind=8)) j + -1] * stride.126 + offset.127) + (integer(kind=8)) k] + sum;
                                      __label_000100:;
                                      L.53:;
                                      D.4049 = k == D.4045;
                                      k = k + 1;
                                      if (D.4049) goto L.54;
                                    }
                                  }
                              }
                            L.54:;
                          }
                          (*xtwx)[((integer(kind=8)) j * stride.138 + offset.139) + (integer(kind=8)) i] = (*xtwx)[((integer(kind=8)) j * stride.138 + offset.139) + (integer(kind=8)) i] + sum;
                          __label_000200:;
                          L.51:;
                          D.4051 = j == D.4041;
                          j = j + 1;
                          if (D.4051) goto L.52;
                        }
                      }
                  }
                L.52:;
              }
              __label_000300:;
              L.49:;
              D.4053 = i == D.4037;
              i = i + 1;
              if (D.4053) goto L.50;
            }
          }
      }
    L.50:;
  }
  return;
}


mkxtw (integer(kind=4) & restrict ntot, integer(kind=4) & restrict pcol, real(kind=8)[0:D.4134] * restrict pred, integer(kind=4) & restrict p, integer(kind=4)[0:D.4131] * restrict xcol, integer(kind=4)[0:D.4125] * restrict occ, integer(kind=4) & restrict st, integer(kind=4) & restrict fin, integer(kind=4) & restrict nmax, real(kind=8)[0:D.4128] * restrict w, real(kind=8)[0:D.4122] * restrict xtw, integer(kind=4) & restrict s, integer(kind=4) & restrict m)
{
  integer(kind=4) i;
  integer(kind=4) j;
  integer(kind=4) k;
  integer(kind=8) ubound.141;
  integer(kind=8) size.142;
  integer(kind=8) ubound.143;
  integer(kind=8) ubound.144;
  integer(kind=8) stride.145;
  integer(kind=8) offset.146;
  integer(kind=8) size.147;
  real(kind=8) sum;
  integer(kind=8) ubound.148;
  integer(kind=8) ubound.149;
  integer(kind=8) stride.150;
  integer(kind=8) ubound.151;
  integer(kind=8) stride.152;
  integer(kind=8) offset.153;
  integer(kind=8) size.154;
  integer(kind=8) ubound.155;
  integer(kind=8) size.156;
  integer(kind=8) ubound.157;
  integer(kind=8) ubound.158;
  integer(kind=8) stride.159;
  integer(kind=8) offset.160;
  integer(kind=8) size.161;
  integer(kind=8) D.4122;
  bitsizetype D.4123;
  sizetype D.4124;
  integer(kind=8) D.4125;
  bitsizetype D.4126;
  sizetype D.4127;
  integer(kind=8) D.4128;
  bitsizetype D.4129;
  sizetype D.4130;
  integer(kind=8) D.4131;
  bitsizetype D.4132;
  sizetype D.4133;
  integer(kind=8) D.4134;
  bitsizetype D.4135;
  sizetype D.4136;

  ubound.143 = (integer(kind=8)) *ntot;
  stride.145 = NON_LVALUE_EXPR <ubound.143>;
  stride.145 = MAX_EXPR <stride.145, 0>;
  ubound.144 = (integer(kind=8)) *pcol;
  size.147 = stride.145 * NON_LVALUE_EXPR <ubound.144>;
  size.147 = MAX_EXPR <size.147, 0>;
  D.4134 = size.147 + -1;
  D.4135 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.147> * 64;
  D.4136 = (sizetype) NON_LVALUE_EXPR <size.147> * 8;
  offset.146 = ~NON_LVALUE_EXPR <stride.145>;
  ubound.155 = (integer(kind=8)) *p;
  size.156 = NON_LVALUE_EXPR <ubound.155>;
  size.156 = MAX_EXPR <size.156, 0>;
  D.4131 = size.156 + -1;
  D.4132 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.156> * 32;
  D.4133 = (sizetype) NON_LVALUE_EXPR <size.156> * 4;
  ubound.148 = (integer(kind=8)) *nmax;
  stride.150 = NON_LVALUE_EXPR <ubound.148>;
  stride.150 = MAX_EXPR <stride.150, 0>;
  ubound.149 = (integer(kind=8)) *nmax;
  stride.152 = stride.150 * NON_LVALUE_EXPR <ubound.149>;
  stride.152 = MAX_EXPR <stride.152, 0>;
  ubound.151 = (integer(kind=8)) *m;
  size.154 = stride.152 * NON_LVALUE_EXPR <ubound.151>;
  size.154 = MAX_EXPR <size.154, 0>;
  D.4128 = size.154 + -1;
  D.4129 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.154> * 64;
  D.4130 = (sizetype) NON_LVALUE_EXPR <size.154> * 8;
  offset.153 = ~NON_LVALUE_EXPR <stride.150> - NON_LVALUE_EXPR <stride.152>;
  ubound.141 = (integer(kind=8)) *ntot;
  size.142 = NON_LVALUE_EXPR <ubound.141>;
  size.142 = MAX_EXPR <size.142, 0>;
  D.4125 = size.142 + -1;
  D.4126 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.142> * 32;
  D.4127 = (sizetype) NON_LVALUE_EXPR <size.142> * 4;
  ubound.157 = (integer(kind=8)) *p;
  stride.159 = NON_LVALUE_EXPR <ubound.157>;
  stride.159 = MAX_EXPR <stride.159, 0>;
  ubound.158 = (integer(kind=8)) *nmax;
  size.161 = stride.159 * NON_LVALUE_EXPR <ubound.158>;
  size.161 = MAX_EXPR <size.161, 0>;
  D.4122 = size.161 + -1;
  D.4123 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.161> * 64;
  D.4124 = (sizetype) NON_LVALUE_EXPR <size.161> * 8;
  offset.160 = ~NON_LVALUE_EXPR <stride.159>;
  {
    integer(kind=4) D.4099;

    D.4099 = *p;
    i = 1;
    if (i <= D.4099)
      {
        while (1)
          {
            {
              logical(kind=4) D.4121;

              {
                integer(kind=4) D.4102;
                integer(kind=4) D.4103;

                D.4102 = *st;
                D.4103 = *fin;
                j = D.4102;
                if (j <= D.4103)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.4119;

                          sum = 0.0;
                          {
                            integer(kind=4) D.4106;
                            integer(kind=4) D.4107;

                            D.4106 = *st;
                            D.4107 = j;
                            k = D.4106;
                            if (k <= D.4107)
                              {
                                while (1)
                                  {
                                    {
                                      logical(kind=4) D.4111;

                                      sum = (*pred)[((integer(kind=8)) (*xcol)[(integer(kind=8)) i + -1] * stride.145 + offset.146) + (integer(kind=8)) k] * (*w)[(((integer(kind=8)) *s * stride.152 + offset.153) + (integer(kind=8)) (*occ)[(integer(kind=8)) j + -1] * stride.150) + (integer(kind=8)) (*occ)[(integer(kind=8)) k + -1]] + sum;
                                      __label_000200:;
                                      L.59:;
                                      D.4111 = k == D.4107;
                                      k = k + 1;
                                      if (D.4111) goto L.60;
                                    }
                                  }
                              }
                            L.60:;
                          }
                          {
                            integer(kind=4) D.4112;
                            integer(kind=4) D.4113;

                            D.4112 = j + 1;
                            D.4113 = *fin;
                            k = D.4112;
                            if (k <= D.4113)
                              {
                                while (1)
                                  {
                                    {
                                      logical(kind=4) D.4117;

                                      sum = (*pred)[((integer(kind=8)) (*xcol)[(integer(kind=8)) i + -1] * stride.145 + offset.146) + (integer(kind=8)) k] * (*w)[(((integer(kind=8)) *s * stride.152 + offset.153) + (integer(kind=8)) (*occ)[(integer(kind=8)) k + -1] * stride.150) + (integer(kind=8)) (*occ)[(integer(kind=8)) j + -1]] + sum;
                                      __label_000300:;
                                      L.61:;
                                      D.4117 = k == D.4113;
                                      k = k + 1;
                                      if (D.4117) goto L.62;
                                    }
                                  }
                              }
                            L.62:;
                          }
                          (*xtw)[((integer(kind=8)) (*occ)[(integer(kind=8)) j + -1] * stride.159 + offset.160) + (integer(kind=8)) i] = sum;
                          __label_000400:;
                          L.57:;
                          D.4119 = j == D.4103;
                          j = j + 1;
                          if (D.4119) goto L.58;
                        }
                      }
                  }
                L.58:;
              }
              __label_000500:;
              L.55:;
              D.4121 = i == D.4099;
              i = i + 1;
              if (D.4121) goto L.56;
            }
          }
      }
    L.56:;
  }
  return;
}


mkw3 (integer(kind=4) & restrict q, integer(kind=4) & restrict nmax, integer(kind=4) & restrict m, real(kind=8)[0:D.4218] * restrict wk, real(kind=8)[0:D.4224] * restrict ztv, real(kind=8)[0:D.4212] * restrict vi, integer(kind=4) & restrict s, real(kind=8)[0:D.4215] * restrict w, integer(kind=4) & restrict ntot, integer(kind=4)[0:D.4221] * restrict occ, integer(kind=4) & restrict st, integer(kind=4) & restrict fin, integer(kind=4) & restrict iflag)
{
  integer(kind=4) i;
  integer(kind=4) j;
  integer(kind=4) k;
  integer(kind=8) ubound.162;
  integer(kind=8) size.163;
  real(kind=8) sum;
  integer(kind=8) ubound.164;
  integer(kind=8) ubound.165;
  integer(kind=8) stride.166;
  integer(kind=8) ubound.167;
  integer(kind=8) stride.168;
  integer(kind=8) offset.169;
  integer(kind=8) size.170;
  integer(kind=8) ubound.171;
  integer(kind=8) ubound.172;
  integer(kind=8) stride.173;
  integer(kind=8) ubound.174;
  integer(kind=8) stride.175;
  integer(kind=8) offset.176;
  integer(kind=8) size.177;
  integer(kind=8) ubound.178;
  integer(kind=8) ubound.179;
  integer(kind=8) stride.180;
  integer(kind=8) ubound.181;
  integer(kind=8) stride.182;
  integer(kind=8) offset.183;
  integer(kind=8) size.184;
  integer(kind=8) ubound.185;
  integer(kind=8) ubound.186;
  integer(kind=8) stride.187;
  integer(kind=8) ubound.188;
  integer(kind=8) stride.189;
  integer(kind=8) offset.190;
  integer(kind=8) size.191;
  integer(kind=8) D.4212;
  bitsizetype D.4213;
  sizetype D.4214;
  integer(kind=8) D.4215;
  bitsizetype D.4216;
  sizetype D.4217;
  integer(kind=8) D.4218;
  bitsizetype D.4219;
  sizetype D.4220;
  integer(kind=8) D.4221;
  bitsizetype D.4222;
  sizetype D.4223;
  integer(kind=8) D.4224;
  bitsizetype D.4225;
  sizetype D.4226;

  ubound.185 = (integer(kind=8)) *q;
  stride.187 = NON_LVALUE_EXPR <ubound.185>;
  stride.187 = MAX_EXPR <stride.187, 0>;
  ubound.186 = (integer(kind=8)) *nmax;
  stride.189 = stride.187 * NON_LVALUE_EXPR <ubound.186>;
  stride.189 = MAX_EXPR <stride.189, 0>;
  ubound.188 = (integer(kind=8)) *m;
  size.191 = stride.189 * NON_LVALUE_EXPR <ubound.188>;
  size.191 = MAX_EXPR <size.191, 0>;
  D.4224 = size.191 + -1;
  D.4225 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.191> * 64;
  D.4226 = (sizetype) NON_LVALUE_EXPR <size.191> * 8;
  offset.190 = ~NON_LVALUE_EXPR <stride.187> - NON_LVALUE_EXPR <stride.189>;
  ubound.162 = (integer(kind=8)) *ntot;
  size.163 = NON_LVALUE_EXPR <ubound.162>;
  size.163 = MAX_EXPR <size.163, 0>;
  D.4221 = size.163 + -1;
  D.4222 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.163> * 32;
  D.4223 = (sizetype) NON_LVALUE_EXPR <size.163> * 4;
  ubound.178 = (integer(kind=8)) *q;
  stride.180 = NON_LVALUE_EXPR <ubound.178>;
  stride.180 = MAX_EXPR <stride.180, 0>;
  ubound.179 = (integer(kind=8)) *nmax;
  stride.182 = stride.180 * NON_LVALUE_EXPR <ubound.179>;
  stride.182 = MAX_EXPR <stride.182, 0>;
  ubound.181 = (integer(kind=8)) *m;
  size.184 = stride.182 * NON_LVALUE_EXPR <ubound.181>;
  size.184 = MAX_EXPR <size.184, 0>;
  D.4218 = size.184 + -1;
  D.4219 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.184> * 64;
  D.4220 = (sizetype) NON_LVALUE_EXPR <size.184> * 8;
  offset.183 = ~NON_LVALUE_EXPR <stride.180> - NON_LVALUE_EXPR <stride.182>;
  ubound.171 = (integer(kind=8)) *nmax;
  stride.173 = NON_LVALUE_EXPR <ubound.171>;
  stride.173 = MAX_EXPR <stride.173, 0>;
  ubound.172 = (integer(kind=8)) *nmax;
  stride.175 = stride.173 * NON_LVALUE_EXPR <ubound.172>;
  stride.175 = MAX_EXPR <stride.175, 0>;
  ubound.174 = (integer(kind=8)) *m;
  size.177 = stride.175 * NON_LVALUE_EXPR <ubound.174>;
  size.177 = MAX_EXPR <size.177, 0>;
  D.4215 = size.177 + -1;
  D.4216 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.177> * 64;
  D.4217 = (sizetype) NON_LVALUE_EXPR <size.177> * 8;
  offset.176 = ~NON_LVALUE_EXPR <stride.173> - NON_LVALUE_EXPR <stride.175>;
  ubound.164 = (integer(kind=8)) *nmax;
  stride.166 = NON_LVALUE_EXPR <ubound.164>;
  stride.166 = MAX_EXPR <stride.166, 0>;
  ubound.165 = (integer(kind=8)) *nmax;
  stride.168 = stride.166 * NON_LVALUE_EXPR <ubound.165>;
  stride.168 = MAX_EXPR <stride.168, 0>;
  ubound.167 = (integer(kind=8)) *m;
  size.170 = stride.168 * NON_LVALUE_EXPR <ubound.167>;
  size.170 = MAX_EXPR <size.170, 0>;
  D.4212 = size.170 + -1;
  D.4213 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.170> * 64;
  D.4214 = (sizetype) NON_LVALUE_EXPR <size.170> * 8;
  offset.169 = ~NON_LVALUE_EXPR <stride.166> - NON_LVALUE_EXPR <stride.168>;
  if (*iflag != 1)
    {
      {
        integer(kind=4) D.4177;
        integer(kind=4) D.4178;

        D.4177 = *st;
        D.4178 = *fin;
        i = D.4177;
        if (i <= D.4178)
          {
            while (1)
              {
                {
                  logical(kind=4) D.4193;

                  {
                    integer(kind=4) D.4181;
                    integer(kind=4) D.4182;

                    D.4181 = i;
                    D.4182 = *fin;
                    j = D.4181;
                    if (j <= D.4182)
                      {
                        while (1)
                          {
                            {
                              logical(kind=4) D.4191;

                              sum = 0.0;
                              {
                                integer(kind=4) D.4185;

                                D.4185 = *q;
                                k = 1;
                                if (k <= D.4185)
                                  {
                                    while (1)
                                      {
                                        {
                                          logical(kind=4) D.4189;

                                          sum = (*ztv)[(((integer(kind=8)) *s * stride.189 + offset.190) + (integer(kind=8)) (*occ)[(integer(kind=8)) i + -1] * stride.187) + (integer(kind=8)) k] * (*wk)[(((integer(kind=8)) *s * stride.182 + offset.183) + (integer(kind=8)) (*occ)[(integer(kind=8)) j + -1] * stride.180) + (integer(kind=8)) k] + sum;
                                          __label_000100:;
                                          L.68:;
                                          D.4189 = k == D.4185;
                                          k = k + 1;
                                          if (D.4189) goto L.69;
                                        }
                                      }
                                  }
                                L.69:;
                              }
                              (*w)[(((integer(kind=8)) *s * stride.175 + offset.176) + (integer(kind=8)) (*occ)[(integer(kind=8)) j + -1] * stride.173) + (integer(kind=8)) (*occ)[(integer(kind=8)) i + -1]] = (((*vi)[(((integer(kind=8)) *s * stride.168 + offset.169) + (integer(kind=8)) (*occ)[(integer(kind=8)) j + -1] * stride.166) + (integer(kind=8)) (*occ)[(integer(kind=8)) i + -1]] - sum));
                              __label_000200:;
                              L.66:;
                              D.4191 = j == D.4182;
                              j = j + 1;
                              if (D.4191) goto L.67;
                            }
                          }
                      }
                    L.67:;
                  }
                  __label_000300:;
                  L.64:;
                  D.4193 = i == D.4178;
                  i = i + 1;
                  if (D.4193) goto L.65;
                }
              }
          }
        L.65:;
      }
    }
  else
    {
      {
        integer(kind=4) D.4194;
        integer(kind=4) D.4195;

        D.4194 = *st;
        D.4195 = *fin;
        i = D.4194;
        if (i <= D.4195)
          {
            while (1)
              {
                {
                  logical(kind=4) D.4211;

                  {
                    integer(kind=4) D.4198;
                    integer(kind=4) D.4199;

                    D.4198 = i;
                    D.4199 = *fin;
                    j = D.4198;
                    if (j <= D.4199)
                      {
                        while (1)
                          {
                            {
                              logical(kind=4) D.4209;

                              sum = 0.0;
                              {
                                integer(kind=4) D.4202;

                                D.4202 = *q;
                                k = 1;
                                if (k <= D.4202)
                                  {
                                    while (1)
                                      {
                                        {
                                          logical(kind=4) D.4206;

                                          sum = (*ztv)[(((integer(kind=8)) *s * stride.189 + offset.190) + (integer(kind=8)) (*occ)[(integer(kind=8)) i + -1] * stride.187) + (integer(kind=8)) k] * (*wk)[(((integer(kind=8)) *s * stride.182 + offset.183) + (integer(kind=8)) (*occ)[(integer(kind=8)) j + -1] * stride.180) + (integer(kind=8)) k] + sum;
                                          __label_000400:;
                                          L.74:;
                                          D.4206 = k == D.4202;
                                          k = k + 1;
                                          if (D.4206) goto L.75;
                                        }
                                      }
                                  }
                                L.75:;
                              }
                              if (i == j)
                                {
                                  (*w)[(((integer(kind=8)) *s * stride.175 + offset.176) + (integer(kind=8)) (*occ)[(integer(kind=8)) j + -1] * stride.173) + (integer(kind=8)) (*occ)[(integer(kind=8)) i + -1]] = ((1.0e+0 - sum));
                                }
                              else
                                {
                                  (*w)[(((integer(kind=8)) *s * stride.175 + offset.176) + (integer(kind=8)) (*occ)[(integer(kind=8)) j + -1] * stride.173) + (integer(kind=8)) (*occ)[(integer(kind=8)) i + -1]] = -sum;
                                }
                              L.76:;
                              __label_000500:;
                              L.72:;
                              D.4209 = j == D.4199;
                              j = j + 1;
                              if (D.4209) goto L.73;
                            }
                          }
                      }
                    L.73:;
                  }
                  __label_000600:;
                  L.70:;
                  D.4211 = i == D.4195;
                  i = i + 1;
                  if (D.4211) goto L.71;
                }
              }
          }
        L.71:;
      }
    }
  L.63:;
  return;
}


mkxi (integer(kind=4) & restrict q, integer(kind=4) & restrict m, real(kind=8)[0:D.4296] * restrict b, real(kind=8)[0:D.4299] * restrict sig, real(kind=8)[0:D.4302] * restrict xi, real(kind=8) & restrict sigma2)
{
  integer(kind=8) ubound.192;
  integer(kind=8) ubound.193;
  integer(kind=8) stride.194;
  integer(kind=8) offset.195;
  integer(kind=8) size.196;
  integer(kind=4) i;
  integer(kind=4) j;
  integer(kind=4) s;
  integer(kind=8) ubound.197;
  integer(kind=8) ubound.198;
  integer(kind=8) stride.199;
  integer(kind=8) ubound.200;
  integer(kind=8) stride.201;
  integer(kind=8) offset.202;
  integer(kind=8) size.203;
  integer(kind=8) ubound.204;
  integer(kind=8) ubound.205;
  integer(kind=8) stride.206;
  integer(kind=8) offset.207;
  integer(kind=8) size.208;
  integer(kind=8) D.4296;
  bitsizetype D.4297;
  sizetype D.4298;
  integer(kind=8) D.4299;
  bitsizetype D.4300;
  sizetype D.4301;
  integer(kind=8) D.4302;
  bitsizetype D.4303;
  sizetype D.4304;

  ubound.204 = (integer(kind=8)) *q;
  stride.206 = NON_LVALUE_EXPR <ubound.204>;
  stride.206 = MAX_EXPR <stride.206, 0>;
  ubound.205 = (integer(kind=8)) *q;
  size.208 = stride.206 * NON_LVALUE_EXPR <ubound.205>;
  size.208 = MAX_EXPR <size.208, 0>;
  D.4302 = size.208 + -1;
  D.4303 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.208> * 64;
  D.4304 = (sizetype) NON_LVALUE_EXPR <size.208> * 8;
  offset.207 = ~NON_LVALUE_EXPR <stride.206>;
  ubound.197 = (integer(kind=8)) *q;
  stride.199 = NON_LVALUE_EXPR <ubound.197>;
  stride.199 = MAX_EXPR <stride.199, 0>;
  ubound.198 = (integer(kind=8)) *q;
  stride.201 = stride.199 * NON_LVALUE_EXPR <ubound.198>;
  stride.201 = MAX_EXPR <stride.201, 0>;
  ubound.200 = (integer(kind=8)) *m;
  size.203 = stride.201 * NON_LVALUE_EXPR <ubound.200>;
  size.203 = MAX_EXPR <size.203, 0>;
  D.4299 = size.203 + -1;
  D.4300 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.203> * 64;
  D.4301 = (sizetype) NON_LVALUE_EXPR <size.203> * 8;
  offset.202 = ~NON_LVALUE_EXPR <stride.199> - NON_LVALUE_EXPR <stride.201>;
  ubound.192 = (integer(kind=8)) *q;
  stride.194 = NON_LVALUE_EXPR <ubound.192>;
  stride.194 = MAX_EXPR <stride.194, 0>;
  ubound.193 = (integer(kind=8)) *m;
  size.196 = stride.194 * NON_LVALUE_EXPR <ubound.193>;
  size.196 = MAX_EXPR <size.196, 0>;
  D.4296 = size.196 + -1;
  D.4297 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.196> * 64;
  D.4298 = (sizetype) NON_LVALUE_EXPR <size.196> * 8;
  offset.195 = ~NON_LVALUE_EXPR <stride.194>;
  {
    integer(kind=4) D.4258;

    D.4258 = *q;
    i = 1;
    if (i <= D.4258)
      {
        while (1)
          {
            {
              logical(kind=4) D.4268;

              {
                integer(kind=4) D.4261;
                integer(kind=4) D.4262;

                D.4261 = i;
                D.4262 = *q;
                j = D.4261;
                if (j <= D.4262)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.4266;

                          (*xi)[((integer(kind=8)) j * stride.206 + offset.207) + (integer(kind=8)) i] = 0.0;
                          __label_000005:;
                          L.79:;
                          D.4266 = j == D.4262;
                          j = j + 1;
                          if (D.4266) goto L.80;
                        }
                      }
                  }
                L.80:;
              }
              __label_000010:;
              L.77:;
              D.4268 = i == D.4258;
              i = i + 1;
              if (D.4268) goto L.78;
            }
          }
      }
    L.78:;
  }
  {
    integer(kind=4) D.4269;

    D.4269 = *m;
    s = 1;
    if (s <= D.4269)
      {
        while (1)
          {
            {
              logical(kind=4) D.4284;

              {
                integer(kind=4) D.4272;

                D.4272 = *q;
                i = 1;
                if (i <= D.4272)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.4282;

                          {
                            integer(kind=4) D.4275;
                            integer(kind=4) D.4276;

                            D.4275 = i;
                            D.4276 = *q;
                            j = D.4275;
                            if (j <= D.4276)
                              {
                                while (1)
                                  {
                                    {
                                      logical(kind=4) D.4280;

                                      (*xi)[((integer(kind=8)) j * stride.206 + offset.207) + (integer(kind=8)) i] = ((*xi)[((integer(kind=8)) j * stride.206 + offset.207) + (integer(kind=8)) i] + (*sig)[(((integer(kind=8)) s * stride.201 + offset.202) + (integer(kind=8)) j * stride.199) + (integer(kind=8)) i]) + ((*b)[((integer(kind=8)) s * stride.194 + offset.195) + (integer(kind=8)) i] * (*b)[((integer(kind=8)) s * stride.194 + offset.195) + (integer(kind=8)) j]) / *sigma2;
                                      __label_000080:;
                                      L.85:;
                                      D.4280 = j == D.4276;
                                      j = j + 1;
                                      if (D.4280) goto L.86;
                                    }
                                  }
                              }
                            L.86:;
                          }
                          __label_000090:;
                          L.83:;
                          D.4282 = i == D.4272;
                          i = i + 1;
                          if (D.4282) goto L.84;
                        }
                      }
                  }
                L.84:;
              }
              __label_000100:;
              L.81:;
              D.4284 = s == D.4269;
              s = s + 1;
              if (D.4284) goto L.82;
            }
          }
      }
    L.82:;
  }
  {
    integer(kind=4) D.4285;

    D.4285 = *q;
    i = 1;
    if (i <= D.4285)
      {
        while (1)
          {
            {
              logical(kind=4) D.4295;

              {
                integer(kind=4) D.4288;
                integer(kind=4) D.4289;

                D.4288 = i;
                D.4289 = *q;
                j = D.4288;
                if (j <= D.4289)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.4293;

                          (*xi)[((integer(kind=8)) j * stride.206 + offset.207) + (integer(kind=8)) i] = (*xi)[((integer(kind=8)) j * stride.206 + offset.207) + (integer(kind=8)) i] / (real(kind=8)) *m;
                          __label_000105:;
                          L.89:;
                          D.4293 = j == D.4289;
                          j = j + 1;
                          if (D.4293) goto L.90;
                        }
                      }
                  }
                L.90:;
              }
              __label_000110:;
              L.87:;
              D.4295 = i == D.4285;
              i = i + 1;
              if (D.4295) goto L.88;
            }
          }
      }
    L.88:;
  }
  return;
}


mkb (integer(kind=4) & restrict q, integer(kind=4) & restrict nmax, integer(kind=4) & restrict m, real(kind=8)[0:D.4382] * restrict wk, integer(kind=4) & restrict ntot, real(kind=8)[0:D.4376] * restrict delta, real(kind=8)[0:D.4373] * restrict b, integer(kind=4)[0:D.4379] * restrict occ, integer(kind=4)[0:D.4388] * restrict ist, integer(kind=4)[0:D.4385] * restrict ifin)
{
  integer(kind=8) ubound.209;
  integer(kind=8) ubound.210;
  integer(kind=8) stride.211;
  integer(kind=8) offset.212;
  integer(kind=8) size.213;
  integer(kind=8) ubound.214;
  integer(kind=8) size.215;
  integer(kind=4) fin;
  integer(kind=4) i;
  integer(kind=8) ubound.216;
  integer(kind=8) size.217;
  integer(kind=8) ubound.218;
  integer(kind=8) size.219;
  integer(kind=4) j;
  integer(kind=8) ubound.220;
  integer(kind=8) size.221;
  integer(kind=4) s;
  integer(kind=4) st;
  real(kind=8) sum;
  integer(kind=8) ubound.222;
  integer(kind=8) ubound.223;
  integer(kind=8) stride.224;
  integer(kind=8) ubound.225;
  integer(kind=8) stride.226;
  integer(kind=8) offset.227;
  integer(kind=8) size.228;
  integer(kind=8) D.4373;
  bitsizetype D.4374;
  sizetype D.4375;
  integer(kind=8) D.4376;
  bitsizetype D.4377;
  sizetype D.4378;
  integer(kind=8) D.4379;
  bitsizetype D.4380;
  sizetype D.4381;
  integer(kind=8) D.4382;
  bitsizetype D.4383;
  sizetype D.4384;
  integer(kind=8) D.4385;
  bitsizetype D.4386;
  sizetype D.4387;
  integer(kind=8) D.4388;
  bitsizetype D.4389;
  sizetype D.4390;

  ubound.218 = (integer(kind=8)) *m;
  size.219 = NON_LVALUE_EXPR <ubound.218>;
  size.219 = MAX_EXPR <size.219, 0>;
  D.4388 = size.219 + -1;
  D.4389 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.219> * 32;
  D.4390 = (sizetype) NON_LVALUE_EXPR <size.219> * 4;
  ubound.216 = (integer(kind=8)) *m;
  size.217 = NON_LVALUE_EXPR <ubound.216>;
  size.217 = MAX_EXPR <size.217, 0>;
  D.4385 = size.217 + -1;
  D.4386 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.217> * 32;
  D.4387 = (sizetype) NON_LVALUE_EXPR <size.217> * 4;
  ubound.222 = (integer(kind=8)) *q;
  stride.224 = NON_LVALUE_EXPR <ubound.222>;
  stride.224 = MAX_EXPR <stride.224, 0>;
  ubound.223 = (integer(kind=8)) *nmax;
  stride.226 = stride.224 * NON_LVALUE_EXPR <ubound.223>;
  stride.226 = MAX_EXPR <stride.226, 0>;
  ubound.225 = (integer(kind=8)) *m;
  size.228 = stride.226 * NON_LVALUE_EXPR <ubound.225>;
  size.228 = MAX_EXPR <size.228, 0>;
  D.4382 = size.228 + -1;
  D.4383 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.228> * 64;
  D.4384 = (sizetype) NON_LVALUE_EXPR <size.228> * 8;
  offset.227 = ~NON_LVALUE_EXPR <stride.224> - NON_LVALUE_EXPR <stride.226>;
  ubound.220 = (integer(kind=8)) *ntot;
  size.221 = NON_LVALUE_EXPR <ubound.220>;
  size.221 = MAX_EXPR <size.221, 0>;
  D.4379 = size.221 + -1;
  D.4380 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.221> * 32;
  D.4381 = (sizetype) NON_LVALUE_EXPR <size.221> * 4;
  ubound.214 = (integer(kind=8)) *ntot;
  size.215 = NON_LVALUE_EXPR <ubound.214>;
  size.215 = MAX_EXPR <size.215, 0>;
  D.4376 = size.215 + -1;
  D.4377 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.215> * 64;
  D.4378 = (sizetype) NON_LVALUE_EXPR <size.215> * 8;
  ubound.209 = (integer(kind=8)) *q;
  stride.211 = NON_LVALUE_EXPR <ubound.209>;
  stride.211 = MAX_EXPR <stride.211, 0>;
  ubound.210 = (integer(kind=8)) *m;
  size.213 = stride.211 * NON_LVALUE_EXPR <ubound.210>;
  size.213 = MAX_EXPR <size.213, 0>;
  D.4373 = size.213 + -1;
  D.4374 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.213> * 64;
  D.4375 = (sizetype) NON_LVALUE_EXPR <size.213> * 8;
  offset.212 = ~NON_LVALUE_EXPR <stride.211>;
  {
    integer(kind=4) D.4357;

    D.4357 = *m;
    s = 1;
    if (s <= D.4357)
      {
        while (1)
          {
            {
              logical(kind=4) D.4372;

              {
                integer(kind=4) D.4360;

                D.4360 = *q;
                i = 1;
                if (i <= D.4360)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.4370;

                          st = (*ist)[(integer(kind=8)) s + -1];
                          fin = (*ifin)[(integer(kind=8)) s + -1];
                          sum = 0.0;
                          {
                            integer(kind=4) D.4363;
                            integer(kind=4) D.4364;

                            D.4363 = st;
                            D.4364 = fin;
                            j = D.4363;
                            if (j <= D.4364)
                              {
                                while (1)
                                  {
                                    {
                                      logical(kind=4) D.4368;

                                      sum = (*wk)[(((integer(kind=8)) s * stride.226 + offset.227) + (integer(kind=8)) (*occ)[(integer(kind=8)) j + -1] * stride.224) + (integer(kind=8)) i] * (*delta)[(integer(kind=8)) j + -1] + sum;
                                      __label_000300:;
                                      L.95:;
                                      D.4368 = j == D.4364;
                                      j = j + 1;
                                      if (D.4368) goto L.96;
                                    }
                                  }
                              }
                            L.96:;
                          }
                          (*b)[((integer(kind=8)) s * stride.211 + offset.212) + (integer(kind=8)) i] = sum;
                          __label_000400:;
                          L.93:;
                          D.4370 = i == D.4360;
                          i = i + 1;
                          if (D.4370) goto L.94;
                        }
                      }
                  }
                L.94:;
              }
              __label_000500:;
              L.91:;
              D.4372 = s == D.4357;
              s = s + 1;
              if (D.4372) goto L.92;
            }
          }
      }
    L.92:;
  }
  return;
}


mkwk3 (integer(kind=4) & restrict q, integer(kind=4) & restrict m, real(kind=8)[0:D.4485] * restrict sig, integer(kind=4) & restrict nmax, real(kind=8)[0:D.4482] * restrict ztv, real(kind=8)[0:D.4476] * restrict wk, integer(kind=4) & restrict ntot, integer(kind=4)[0:D.4479] * restrict occ, integer(kind=4)[0:D.4491] * restrict ist, integer(kind=4)[0:D.4488] * restrict ifin)
{
  integer(kind=4) fin;
  integer(kind=4) i;
  integer(kind=8) ubound.229;
  integer(kind=8) size.230;
  integer(kind=8) ubound.231;
  integer(kind=8) size.232;
  integer(kind=4) j;
  integer(kind=4) k;
  integer(kind=8) ubound.233;
  integer(kind=8) size.234;
  integer(kind=4) s;
  integer(kind=8) ubound.235;
  integer(kind=8) ubound.236;
  integer(kind=8) stride.237;
  integer(kind=8) ubound.238;
  integer(kind=8) stride.239;
  integer(kind=8) offset.240;
  integer(kind=8) size.241;
  integer(kind=4) st;
  real(kind=8) sum;
  integer(kind=8) ubound.242;
  integer(kind=8) ubound.243;
  integer(kind=8) stride.244;
  integer(kind=8) ubound.245;
  integer(kind=8) stride.246;
  integer(kind=8) offset.247;
  integer(kind=8) size.248;
  integer(kind=8) ubound.249;
  integer(kind=8) ubound.250;
  integer(kind=8) stride.251;
  integer(kind=8) ubound.252;
  integer(kind=8) stride.253;
  integer(kind=8) offset.254;
  integer(kind=8) size.255;
  integer(kind=8) D.4476;
  bitsizetype D.4477;
  sizetype D.4478;
  integer(kind=8) D.4479;
  bitsizetype D.4480;
  sizetype D.4481;
  integer(kind=8) D.4482;
  bitsizetype D.4483;
  sizetype D.4484;
  integer(kind=8) D.4485;
  bitsizetype D.4486;
  sizetype D.4487;
  integer(kind=8) D.4488;
  bitsizetype D.4489;
  sizetype D.4490;
  integer(kind=8) D.4491;
  bitsizetype D.4492;
  sizetype D.4493;

  ubound.231 = (integer(kind=8)) *m;
  size.232 = NON_LVALUE_EXPR <ubound.231>;
  size.232 = MAX_EXPR <size.232, 0>;
  D.4491 = size.232 + -1;
  D.4492 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.232> * 32;
  D.4493 = (sizetype) NON_LVALUE_EXPR <size.232> * 4;
  ubound.229 = (integer(kind=8)) *m;
  size.230 = NON_LVALUE_EXPR <ubound.229>;
  size.230 = MAX_EXPR <size.230, 0>;
  D.4488 = size.230 + -1;
  D.4489 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.230> * 32;
  D.4490 = (sizetype) NON_LVALUE_EXPR <size.230> * 4;
  ubound.235 = (integer(kind=8)) *q;
  stride.237 = NON_LVALUE_EXPR <ubound.235>;
  stride.237 = MAX_EXPR <stride.237, 0>;
  ubound.236 = (integer(kind=8)) *q;
  stride.239 = stride.237 * NON_LVALUE_EXPR <ubound.236>;
  stride.239 = MAX_EXPR <stride.239, 0>;
  ubound.238 = (integer(kind=8)) *m;
  size.241 = stride.239 * NON_LVALUE_EXPR <ubound.238>;
  size.241 = MAX_EXPR <size.241, 0>;
  D.4485 = size.241 + -1;
  D.4486 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.241> * 64;
  D.4487 = (sizetype) NON_LVALUE_EXPR <size.241> * 8;
  offset.240 = ~NON_LVALUE_EXPR <stride.237> - NON_LVALUE_EXPR <stride.239>;
  ubound.249 = (integer(kind=8)) *q;
  stride.251 = NON_LVALUE_EXPR <ubound.249>;
  stride.251 = MAX_EXPR <stride.251, 0>;
  ubound.250 = (integer(kind=8)) *nmax;
  stride.253 = stride.251 * NON_LVALUE_EXPR <ubound.250>;
  stride.253 = MAX_EXPR <stride.253, 0>;
  ubound.252 = (integer(kind=8)) *m;
  size.255 = stride.253 * NON_LVALUE_EXPR <ubound.252>;
  size.255 = MAX_EXPR <size.255, 0>;
  D.4482 = size.255 + -1;
  D.4483 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.255> * 64;
  D.4484 = (sizetype) NON_LVALUE_EXPR <size.255> * 8;
  offset.254 = ~NON_LVALUE_EXPR <stride.251> - NON_LVALUE_EXPR <stride.253>;
  ubound.233 = (integer(kind=8)) *ntot;
  size.234 = NON_LVALUE_EXPR <ubound.233>;
  size.234 = MAX_EXPR <size.234, 0>;
  D.4479 = size.234 + -1;
  D.4480 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.234> * 32;
  D.4481 = (sizetype) NON_LVALUE_EXPR <size.234> * 4;
  ubound.242 = (integer(kind=8)) *q;
  stride.244 = NON_LVALUE_EXPR <ubound.242>;
  stride.244 = MAX_EXPR <stride.244, 0>;
  ubound.243 = (integer(kind=8)) *nmax;
  stride.246 = stride.244 * NON_LVALUE_EXPR <ubound.243>;
  stride.246 = MAX_EXPR <stride.246, 0>;
  ubound.245 = (integer(kind=8)) *m;
  size.248 = stride.246 * NON_LVALUE_EXPR <ubound.245>;
  size.248 = MAX_EXPR <size.248, 0>;
  D.4476 = size.248 + -1;
  D.4477 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.248> * 64;
  D.4478 = (sizetype) NON_LVALUE_EXPR <size.248> * 8;
  offset.247 = ~NON_LVALUE_EXPR <stride.244> - NON_LVALUE_EXPR <stride.246>;
  {
    integer(kind=4) D.4449;

    D.4449 = *m;
    s = 1;
    if (s <= D.4449)
      {
        while (1)
          {
            {
              logical(kind=4) D.4475;

              st = (*ist)[(integer(kind=8)) s + -1];
              fin = (*ifin)[(integer(kind=8)) s + -1];
              {
                integer(kind=4) D.4452;

                D.4452 = *q;
                i = 1;
                if (i <= D.4452)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.4473;

                          {
                            integer(kind=4) D.4455;
                            integer(kind=4) D.4456;

                            D.4455 = st;
                            D.4456 = fin;
                            j = D.4455;
                            if (j <= D.4456)
                              {
                                while (1)
                                  {
                                    {
                                      logical(kind=4) D.4471;

                                      sum = 0.0;
                                      {
                                        integer(kind=4) D.4459;

                                        D.4459 = i + -1;
                                        k = 1;
                                        if (k <= D.4459)
                                          {
                                            while (1)
                                              {
                                                {
                                                  logical(kind=4) D.4463;

                                                  sum = (*sig)[(((integer(kind=8)) s * stride.239 + offset.240) + (integer(kind=8)) i * stride.237) + (integer(kind=8)) k] * (*ztv)[(((integer(kind=8)) s * stride.253 + offset.254) + (integer(kind=8)) (*occ)[(integer(kind=8)) j + -1] * stride.251) + (integer(kind=8)) k] + sum;
                                                  __label_000050:;
                                                  L.103:;
                                                  D.4463 = k == D.4459;
                                                  k = k + 1;
                                                  if (D.4463) goto L.104;
                                                }
                                              }
                                          }
                                        L.104:;
                                      }
                                      {
                                        integer(kind=4) D.4464;
                                        integer(kind=4) D.4465;

                                        D.4464 = i;
                                        D.4465 = *q;
                                        k = D.4464;
                                        if (k <= D.4465)
                                          {
                                            while (1)
                                              {
                                                {
                                                  logical(kind=4) D.4469;

                                                  sum = (*sig)[(((integer(kind=8)) s * stride.239 + offset.240) + (integer(kind=8)) k * stride.237) + (integer(kind=8)) i] * (*ztv)[(((integer(kind=8)) s * stride.253 + offset.254) + (integer(kind=8)) (*occ)[(integer(kind=8)) j + -1] * stride.251) + (integer(kind=8)) k] + sum;
                                                  __label_000100:;
                                                  L.105:;
                                                  D.4469 = k == D.4465;
                                                  k = k + 1;
                                                  if (D.4469) goto L.106;
                                                }
                                              }
                                          }
                                        L.106:;
                                      }
                                      (*wk)[(((integer(kind=8)) s * stride.246 + offset.247) + (integer(kind=8)) (*occ)[(integer(kind=8)) j + -1] * stride.244) + (integer(kind=8)) i] = sum;
                                      __label_000200:;
                                      L.101:;
                                      D.4471 = j == D.4456;
                                      j = j + 1;
                                      if (D.4471) goto L.102;
                                    }
                                  }
                              }
                            L.102:;
                          }
                          __label_000300:;
                          L.99:;
                          D.4473 = i == D.4452;
                          i = i + 1;
                          if (D.4473) goto L.100;
                        }
                      }
                  }
                L.100:;
              }
              __label_000400:;
              L.97:;
              D.4475 = s == D.4449;
              s = s + 1;
              if (D.4475) goto L.98;
            }
          }
      }
    L.98:;
  }
  return;
}


mksig3 (integer(kind=4) & restrict q, real(kind=8)[0:D.4613] * restrict xi, integer(kind=4) & restrict m, real(kind=8)[0:D.4604] * restrict sig0, real(kind=8)[0:D.4607] * restrict sig, real(kind=8)[0:D.4610] * restrict wkq1, real(kind=8)[0:D.4601] * restrict wkq2, real(kind=8) & restrict ldxi, real(kind=8) & restrict ldsig)
{
  integer(kind=4) i;
  integer(kind=4) j;
  integer(kind=4) s;
  integer(kind=8) ubound.256;
  integer(kind=8) ubound.257;
  integer(kind=8) stride.258;
  integer(kind=8) ubound.259;
  integer(kind=8) stride.260;
  integer(kind=8) offset.261;
  integer(kind=8) size.262;
  integer(kind=8) ubound.263;
  integer(kind=8) ubound.264;
  integer(kind=8) stride.265;
  integer(kind=8) ubound.266;
  integer(kind=8) stride.267;
  integer(kind=8) offset.268;
  integer(kind=8) size.269;
  integer(kind=8) ubound.270;
  integer(kind=8) ubound.271;
  integer(kind=8) stride.272;
  integer(kind=8) offset.273;
  integer(kind=8) size.274;
  integer(kind=8) ubound.275;
  integer(kind=8) ubound.276;
  integer(kind=8) stride.277;
  integer(kind=8) offset.278;
  integer(kind=8) size.279;
  integer(kind=8) ubound.280;
  integer(kind=8) ubound.281;
  integer(kind=8) stride.282;
  integer(kind=8) offset.283;
  integer(kind=8) size.284;
  integer(kind=8) D.4601;
  bitsizetype D.4602;
  sizetype D.4603;
  integer(kind=8) D.4604;
  bitsizetype D.4605;
  sizetype D.4606;
  integer(kind=8) D.4607;
  bitsizetype D.4608;
  sizetype D.4609;
  integer(kind=8) D.4610;
  bitsizetype D.4611;
  sizetype D.4612;
  integer(kind=8) D.4613;
  bitsizetype D.4614;
  sizetype D.4615;

  ubound.280 = (integer(kind=8)) *q;
  stride.282 = NON_LVALUE_EXPR <ubound.280>;
  stride.282 = MAX_EXPR <stride.282, 0>;
  ubound.281 = (integer(kind=8)) *q;
  size.284 = stride.282 * NON_LVALUE_EXPR <ubound.281>;
  size.284 = MAX_EXPR <size.284, 0>;
  D.4613 = size.284 + -1;
  D.4614 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.284> * 64;
  D.4615 = (sizetype) NON_LVALUE_EXPR <size.284> * 8;
  offset.283 = ~NON_LVALUE_EXPR <stride.282>;
  ubound.270 = (integer(kind=8)) *q;
  stride.272 = NON_LVALUE_EXPR <ubound.270>;
  stride.272 = MAX_EXPR <stride.272, 0>;
  ubound.271 = (integer(kind=8)) *q;
  size.274 = stride.272 * NON_LVALUE_EXPR <ubound.271>;
  size.274 = MAX_EXPR <size.274, 0>;
  D.4610 = size.274 + -1;
  D.4611 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.274> * 64;
  D.4612 = (sizetype) NON_LVALUE_EXPR <size.274> * 8;
  offset.273 = ~NON_LVALUE_EXPR <stride.272>;
  ubound.256 = (integer(kind=8)) *q;
  stride.258 = NON_LVALUE_EXPR <ubound.256>;
  stride.258 = MAX_EXPR <stride.258, 0>;
  ubound.257 = (integer(kind=8)) *q;
  stride.260 = stride.258 * NON_LVALUE_EXPR <ubound.257>;
  stride.260 = MAX_EXPR <stride.260, 0>;
  ubound.259 = (integer(kind=8)) *m;
  size.262 = stride.260 * NON_LVALUE_EXPR <ubound.259>;
  size.262 = MAX_EXPR <size.262, 0>;
  D.4607 = size.262 + -1;
  D.4608 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.262> * 64;
  D.4609 = (sizetype) NON_LVALUE_EXPR <size.262> * 8;
  offset.261 = ~NON_LVALUE_EXPR <stride.258> - NON_LVALUE_EXPR <stride.260>;
  ubound.263 = (integer(kind=8)) *q;
  stride.265 = NON_LVALUE_EXPR <ubound.263>;
  stride.265 = MAX_EXPR <stride.265, 0>;
  ubound.264 = (integer(kind=8)) *q;
  stride.267 = stride.265 * NON_LVALUE_EXPR <ubound.264>;
  stride.267 = MAX_EXPR <stride.267, 0>;
  ubound.266 = (integer(kind=8)) *m;
  size.269 = stride.267 * NON_LVALUE_EXPR <ubound.266>;
  size.269 = MAX_EXPR <size.269, 0>;
  D.4604 = size.269 + -1;
  D.4605 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.269> * 64;
  D.4606 = (sizetype) NON_LVALUE_EXPR <size.269> * 8;
  offset.268 = ~NON_LVALUE_EXPR <stride.265> - NON_LVALUE_EXPR <stride.267>;
  ubound.275 = (integer(kind=8)) *q;
  stride.277 = NON_LVALUE_EXPR <ubound.275>;
  stride.277 = MAX_EXPR <stride.277, 0>;
  ubound.276 = (integer(kind=8)) *q;
  size.279 = stride.277 * NON_LVALUE_EXPR <ubound.276>;
  size.279 = MAX_EXPR <size.279, 0>;
  D.4601 = size.279 + -1;
  D.4602 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.279> * 64;
  D.4603 = (sizetype) NON_LVALUE_EXPR <size.279> * 8;
  offset.278 = ~NON_LVALUE_EXPR <stride.277>;
  chfc ((integer(kind=4) *) q, (integer(kind=4) *) q, xi);
  bkslv ((integer(kind=4) *) q, (integer(kind=4) *) q, xi);
  *ldxi = 0.0;
  {
    integer(kind=4) D.4542;

    D.4542 = *q;
    i = 1;
    if (i <= D.4542)
      {
        while (1)
          {
            {
              logical(kind=4) D.4546;

              *ldxi = *ldxi + __builtin_log ((*xi)[((integer(kind=8)) i * stride.282 + offset.283) + (integer(kind=8)) i]);
              __label_000001:;
              L.107:;
              D.4546 = i == D.4542;
              i = i + 1;
              if (D.4546) goto L.108;
            }
          }
      }
    L.108:;
  }
  mm ((integer(kind=4) *) q, (integer(kind=4) *) q, xi, wkq1);
  *ldsig = 0.0;
  {
    integer(kind=4) D.4547;

    D.4547 = *m;
    s = 1;
    if (s <= D.4547)
      {
        while (1)
          {
            {
              logical(kind=4) D.4600;

              {
                integer(kind=4) D.4550;

                D.4550 = *q;
                i = 1;
                if (i <= D.4550)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.4560;

                          {
                            integer(kind=4) D.4553;
                            integer(kind=4) D.4554;

                            D.4553 = i;
                            D.4554 = *q;
                            j = D.4553;
                            if (j <= D.4554)
                              {
                                while (1)
                                  {
                                    {
                                      logical(kind=4) D.4558;

                                      (*sig)[(((integer(kind=8)) s * stride.260 + offset.261) + (integer(kind=8)) j * stride.258) + (integer(kind=8)) i] = (*wkq1)[((integer(kind=8)) j * stride.272 + offset.273) + (integer(kind=8)) i] + (*sig0)[(((integer(kind=8)) s * stride.267 + offset.268) + (integer(kind=8)) j * stride.265) + (integer(kind=8)) i];
                                      __label_000080:;
                                      L.113:;
                                      D.4558 = j == D.4554;
                                      j = j + 1;
                                      if (D.4558) goto L.114;
                                    }
                                  }
                              }
                            L.114:;
                          }
                          __label_000100:;
                          L.111:;
                          D.4560 = i == D.4550;
                          i = i + 1;
                          if (D.4560) goto L.112;
                        }
                      }
                  }
                L.112:;
              }
              chl ((integer(kind=4) *) q, (integer(kind=4) *) q, (integer(kind=4) *) m, sig, &s);
              bkslvl ((integer(kind=4) *) q, (integer(kind=4) *) q, (integer(kind=4) *) m, sig, &s);
              {
                integer(kind=4) D.4575;

                D.4575 = *q;
                i = 1;
                if (i <= D.4575)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.4579;

                          *ldsig = *ldsig + __builtin_log ((*sig)[(((integer(kind=8)) s * stride.260 + offset.261) + (integer(kind=8)) i * stride.258) + (integer(kind=8)) i]);
                          __label_000110:;
                          L.115:;
                          D.4579 = i == D.4575;
                          i = i + 1;
                          if (D.4579) goto L.116;
                        }
                      }
                  }
                L.116:;
              }
              mmul ((integer(kind=4) *) q, (integer(kind=4) *) q, (integer(kind=4) *) m, sig, &s, wkq2);
              {
                integer(kind=4) D.4588;

                D.4588 = *q;
                i = 1;
                if (i <= D.4588)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.4598;

                          {
                            integer(kind=4) D.4591;
                            integer(kind=4) D.4592;

                            D.4591 = i;
                            D.4592 = *q;
                            j = D.4591;
                            if (j <= D.4592)
                              {
                                while (1)
                                  {
                                    {
                                      logical(kind=4) D.4596;

                                      (*sig)[(((integer(kind=8)) s * stride.260 + offset.261) + (integer(kind=8)) j * stride.258) + (integer(kind=8)) i] = (*wkq2)[((integer(kind=8)) j * stride.277 + offset.278) + (integer(kind=8)) i];
                                      __label_000150:;
                                      L.119:;
                                      D.4596 = j == D.4592;
                                      j = j + 1;
                                      if (D.4596) goto L.120;
                                    }
                                  }
                              }
                            L.120:;
                          }
                          __label_000200:;
                          L.117:;
                          D.4598 = i == D.4588;
                          i = i + 1;
                          if (D.4598) goto L.118;
                        }
                      }
                  }
                L.118:;
              }
              __label_000500:;
              L.109:;
              D.4600 = s == D.4547;
              s = s + 1;
              if (D.4600) goto L.110;
            }
          }
      }
    L.110:;
  }
  return;
}


mmul (integer(kind=4) & restrict p, integer(kind=4) & restrict pw, integer(kind=4) & restrict m, real(kind=8)[0:D.4655] * restrict wm, integer(kind=4) & restrict l, real(kind=8)[0:D.4652] * restrict cm)
{
  integer(kind=8) ubound.285;
  integer(kind=8) ubound.286;
  integer(kind=8) stride.287;
  integer(kind=8) offset.288;
  integer(kind=8) size.289;
  integer(kind=4) i;
  integer(kind=4) j;
  integer(kind=4) k;
  real(kind=8) sum;
  integer(kind=8) ubound.290;
  integer(kind=8) ubound.291;
  integer(kind=8) stride.292;
  integer(kind=8) ubound.293;
  integer(kind=8) stride.294;
  integer(kind=8) offset.295;
  integer(kind=8) size.296;
  integer(kind=8) D.4652;
  bitsizetype D.4653;
  sizetype D.4654;
  integer(kind=8) D.4655;
  bitsizetype D.4656;
  sizetype D.4657;

  ubound.290 = (integer(kind=8)) *p;
  stride.292 = NON_LVALUE_EXPR <ubound.290>;
  stride.292 = MAX_EXPR <stride.292, 0>;
  ubound.291 = (integer(kind=8)) *p;
  stride.294 = stride.292 * NON_LVALUE_EXPR <ubound.291>;
  stride.294 = MAX_EXPR <stride.294, 0>;
  ubound.293 = (integer(kind=8)) *m;
  size.296 = stride.294 * NON_LVALUE_EXPR <ubound.293>;
  size.296 = MAX_EXPR <size.296, 0>;
  D.4655 = size.296 + -1;
  D.4656 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.296> * 64;
  D.4657 = (sizetype) NON_LVALUE_EXPR <size.296> * 8;
  offset.295 = ~NON_LVALUE_EXPR <stride.292> - NON_LVALUE_EXPR <stride.294>;
  ubound.285 = (integer(kind=8)) *p;
  stride.287 = NON_LVALUE_EXPR <ubound.285>;
  stride.287 = MAX_EXPR <stride.287, 0>;
  ubound.286 = (integer(kind=8)) *p;
  size.289 = stride.287 * NON_LVALUE_EXPR <ubound.286>;
  size.289 = MAX_EXPR <size.289, 0>;
  D.4652 = size.289 + -1;
  D.4653 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.289> * 64;
  D.4654 = (sizetype) NON_LVALUE_EXPR <size.289> * 8;
  offset.288 = ~NON_LVALUE_EXPR <stride.287>;
  {
    integer(kind=4) D.4634;

    D.4634 = *pw;
    i = 1;
    if (i <= D.4634)
      {
        while (1)
          {
            {
              logical(kind=4) D.4651;

              {
                integer(kind=4) D.4637;
                integer(kind=4) D.4638;

                D.4637 = i;
                D.4638 = *pw;
                j = D.4637;
                if (j <= D.4638)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.4649;

                          sum = 0.0;
                          {
                            integer(kind=4) M.297;
                            integer(kind=4) D.4642;
                            integer(kind=4) D.4643;

                            M.297 = i;
                            if (j > M.297)
                              {
                                M.297 = j;
                              }
                            D.4642 = M.297;
                            D.4643 = *pw;
                            k = D.4642;
                            if (k <= D.4643)
                              {
                                while (1)
                                  {
                                    {
                                      logical(kind=4) D.4647;

                                      sum = (*wm)[(((integer(kind=8)) *l * stride.294 + offset.295) + (integer(kind=8)) k * stride.292) + (integer(kind=8)) i] * (*wm)[(((integer(kind=8)) *l * stride.294 + offset.295) + (integer(kind=8)) k * stride.292) + (integer(kind=8)) j] + sum;
                                      __label_000002:;
                                      L.125:;
                                      D.4647 = k == D.4643;
                                      k = k + 1;
                                      if (D.4647) goto L.126;
                                    }
                                  }
                              }
                            L.126:;
                          }
                          (*cm)[((integer(kind=8)) j * stride.287 + offset.288) + (integer(kind=8)) i] = sum;
                          __label_000005:;
                          L.123:;
                          D.4649 = j == D.4638;
                          j = j + 1;
                          if (D.4649) goto L.124;
                        }
                      }
                  }
                L.124:;
              }
              __label_000010:;
              L.121:;
              D.4651 = i == D.4634;
              i = i + 1;
              if (D.4651) goto L.122;
            }
          }
      }
    L.122:;
  }
  return;
}


bkslvl (integer(kind=4) & restrict p, integer(kind=4) & restrict pw, integer(kind=4) & restrict m, real(kind=8)[0:D.4686] * restrict s, integer(kind=4) & restrict l)
{
  integer(kind=4) i;
  integer(kind=4) j;
  integer(kind=4) k;
  integer(kind=8) ubound.298;
  integer(kind=8) ubound.299;
  integer(kind=8) stride.300;
  integer(kind=8) ubound.301;
  integer(kind=8) stride.302;
  integer(kind=8) offset.303;
  integer(kind=8) size.304;
  real(kind=8) sum;
  integer(kind=8) D.4686;
  bitsizetype D.4687;
  sizetype D.4688;

  ubound.298 = (integer(kind=8)) *p;
  stride.300 = NON_LVALUE_EXPR <ubound.298>;
  stride.300 = MAX_EXPR <stride.300, 0>;
  ubound.299 = (integer(kind=8)) *p;
  stride.302 = stride.300 * NON_LVALUE_EXPR <ubound.299>;
  stride.302 = MAX_EXPR <stride.302, 0>;
  ubound.301 = (integer(kind=8)) *m;
  size.304 = stride.302 * NON_LVALUE_EXPR <ubound.301>;
  size.304 = MAX_EXPR <size.304, 0>;
  D.4686 = size.304 + -1;
  D.4687 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.304> * 64;
  D.4688 = (sizetype) NON_LVALUE_EXPR <size.304> * 8;
  offset.303 = ~NON_LVALUE_EXPR <stride.300> - NON_LVALUE_EXPR <stride.302>;
  (*s)[(((integer(kind=8)) *l * stride.302 + offset.303) + NON_LVALUE_EXPR <stride.300>) + 1] = 1.0e+0 / (*s)[(((integer(kind=8)) *l * stride.302 + offset.303) + NON_LVALUE_EXPR <stride.300>) + 1];
  {
    integer(kind=4) D.4670;

    D.4670 = *pw;
    k = 2;
    if (k <= D.4670)
      {
        while (1)
          {
            {
              logical(kind=4) D.4685;

              (*s)[(((integer(kind=8)) *l * stride.302 + offset.303) + (integer(kind=8)) k * stride.300) + (integer(kind=8)) k] = 1.0e+0 / (*s)[(((integer(kind=8)) *l * stride.302 + offset.303) + (integer(kind=8)) k * stride.300) + (integer(kind=8)) k];
              {
                integer(kind=4) D.4673;

                D.4673 = k + -1;
                j = 1;
                if (j <= D.4673)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.4683;

                          sum = 0.0;
                          {
                            integer(kind=4) D.4676;
                            integer(kind=4) D.4677;

                            D.4676 = j;
                            D.4677 = k + -1;
                            i = D.4676;
                            if (i <= D.4677)
                              {
                                while (1)
                                  {
                                    {
                                      logical(kind=4) D.4681;

                                      sum = (*s)[(((integer(kind=8)) *l * stride.302 + offset.303) + (integer(kind=8)) i * stride.300) + (integer(kind=8)) j] * (*s)[(((integer(kind=8)) *l * stride.302 + offset.303) + (integer(kind=8)) k * stride.300) + (integer(kind=8)) i] + sum;
                                      __label_000003:;
                                      L.131:;
                                      D.4681 = i == D.4677;
                                      i = i + 1;
                                      if (D.4681) goto L.132;
                                    }
                                  }
                              }
                            L.132:;
                          }
                          (*s)[(((integer(kind=8)) *l * stride.302 + offset.303) + (integer(kind=8)) k * stride.300) + (integer(kind=8)) j] = -((*s)[(((integer(kind=8)) *l * stride.302 + offset.303) + (integer(kind=8)) k * stride.300) + (integer(kind=8)) k] * sum);
                          __label_000005:;
                          L.129:;
                          D.4683 = j == D.4673;
                          j = j + 1;
                          if (D.4683) goto L.130;
                        }
                      }
                  }
                L.130:;
              }
              __label_000010:;
              L.127:;
              D.4685 = k == D.4670;
              k = k + 1;
              if (D.4685) goto L.128;
            }
          }
      }
    L.128:;
  }
  return;
}


chl (integer(kind=4) & restrict p, integer(kind=4) & restrict pw, integer(kind=4) & restrict m, real(kind=8)[0:D.4724] * restrict s, integer(kind=4) & restrict l)
{
  integer(kind=4) i;
  integer(kind=4) j;
  integer(kind=4) k;
  integer(kind=8) ubound.305;
  integer(kind=8) ubound.306;
  integer(kind=8) stride.307;
  integer(kind=8) ubound.308;
  integer(kind=8) stride.309;
  integer(kind=8) offset.310;
  integer(kind=8) size.311;
  real(kind=8) sum;
  integer(kind=8) D.4724;
  bitsizetype D.4725;
  sizetype D.4726;

  ubound.305 = (integer(kind=8)) *p;
  stride.307 = NON_LVALUE_EXPR <ubound.305>;
  stride.307 = MAX_EXPR <stride.307, 0>;
  ubound.306 = (integer(kind=8)) *p;
  stride.309 = stride.307 * NON_LVALUE_EXPR <ubound.306>;
  stride.309 = MAX_EXPR <stride.309, 0>;
  ubound.308 = (integer(kind=8)) *m;
  size.311 = stride.309 * NON_LVALUE_EXPR <ubound.308>;
  size.311 = MAX_EXPR <size.311, 0>;
  D.4724 = size.311 + -1;
  D.4725 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.311> * 64;
  D.4726 = (sizetype) NON_LVALUE_EXPR <size.311> * 8;
  offset.310 = ~NON_LVALUE_EXPR <stride.307> - NON_LVALUE_EXPR <stride.309>;
  {
    integer(kind=4) D.4701;

    D.4701 = *pw;
    i = 1;
    if (i <= D.4701)
      {
        while (1)
          {
            {
              logical(kind=4) D.4723;

              sum = 0.0;
              {
                integer(kind=4) D.4704;

                D.4704 = i + -1;
                k = 1;
                if (k <= D.4704)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.4710;

                          {
                            real(kind=8) D.4707;
                            real(kind=8) D.4708;

                            D.4707 = (*s)[(((integer(kind=8)) *l * stride.309 + offset.310) + (integer(kind=8)) i * stride.307) + (integer(kind=8)) k];
                            D.4708 = D.4707 * D.4707;
                            sum = sum + D.4708;
                          }
                          __label_000010:;
                          L.135:;
                          D.4710 = k == D.4704;
                          k = k + 1;
                          if (D.4710) goto L.136;
                        }
                      }
                  }
                L.136:;
              }
              (*s)[(((integer(kind=8)) *l * stride.309 + offset.310) + (integer(kind=8)) i * stride.307) + (integer(kind=8)) i] = __builtin_sqrt ((*s)[(((integer(kind=8)) *l * stride.309 + offset.310) + (integer(kind=8)) i * stride.307) + (integer(kind=8)) i] - sum);
              {
                integer(kind=4) D.4711;
                integer(kind=4) D.4712;

                D.4711 = i + 1;
                D.4712 = *pw;
                j = D.4711;
                if (j <= D.4712)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.4721;

                          sum = 0.0;
                          {
                            integer(kind=4) D.4715;

                            D.4715 = i + -1;
                            k = 1;
                            if (k <= D.4715)
                              {
                                while (1)
                                  {
                                    {
                                      logical(kind=4) D.4719;

                                      sum = (*s)[(((integer(kind=8)) *l * stride.309 + offset.310) + (integer(kind=8)) i * stride.307) + (integer(kind=8)) k] * (*s)[(((integer(kind=8)) *l * stride.309 + offset.310) + (integer(kind=8)) j * stride.307) + (integer(kind=8)) k] + sum;
                                      __label_000030:;
                                      L.139:;
                                      D.4719 = k == D.4715;
                                      k = k + 1;
                                      if (D.4719) goto L.140;
                                    }
                                  }
                              }
                            L.140:;
                          }
                          (*s)[(((integer(kind=8)) *l * stride.309 + offset.310) + (integer(kind=8)) j * stride.307) + (integer(kind=8)) i] = (((*s)[(((integer(kind=8)) *l * stride.309 + offset.310) + (integer(kind=8)) j * stride.307) + (integer(kind=8)) i] - sum)) / (*s)[(((integer(kind=8)) *l * stride.309 + offset.310) + (integer(kind=8)) i * stride.307) + (integer(kind=8)) i];
                          __label_000040:;
                          L.137:;
                          D.4721 = j == D.4712;
                          j = j + 1;
                          if (D.4721) goto L.138;
                        }
                      }
                  }
                L.138:;
              }
              __label_000050:;
              L.133:;
              D.4723 = i == D.4701;
              i = i + 1;
              if (D.4723) goto L.134;
            }
          }
      }
    L.134:;
  }
  return;
}


stval (integer(kind=4) & restrict ntot, integer(kind=4) & restrict m, integer(kind=4)[0:D.5018] * restrict ist, integer(kind=4)[0:D.5015] * restrict ifin, integer(kind=4)[0:D.5012] * restrict occ, integer(kind=4) & restrict nmax, real(kind=8)[0:D.5009] * restrict vi, real(kind=8)[0:D.5006] * restrict vh, integer(kind=4) & restrict pcol, real(kind=8)[0:D.5003] * restrict pred, integer(kind=4) & restrict q, integer(kind=4)[0:] * restrict zcol, real(kind=8)[0:] * restrict ztv, real(kind=8)[0:D.4967] * restrict sig0, integer(kind=4) & restrict iflag, real(kind=8)[0:D.5000] * restrict sig, real(kind=8)[0:D.4964] * restrict psi, real(kind=8) & restrict sigma2, integer(kind=4) & restrict p, integer(kind=4)[0:D.4997] * restrict xcol, real(kind=8)[0:D.4994] * restrict beta, real(kind=8)[0:D.4970] * restrict wkq1, real(kind=8)[0:] * restrict wkq2, real(kind=8)[0:] * restrict wkq3, real(kind=8)[0:D.4991] * restrict y, real(kind=8)[0:D.4988] * restrict delta, real(kind=8)[0:] * restrict b, real(kind=8)[0:] * restrict wk, real(kind=8)[0:D.4985] * restrict w, real(kind=8)[0:D.4982] * restrict xtw, real(kind=8)[0:D.4979] * restrict xtwx, real(kind=8)[0:D.4976] * restrict xtwy, real(kind=8)[0:D.4973] * restrict xtwxinv)
{
  integer(kind=8) ubound.312;
  integer(kind=8) size.313;
  integer(kind=8) ubound.314;
  integer(kind=8) size.315;
  integer(kind=4) i;
  integer(kind=8) ubound.316;
  integer(kind=8) size.317;
  integer(kind=8) ubound.318;
  integer(kind=8) size.319;
  integer(kind=4) j;
  integer(kind=8) ubound.320;
  integer(kind=8) size.321;
  integer(kind=8) ubound.322;
  integer(kind=8) ubound.323;
  integer(kind=8) stride.324;
  integer(kind=8) offset.325;
  integer(kind=8) size.326;
  integer(kind=8) ubound.327;
  integer(kind=8) ubound.328;
  integer(kind=8) stride.329;
  integer(kind=8) offset.330;
  integer(kind=8) size.331;
  integer(kind=4) s;
  integer(kind=8) ubound.332;
  integer(kind=8) ubound.333;
  integer(kind=8) stride.334;
  integer(kind=8) ubound.335;
  integer(kind=8) stride.336;
  integer(kind=8) offset.337;
  integer(kind=8) size.338;
  integer(kind=8) ubound.339;
  integer(kind=8) ubound.340;
  integer(kind=8) stride.341;
  integer(kind=8) ubound.342;
  integer(kind=8) stride.343;
  integer(kind=8) offset.344;
  integer(kind=8) size.345;
  integer(kind=8) ubound.346;
  integer(kind=8) ubound.347;
  integer(kind=8) stride.348;
  integer(kind=8) ubound.349;
  integer(kind=8) stride.350;
  integer(kind=8) offset.351;
  integer(kind=8) size.352;
  integer(kind=8) ubound.353;
  integer(kind=8) ubound.354;
  integer(kind=8) stride.355;
  integer(kind=8) ubound.356;
  integer(kind=8) stride.357;
  integer(kind=8) offset.358;
  integer(kind=8) size.359;
  integer(kind=8) ubound.360;
  integer(kind=8) ubound.361;
  integer(kind=8) stride.362;
  integer(kind=8) ubound.363;
  integer(kind=8) stride.364;
  integer(kind=8) offset.365;
  integer(kind=8) size.366;
  integer(kind=8) ubound.367;
  integer(kind=8) ubound.368;
  integer(kind=8) stride.369;
  integer(kind=8) offset.370;
  integer(kind=8) size.371;
  integer(kind=8) ubound.372;
  integer(kind=8) size.373;
  integer(kind=8) ubound.374;
  integer(kind=8) ubound.375;
  integer(kind=8) stride.376;
  integer(kind=8) offset.377;
  integer(kind=8) size.378;
  integer(kind=8) ubound.379;
  integer(kind=8) ubound.380;
  integer(kind=8) stride.381;
  integer(kind=8) offset.382;
  integer(kind=8) size.383;
  integer(kind=8) ubound.384;
  integer(kind=8) ubound.385;
  integer(kind=8) stride.386;
  integer(kind=8) offset.387;
  integer(kind=8) size.388;
  integer(kind=8) ubound.389;
  integer(kind=8) size.390;
  integer(kind=8) ubound.391;
  integer(kind=8) size.392;
  integer(kind=8) D.4964;
  bitsizetype D.4965;
  sizetype D.4966;
  integer(kind=8) D.4967;
  bitsizetype D.4968;
  sizetype D.4969;
  integer(kind=8) D.4970;
  bitsizetype D.4971;
  sizetype D.4972;
  integer(kind=8) D.4973;
  bitsizetype D.4974;
  sizetype D.4975;
  integer(kind=8) D.4976;
  bitsizetype D.4977;
  sizetype D.4978;
  integer(kind=8) D.4979;
  bitsizetype D.4980;
  sizetype D.4981;
  integer(kind=8) D.4982;
  bitsizetype D.4983;
  sizetype D.4984;
  integer(kind=8) D.4985;
  bitsizetype D.4986;
  sizetype D.4987;
  integer(kind=8) D.4988;
  bitsizetype D.4989;
  sizetype D.4990;
  integer(kind=8) D.4991;
  bitsizetype D.4992;
  sizetype D.4993;
  integer(kind=8) D.4994;
  bitsizetype D.4995;
  sizetype D.4996;
  integer(kind=8) D.4997;
  bitsizetype D.4998;
  sizetype D.4999;
  integer(kind=8) D.5000;
  bitsizetype D.5001;
  sizetype D.5002;
  integer(kind=8) D.5003;
  bitsizetype D.5004;
  sizetype D.5005;
  integer(kind=8) D.5006;
  bitsizetype D.5007;
  sizetype D.5008;
  integer(kind=8) D.5009;
  bitsizetype D.5010;
  sizetype D.5011;
  integer(kind=8) D.5012;
  bitsizetype D.5013;
  sizetype D.5014;
  integer(kind=8) D.5015;
  bitsizetype D.5016;
  sizetype D.5017;
  integer(kind=8) D.5018;
  bitsizetype D.5019;
  sizetype D.5020;

  ubound.318 = (integer(kind=8)) *m;
  size.319 = NON_LVALUE_EXPR <ubound.318>;
  size.319 = MAX_EXPR <size.319, 0>;
  D.5018 = size.319 + -1;
  D.5019 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.319> * 32;
  D.5020 = (sizetype) NON_LVALUE_EXPR <size.319> * 4;
  ubound.316 = (integer(kind=8)) *m;
  size.317 = NON_LVALUE_EXPR <ubound.316>;
  size.317 = MAX_EXPR <size.317, 0>;
  D.5015 = size.317 + -1;
  D.5016 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.317> * 32;
  D.5017 = (sizetype) NON_LVALUE_EXPR <size.317> * 4;
  ubound.320 = (integer(kind=8)) *ntot;
  size.321 = NON_LVALUE_EXPR <ubound.320>;
  size.321 = MAX_EXPR <size.321, 0>;
  D.5012 = size.321 + -1;
  D.5013 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.321> * 32;
  D.5014 = (sizetype) NON_LVALUE_EXPR <size.321> * 4;
  ubound.353 = (integer(kind=8)) *nmax;
  stride.355 = NON_LVALUE_EXPR <ubound.353>;
  stride.355 = MAX_EXPR <stride.355, 0>;
  ubound.354 = (integer(kind=8)) *nmax;
  stride.357 = stride.355 * NON_LVALUE_EXPR <ubound.354>;
  stride.357 = MAX_EXPR <stride.357, 0>;
  ubound.356 = (integer(kind=8)) *m;
  size.359 = stride.357 * NON_LVALUE_EXPR <ubound.356>;
  size.359 = MAX_EXPR <size.359, 0>;
  D.5009 = size.359 + -1;
  D.5010 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.359> * 64;
  D.5011 = (sizetype) NON_LVALUE_EXPR <size.359> * 8;
  offset.358 = ~NON_LVALUE_EXPR <stride.355> - NON_LVALUE_EXPR <stride.357>;
  ubound.346 = (integer(kind=8)) *nmax;
  stride.348 = NON_LVALUE_EXPR <ubound.346>;
  stride.348 = MAX_EXPR <stride.348, 0>;
  ubound.347 = (integer(kind=8)) *nmax;
  stride.350 = stride.348 * NON_LVALUE_EXPR <ubound.347>;
  stride.350 = MAX_EXPR <stride.350, 0>;
  ubound.349 = (integer(kind=8)) *m;
  size.352 = stride.350 * NON_LVALUE_EXPR <ubound.349>;
  size.352 = MAX_EXPR <size.352, 0>;
  D.5006 = size.352 + -1;
  D.5007 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.352> * 64;
  D.5008 = (sizetype) NON_LVALUE_EXPR <size.352> * 8;
  offset.351 = ~NON_LVALUE_EXPR <stride.348> - NON_LVALUE_EXPR <stride.350>;
  ubound.322 = (integer(kind=8)) *ntot;
  stride.324 = NON_LVALUE_EXPR <ubound.322>;
  stride.324 = MAX_EXPR <stride.324, 0>;
  ubound.323 = (integer(kind=8)) *pcol;
  size.326 = stride.324 * NON_LVALUE_EXPR <ubound.323>;
  size.326 = MAX_EXPR <size.326, 0>;
  D.5003 = size.326 + -1;
  D.5004 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.326> * 64;
  D.5005 = (sizetype) NON_LVALUE_EXPR <size.326> * 8;
  offset.325 = ~NON_LVALUE_EXPR <stride.324>;
  ubound.332 = (integer(kind=8)) *q;
  stride.334 = NON_LVALUE_EXPR <ubound.332>;
  stride.334 = MAX_EXPR <stride.334, 0>;
  ubound.333 = (integer(kind=8)) *q;
  stride.336 = stride.334 * NON_LVALUE_EXPR <ubound.333>;
  stride.336 = MAX_EXPR <stride.336, 0>;
  ubound.335 = (integer(kind=8)) *m;
  size.338 = stride.336 * NON_LVALUE_EXPR <ubound.335>;
  size.338 = MAX_EXPR <size.338, 0>;
  D.5000 = size.338 + -1;
  D.5001 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.338> * 64;
  D.5002 = (sizetype) NON_LVALUE_EXPR <size.338> * 8;
  offset.337 = ~NON_LVALUE_EXPR <stride.334> - NON_LVALUE_EXPR <stride.336>;
  ubound.372 = (integer(kind=8)) *p;
  size.373 = NON_LVALUE_EXPR <ubound.372>;
  size.373 = MAX_EXPR <size.373, 0>;
  D.4997 = size.373 + -1;
  D.4998 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.373> * 32;
  D.4999 = (sizetype) NON_LVALUE_EXPR <size.373> * 4;
  ubound.312 = (integer(kind=8)) *p;
  size.313 = NON_LVALUE_EXPR <ubound.312>;
  size.313 = MAX_EXPR <size.313, 0>;
  D.4994 = size.313 + -1;
  D.4995 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.313> * 64;
  D.4996 = (sizetype) NON_LVALUE_EXPR <size.313> * 8;
  ubound.391 = (integer(kind=8)) *ntot;
  size.392 = NON_LVALUE_EXPR <ubound.391>;
  size.392 = MAX_EXPR <size.392, 0>;
  D.4991 = size.392 + -1;
  D.4992 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.392> * 64;
  D.4993 = (sizetype) NON_LVALUE_EXPR <size.392> * 8;
  ubound.314 = (integer(kind=8)) *ntot;
  size.315 = NON_LVALUE_EXPR <ubound.314>;
  size.315 = MAX_EXPR <size.315, 0>;
  D.4988 = size.315 + -1;
  D.4989 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.315> * 64;
  D.4990 = (sizetype) NON_LVALUE_EXPR <size.315> * 8;
  ubound.360 = (integer(kind=8)) *nmax;
  stride.362 = NON_LVALUE_EXPR <ubound.360>;
  stride.362 = MAX_EXPR <stride.362, 0>;
  ubound.361 = (integer(kind=8)) *nmax;
  stride.364 = stride.362 * NON_LVALUE_EXPR <ubound.361>;
  stride.364 = MAX_EXPR <stride.364, 0>;
  ubound.363 = (integer(kind=8)) *m;
  size.366 = stride.364 * NON_LVALUE_EXPR <ubound.363>;
  size.366 = MAX_EXPR <size.366, 0>;
  D.4985 = size.366 + -1;
  D.4986 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.366> * 64;
  D.4987 = (sizetype) NON_LVALUE_EXPR <size.366> * 8;
  offset.365 = ~NON_LVALUE_EXPR <stride.362> - NON_LVALUE_EXPR <stride.364>;
  ubound.374 = (integer(kind=8)) *p;
  stride.376 = NON_LVALUE_EXPR <ubound.374>;
  stride.376 = MAX_EXPR <stride.376, 0>;
  ubound.375 = (integer(kind=8)) *nmax;
  size.378 = stride.376 * NON_LVALUE_EXPR <ubound.375>;
  size.378 = MAX_EXPR <size.378, 0>;
  D.4982 = size.378 + -1;
  D.4983 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.378> * 64;
  D.4984 = (sizetype) NON_LVALUE_EXPR <size.378> * 8;
  offset.377 = ~NON_LVALUE_EXPR <stride.376>;
  ubound.379 = (integer(kind=8)) *p;
  stride.381 = NON_LVALUE_EXPR <ubound.379>;
  stride.381 = MAX_EXPR <stride.381, 0>;
  ubound.380 = (integer(kind=8)) *p;
  size.383 = stride.381 * NON_LVALUE_EXPR <ubound.380>;
  size.383 = MAX_EXPR <size.383, 0>;
  D.4979 = size.383 + -1;
  D.4980 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.383> * 64;
  D.4981 = (sizetype) NON_LVALUE_EXPR <size.383> * 8;
  offset.382 = ~NON_LVALUE_EXPR <stride.381>;
  ubound.389 = (integer(kind=8)) *p;
  size.390 = NON_LVALUE_EXPR <ubound.389>;
  size.390 = MAX_EXPR <size.390, 0>;
  D.4976 = size.390 + -1;
  D.4977 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.390> * 64;
  D.4978 = (sizetype) NON_LVALUE_EXPR <size.390> * 8;
  ubound.384 = (integer(kind=8)) *p;
  stride.386 = NON_LVALUE_EXPR <ubound.384>;
  stride.386 = MAX_EXPR <stride.386, 0>;
  ubound.385 = (integer(kind=8)) *p;
  size.388 = stride.386 * NON_LVALUE_EXPR <ubound.385>;
  size.388 = MAX_EXPR <size.388, 0>;
  D.4973 = size.388 + -1;
  D.4974 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.388> * 64;
  D.4975 = (sizetype) NON_LVALUE_EXPR <size.388> * 8;
  offset.387 = ~NON_LVALUE_EXPR <stride.386>;
  ubound.367 = (integer(kind=8)) *q;
  stride.369 = NON_LVALUE_EXPR <ubound.367>;
  stride.369 = MAX_EXPR <stride.369, 0>;
  ubound.368 = (integer(kind=8)) *q;
  size.371 = stride.369 * NON_LVALUE_EXPR <ubound.368>;
  size.371 = MAX_EXPR <size.371, 0>;
  D.4970 = size.371 + -1;
  D.4971 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.371> * 64;
  D.4972 = (sizetype) NON_LVALUE_EXPR <size.371> * 8;
  offset.370 = ~NON_LVALUE_EXPR <stride.369>;
  ubound.339 = (integer(kind=8)) *q;
  stride.341 = NON_LVALUE_EXPR <ubound.339>;
  stride.341 = MAX_EXPR <stride.341, 0>;
  ubound.340 = (integer(kind=8)) *q;
  stride.343 = stride.341 * NON_LVALUE_EXPR <ubound.340>;
  stride.343 = MAX_EXPR <stride.343, 0>;
  ubound.342 = (integer(kind=8)) *m;
  size.345 = stride.343 * NON_LVALUE_EXPR <ubound.342>;
  size.345 = MAX_EXPR <size.345, 0>;
  D.4967 = size.345 + -1;
  D.4968 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.345> * 64;
  D.4969 = (sizetype) NON_LVALUE_EXPR <size.345> * 8;
  offset.344 = ~NON_LVALUE_EXPR <stride.341> - NON_LVALUE_EXPR <stride.343>;
  ubound.327 = (integer(kind=8)) *q;
  stride.329 = NON_LVALUE_EXPR <ubound.327>;
  stride.329 = MAX_EXPR <stride.329, 0>;
  ubound.328 = (integer(kind=8)) *q;
  size.331 = stride.329 * NON_LVALUE_EXPR <ubound.328>;
  size.331 = MAX_EXPR <size.331, 0>;
  D.4964 = size.331 + -1;
  D.4965 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.331> * 64;
  D.4966 = (sizetype) NON_LVALUE_EXPR <size.331> * 8;
  offset.330 = ~NON_LVALUE_EXPR <stride.329>;
  gls ((integer(kind=4) *) ntot, (integer(kind=4) *) m, ist, ifin, occ, (integer(kind=4) *) nmax, vi, vh, (integer(kind=4) *) pcol, pred, (integer(kind=4) *) q, (integer(kind=4) *) iflag, sig, (real(kind=8) *) sigma2, (integer(kind=4) *) p, xcol, beta, y, delta, w, xtw, xtwx, xtwy, xtwxinv);
  {
    integer(kind=4) D.4925;

    D.4925 = *q;
    i = 1;
    if (i <= D.4925)
      {
        while (1)
          {
            {
              logical(kind=4) D.4935;

              {
                integer(kind=4) D.4928;
                integer(kind=4) D.4929;

                D.4928 = i;
                D.4929 = *q;
                j = D.4928;
                if (j <= D.4929)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.4933;

                          (*wkq1)[((integer(kind=8)) j * stride.369 + offset.370) + (integer(kind=8)) i] = 0.0;
                          __label_000305:;
                          L.143:;
                          D.4933 = j == D.4929;
                          j = j + 1;
                          if (D.4933) goto L.144;
                        }
                      }
                  }
                L.144:;
              }
              __label_000310:;
              L.141:;
              D.4935 = i == D.4925;
              i = i + 1;
              if (D.4935) goto L.142;
            }
          }
      }
    L.142:;
  }
  {
    integer(kind=4) D.4936;

    D.4936 = *m;
    s = 1;
    if (s <= D.4936)
      {
        while (1)
          {
            {
              logical(kind=4) D.4951;

              {
                integer(kind=4) D.4939;

                D.4939 = *q;
                i = 1;
                if (i <= D.4939)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.4949;

                          {
                            integer(kind=4) D.4942;
                            integer(kind=4) D.4943;

                            D.4942 = i;
                            D.4943 = *q;
                            j = D.4942;
                            if (j <= D.4943)
                              {
                                while (1)
                                  {
                                    {
                                      logical(kind=4) D.4947;

                                      (*wkq1)[((integer(kind=8)) j * stride.369 + offset.370) + (integer(kind=8)) i] = (*wkq1)[((integer(kind=8)) j * stride.369 + offset.370) + (integer(kind=8)) i] + (*sig0)[(((integer(kind=8)) s * stride.343 + offset.344) + (integer(kind=8)) j * stride.341) + (integer(kind=8)) i];
                                      __label_000350:;
                                      L.149:;
                                      D.4947 = j == D.4943;
                                      j = j + 1;
                                      if (D.4947) goto L.150;
                                    }
                                  }
                              }
                            L.150:;
                          }
                          __label_000400:;
                          L.147:;
                          D.4949 = i == D.4939;
                          i = i + 1;
                          if (D.4949) goto L.148;
                        }
                      }
                  }
                L.148:;
              }
              __label_000500:;
              L.145:;
              D.4951 = s == D.4936;
              s = s + 1;
              if (D.4951) goto L.146;
            }
          }
      }
    L.146:;
  }
  chfc ((integer(kind=4) *) q, (integer(kind=4) *) q, wkq1);
  bkslv ((integer(kind=4) *) q, (integer(kind=4) *) q, wkq1);
  mm ((integer(kind=4) *) q, (integer(kind=4) *) q, wkq1, psi);
  {
    integer(kind=4) D.4952;

    D.4952 = *q;
    i = 1;
    if (i <= D.4952)
      {
        while (1)
          {
            {
              logical(kind=4) D.4963;

              {
                integer(kind=4) D.4955;
                integer(kind=4) D.4956;

                D.4955 = i;
                D.4956 = *q;
                j = D.4955;
                if (j <= D.4956)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.4961;

                          (*psi)[((integer(kind=8)) j * stride.329 + offset.330) + (integer(kind=8)) i] = ((*psi)[((integer(kind=8)) j * stride.329 + offset.330) + (integer(kind=8)) i] * *sigma2) * (real(kind=8)) *m;
                          if (i != j)
                            {
                              (*psi)[((integer(kind=8)) i * stride.329 + offset.330) + (integer(kind=8)) j] = (*psi)[((integer(kind=8)) j * stride.329 + offset.330) + (integer(kind=8)) i];
                            }
                          L.155:;
                          __label_000550:;
                          L.153:;
                          D.4961 = j == D.4956;
                          j = j + 1;
                          if (D.4961) goto L.154;
                        }
                      }
                  }
                L.154:;
              }
              __label_000600:;
              L.151:;
              D.4963 = i == D.4952;
              i = i + 1;
              if (D.4963) goto L.152;
            }
          }
      }
    L.152:;
  }
  return;
}


prelim (integer(kind=4) & restrict ntot, integer(kind=4)[0:D.5273] * restrict subj, integer(kind=4) & restrict m, integer(kind=4)[0:D.5270] * restrict ist, integer(kind=4)[0:D.5267] * restrict ifin, integer(kind=4)[0:D.5261] * restrict occ, integer(kind=4) & restrict nmax, real(kind=8)[0:D.5264] * restrict vmax, real(kind=8)[0:D.5258] * restrict vh, real(kind=8)[0:D.5255] * restrict vi, integer(kind=4) & restrict pcol, real(kind=8)[0:D.5252] * restrict pred, integer(kind=4) & restrict q, integer(kind=4)[0:D.5249] * restrict zcol, real(kind=8)[0:D.5246] * restrict ztv, real(kind=8)[0:D.5243] * restrict sig0, integer(kind=4) & restrict iflag)
{
  integer(kind=8) ubound.393;
  integer(kind=8) size.394;
  integer(kind=8) ubound.395;
  integer(kind=8) size.396;
  integer(kind=8) ubound.397;
  integer(kind=8) size.398;
  integer(kind=8) ubound.399;
  integer(kind=8) ubound.400;
  integer(kind=8) stride.401;
  integer(kind=8) offset.402;
  integer(kind=8) size.403;
  integer(kind=8) ubound.404;
  integer(kind=8) ubound.405;
  integer(kind=8) stride.406;
  integer(kind=8) ubound.407;
  integer(kind=8) stride.408;
  integer(kind=8) offset.409;
  integer(kind=8) size.410;
  integer(kind=8) ubound.411;
  integer(kind=8) size.412;
  integer(kind=8) ubound.413;
  integer(kind=8) ubound.414;
  integer(kind=8) stride.415;
  integer(kind=8) ubound.416;
  integer(kind=8) stride.417;
  integer(kind=8) offset.418;
  integer(kind=8) size.419;
  integer(kind=8) ubound.420;
  integer(kind=8) ubound.421;
  integer(kind=8) stride.422;
  integer(kind=8) ubound.423;
  integer(kind=8) stride.424;
  integer(kind=8) offset.425;
  integer(kind=8) size.426;
  integer(kind=8) ubound.427;
  integer(kind=8) ubound.428;
  integer(kind=8) stride.429;
  integer(kind=8) offset.430;
  integer(kind=8) size.431;
  integer(kind=8) ubound.432;
  integer(kind=8) size.433;
  integer(kind=8) ubound.434;
  integer(kind=8) ubound.435;
  integer(kind=8) stride.436;
  integer(kind=8) ubound.437;
  integer(kind=8) stride.438;
  integer(kind=8) offset.439;
  integer(kind=8) size.440;
  integer(kind=8) D.5243;
  bitsizetype D.5244;
  sizetype D.5245;
  integer(kind=8) D.5246;
  bitsizetype D.5247;
  sizetype D.5248;
  integer(kind=8) D.5249;
  bitsizetype D.5250;
  sizetype D.5251;
  integer(kind=8) D.5252;
  bitsizetype D.5253;
  sizetype D.5254;
  integer(kind=8) D.5255;
  bitsizetype D.5256;
  sizetype D.5257;
  integer(kind=8) D.5258;
  bitsizetype D.5259;
  sizetype D.5260;
  integer(kind=8) D.5261;
  bitsizetype D.5262;
  sizetype D.5263;
  integer(kind=8) D.5264;
  bitsizetype D.5265;
  sizetype D.5266;
  integer(kind=8) D.5267;
  bitsizetype D.5268;
  sizetype D.5269;
  integer(kind=8) D.5270;
  bitsizetype D.5271;
  sizetype D.5272;
  integer(kind=8) D.5273;
  bitsizetype D.5274;
  sizetype D.5275;

  ubound.411 = (integer(kind=8)) *ntot;
  size.412 = NON_LVALUE_EXPR <ubound.411>;
  size.412 = MAX_EXPR <size.412, 0>;
  D.5273 = size.412 + -1;
  D.5274 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.412> * 32;
  D.5275 = (sizetype) NON_LVALUE_EXPR <size.412> * 4;
  ubound.395 = (integer(kind=8)) *m;
  size.396 = NON_LVALUE_EXPR <ubound.395>;
  size.396 = MAX_EXPR <size.396, 0>;
  D.5270 = size.396 + -1;
  D.5271 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.396> * 32;
  D.5272 = (sizetype) NON_LVALUE_EXPR <size.396> * 4;
  ubound.393 = (integer(kind=8)) *m;
  size.394 = NON_LVALUE_EXPR <ubound.393>;
  size.394 = MAX_EXPR <size.394, 0>;
  D.5267 = size.394 + -1;
  D.5268 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.394> * 32;
  D.5269 = (sizetype) NON_LVALUE_EXPR <size.394> * 4;
  ubound.427 = (integer(kind=8)) *nmax;
  stride.429 = NON_LVALUE_EXPR <ubound.427>;
  stride.429 = MAX_EXPR <stride.429, 0>;
  ubound.428 = (integer(kind=8)) *nmax;
  size.431 = stride.429 * NON_LVALUE_EXPR <ubound.428>;
  size.431 = MAX_EXPR <size.431, 0>;
  D.5264 = size.431 + -1;
  D.5265 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.431> * 64;
  D.5266 = (sizetype) NON_LVALUE_EXPR <size.431> * 8;
  offset.430 = ~NON_LVALUE_EXPR <stride.429>;
  ubound.397 = (integer(kind=8)) *ntot;
  size.398 = NON_LVALUE_EXPR <ubound.397>;
  size.398 = MAX_EXPR <size.398, 0>;
  D.5261 = size.398 + -1;
  D.5262 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.398> * 32;
  D.5263 = (sizetype) NON_LVALUE_EXPR <size.398> * 4;
  ubound.413 = (integer(kind=8)) *nmax;
  stride.415 = NON_LVALUE_EXPR <ubound.413>;
  stride.415 = MAX_EXPR <stride.415, 0>;
  ubound.414 = (integer(kind=8)) *nmax;
  stride.417 = stride.415 * NON_LVALUE_EXPR <ubound.414>;
  stride.417 = MAX_EXPR <stride.417, 0>;
  ubound.416 = (integer(kind=8)) *m;
  size.419 = stride.417 * NON_LVALUE_EXPR <ubound.416>;
  size.419 = MAX_EXPR <size.419, 0>;
  D.5258 = size.419 + -1;
  D.5259 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.419> * 64;
  D.5260 = (sizetype) NON_LVALUE_EXPR <size.419> * 8;
  offset.418 = ~NON_LVALUE_EXPR <stride.415> - NON_LVALUE_EXPR <stride.417>;
  ubound.420 = (integer(kind=8)) *nmax;
  stride.422 = NON_LVALUE_EXPR <ubound.420>;
  stride.422 = MAX_EXPR <stride.422, 0>;
  ubound.421 = (integer(kind=8)) *nmax;
  stride.424 = stride.422 * NON_LVALUE_EXPR <ubound.421>;
  stride.424 = MAX_EXPR <stride.424, 0>;
  ubound.423 = (integer(kind=8)) *m;
  size.426 = stride.424 * NON_LVALUE_EXPR <ubound.423>;
  size.426 = MAX_EXPR <size.426, 0>;
  D.5255 = size.426 + -1;
  D.5256 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.426> * 64;
  D.5257 = (sizetype) NON_LVALUE_EXPR <size.426> * 8;
  offset.425 = ~NON_LVALUE_EXPR <stride.422> - NON_LVALUE_EXPR <stride.424>;
  ubound.399 = (integer(kind=8)) *ntot;
  stride.401 = NON_LVALUE_EXPR <ubound.399>;
  stride.401 = MAX_EXPR <stride.401, 0>;
  ubound.400 = (integer(kind=8)) *pcol;
  size.403 = stride.401 * NON_LVALUE_EXPR <ubound.400>;
  size.403 = MAX_EXPR <size.403, 0>;
  D.5252 = size.403 + -1;
  D.5253 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.403> * 64;
  D.5254 = (sizetype) NON_LVALUE_EXPR <size.403> * 8;
  offset.402 = ~NON_LVALUE_EXPR <stride.401>;
  ubound.432 = (integer(kind=8)) *q;
  size.433 = NON_LVALUE_EXPR <ubound.432>;
  size.433 = MAX_EXPR <size.433, 0>;
  D.5249 = size.433 + -1;
  D.5250 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.433> * 32;
  D.5251 = (sizetype) NON_LVALUE_EXPR <size.433> * 4;
  ubound.434 = (integer(kind=8)) *q;
  stride.436 = NON_LVALUE_EXPR <ubound.434>;
  stride.436 = MAX_EXPR <stride.436, 0>;
  ubound.435 = (integer(kind=8)) *nmax;
  stride.438 = stride.436 * NON_LVALUE_EXPR <ubound.435>;
  stride.438 = MAX_EXPR <stride.438, 0>;
  ubound.437 = (integer(kind=8)) *m;
  size.440 = stride.438 * NON_LVALUE_EXPR <ubound.437>;
  size.440 = MAX_EXPR <size.440, 0>;
  D.5246 = size.440 + -1;
  D.5247 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.440> * 64;
  D.5248 = (sizetype) NON_LVALUE_EXPR <size.440> * 8;
  offset.439 = ~NON_LVALUE_EXPR <stride.436> - NON_LVALUE_EXPR <stride.438>;
  ubound.404 = (integer(kind=8)) *q;
  stride.406 = NON_LVALUE_EXPR <ubound.404>;
  stride.406 = MAX_EXPR <stride.406, 0>;
  ubound.405 = (integer(kind=8)) *q;
  stride.408 = stride.406 * NON_LVALUE_EXPR <ubound.405>;
  stride.408 = MAX_EXPR <stride.408, 0>;
  ubound.407 = (integer(kind=8)) *m;
  size.410 = stride.408 * NON_LVALUE_EXPR <ubound.407>;
  size.410 = MAX_EXPR <size.410, 0>;
  D.5243 = size.410 + -1;
  D.5244 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.410> * 64;
  D.5245 = (sizetype) NON_LVALUE_EXPR <size.410> * 8;
  offset.409 = ~NON_LVALUE_EXPR <stride.406> - NON_LVALUE_EXPR <stride.408>;
  istfin ((integer(kind=4) *) ntot, subj, (integer(kind=4) *) m, ist, ifin);
  if (*iflag != 1)
    {
      mkv ((integer(kind=4) *) m, (integer(kind=4) *) nmax, vmax, (integer(kind=4) *) ntot, occ, ist, ifin, vh);
      chv ((integer(kind=4) *) nmax, (integer(kind=4) *) m, vh, (integer(kind=4) *) ntot, occ, ist, ifin);
      bkv ((integer(kind=4) *) nmax, (integer(kind=4) *) m, vh, (integer(kind=4) *) ntot, occ, ist, ifin);
      mmulv ((integer(kind=4) *) nmax, (integer(kind=4) *) m, vh, vi, (integer(kind=4) *) ntot, occ, ist, ifin);
    }
  L.156:;
  mmu ((integer(kind=4) *) ntot, (integer(kind=4) *) pcol, pred, (integer(kind=4) *) q, zcol, (integer(kind=4) *) nmax, (integer(kind=4) *) m, vh, occ, ist, ifin, ztv, (integer(kind=4) *) iflag);
  mmtm ((integer(kind=4) *) q, (integer(kind=4) *) nmax, (integer(kind=4) *) m, ztv, (integer(kind=4) *) ntot, occ, ist, ifin, sig0);
  if (*iflag != 1)
    {
      mml ((integer(kind=4) *) ntot, (integer(kind=4) *) q, (integer(kind=4) *) nmax, (integer(kind=4) *) m, vh, occ, ist, ifin, ztv);
    }
  L.157:;
  return;
}


mkll2 (integer(kind=4) & restrict nmax, integer(kind=4) & restrict m, real(kind=8)[0:D.5358] * restrict w, integer(kind=4) & restrict ntot, real(kind=8)[0:D.5346] * restrict delta, integer(kind=4)[0:D.5355] * restrict occ, integer(kind=4)[0:D.5352] * restrict ist, integer(kind=4)[0:D.5349] * restrict ifin, real(kind=8) & restrict ll)
{
  integer(kind=8) ubound.441;
  integer(kind=8) size.442;
  integer(kind=4) fin;
  integer(kind=4) i;
  integer(kind=8) ubound.443;
  integer(kind=8) size.444;
  integer(kind=8) ubound.445;
  integer(kind=8) size.446;
  integer(kind=4) j;
  integer(kind=8) ubound.447;
  integer(kind=8) size.448;
  integer(kind=4) s;
  integer(kind=4) st;
  real(kind=8) sum;
  integer(kind=8) ubound.449;
  integer(kind=8) ubound.450;
  integer(kind=8) stride.451;
  integer(kind=8) ubound.452;
  integer(kind=8) stride.453;
  integer(kind=8) offset.454;
  integer(kind=8) size.455;
  integer(kind=8) D.5346;
  bitsizetype D.5347;
  sizetype D.5348;
  integer(kind=8) D.5349;
  bitsizetype D.5350;
  sizetype D.5351;
  integer(kind=8) D.5352;
  bitsizetype D.5353;
  sizetype D.5354;
  integer(kind=8) D.5355;
  bitsizetype D.5356;
  sizetype D.5357;
  integer(kind=8) D.5358;
  bitsizetype D.5359;
  sizetype D.5360;

  ubound.449 = (integer(kind=8)) *nmax;
  stride.451 = NON_LVALUE_EXPR <ubound.449>;
  stride.451 = MAX_EXPR <stride.451, 0>;
  ubound.450 = (integer(kind=8)) *nmax;
  stride.453 = stride.451 * NON_LVALUE_EXPR <ubound.450>;
  stride.453 = MAX_EXPR <stride.453, 0>;
  ubound.452 = (integer(kind=8)) *m;
  size.455 = stride.453 * NON_LVALUE_EXPR <ubound.452>;
  size.455 = MAX_EXPR <size.455, 0>;
  D.5358 = size.455 + -1;
  D.5359 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.455> * 64;
  D.5360 = (sizetype) NON_LVALUE_EXPR <size.455> * 8;
  offset.454 = ~NON_LVALUE_EXPR <stride.451> - NON_LVALUE_EXPR <stride.453>;
  ubound.447 = (integer(kind=8)) *ntot;
  size.448 = NON_LVALUE_EXPR <ubound.447>;
  size.448 = MAX_EXPR <size.448, 0>;
  D.5355 = size.448 + -1;
  D.5356 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.448> * 32;
  D.5357 = (sizetype) NON_LVALUE_EXPR <size.448> * 4;
  ubound.445 = (integer(kind=8)) *m;
  size.446 = NON_LVALUE_EXPR <ubound.445>;
  size.446 = MAX_EXPR <size.446, 0>;
  D.5352 = size.446 + -1;
  D.5353 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.446> * 32;
  D.5354 = (sizetype) NON_LVALUE_EXPR <size.446> * 4;
  ubound.443 = (integer(kind=8)) *m;
  size.444 = NON_LVALUE_EXPR <ubound.443>;
  size.444 = MAX_EXPR <size.444, 0>;
  D.5349 = size.444 + -1;
  D.5350 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.444> * 32;
  D.5351 = (sizetype) NON_LVALUE_EXPR <size.444> * 4;
  ubound.441 = (integer(kind=8)) *ntot;
  size.442 = NON_LVALUE_EXPR <ubound.441>;
  size.442 = MAX_EXPR <size.442, 0>;
  D.5346 = size.442 + -1;
  D.5347 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.442> * 64;
  D.5348 = (sizetype) NON_LVALUE_EXPR <size.442> * 8;
  *ll = 0.0;
  chv ((integer(kind=4) *) nmax, (integer(kind=4) *) m, w, (integer(kind=4) *) ntot, occ, ist, ifin);
  {
    integer(kind=4) D.5321;

    D.5321 = *m;
    s = 1;
    if (s <= D.5321)
      {
        while (1)
          {
            {
              logical(kind=4) D.5345;

              st = (*ist)[(integer(kind=8)) s + -1];
              fin = (*ifin)[(integer(kind=8)) s + -1];
              sum = 0.0;
              {
                integer(kind=4) D.5324;
                integer(kind=4) D.5325;

                D.5324 = st;
                D.5325 = fin;
                i = D.5324;
                if (i <= D.5325)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.5329;

                          sum = __builtin_log ((*w)[(((integer(kind=8)) s * stride.453 + offset.454) + (integer(kind=8)) (*occ)[(integer(kind=8)) i + -1] * stride.451) + (integer(kind=8)) (*occ)[(integer(kind=8)) i + -1]]) + sum;
                          __label_000100:;
                          L.160:;
                          D.5329 = i == D.5325;
                          i = i + 1;
                          if (D.5329) goto L.161;
                        }
                      }
                  }
                L.161:;
              }
              *ll = *ll + sum * 2.0e+0;
              {
                integer(kind=4) D.5330;
                integer(kind=4) D.5331;

                D.5330 = st;
                D.5331 = fin;
                i = D.5330;
                if (i <= D.5331)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.5343;

                          sum = 0.0;
                          {
                            integer(kind=4) D.5334;
                            integer(kind=4) D.5335;

                            D.5334 = i;
                            D.5335 = fin;
                            j = D.5334;
                            if (j <= D.5335)
                              {
                                while (1)
                                  {
                                    {
                                      logical(kind=4) D.5339;

                                      sum = (*w)[(((integer(kind=8)) s * stride.453 + offset.454) + (integer(kind=8)) (*occ)[(integer(kind=8)) j + -1] * stride.451) + (integer(kind=8)) (*occ)[(integer(kind=8)) i + -1]] * (*delta)[(integer(kind=8)) j + -1] + sum;
                                      __label_000200:;
                                      L.164:;
                                      D.5339 = j == D.5335;
                                      j = j + 1;
                                      if (D.5339) goto L.165;
                                    }
                                  }
                              }
                            L.165:;
                          }
                          {
                            real(kind=8) D.5340;
                            real(kind=8) D.5341;

                            D.5340 = sum;
                            D.5341 = D.5340 * D.5340;
                            *ll = *ll - D.5341;
                          }
                          __label_000300:;
                          L.162:;
                          D.5343 = i == D.5331;
                          i = i + 1;
                          if (D.5343) goto L.163;
                        }
                      }
                  }
                L.163:;
              }
              __label_000900:;
              L.158:;
              D.5345 = s == D.5321;
              s = s + 1;
              if (D.5345) goto L.159;
            }
          }
      }
    L.159:;
  }
  *ll = *ll / 2.0e+0;
  return;
}


chv (integer(kind=4) & restrict nmax, integer(kind=4) & restrict m, real(kind=8)[0:D.5417] * restrict v, integer(kind=4) & restrict ntot, integer(kind=4)[0:D.5414] * restrict occ, integer(kind=4)[0:D.5423] * restrict ist, integer(kind=4)[0:D.5420] * restrict ifin)
{
  integer(kind=4) i;
  integer(kind=8) ubound.456;
  integer(kind=8) size.457;
  integer(kind=8) ubound.458;
  integer(kind=8) size.459;
  integer(kind=4) j;
  integer(kind=4) k;
  integer(kind=8) ubound.460;
  integer(kind=8) size.461;
  integer(kind=4) s;
  real(kind=8) sum;
  integer(kind=8) ubound.462;
  integer(kind=8) ubound.463;
  integer(kind=8) stride.464;
  integer(kind=8) ubound.465;
  integer(kind=8) stride.466;
  integer(kind=8) offset.467;
  integer(kind=8) size.468;
  integer(kind=8) D.5414;
  bitsizetype D.5415;
  sizetype D.5416;
  integer(kind=8) D.5417;
  bitsizetype D.5418;
  sizetype D.5419;
  integer(kind=8) D.5420;
  bitsizetype D.5421;
  sizetype D.5422;
  integer(kind=8) D.5423;
  bitsizetype D.5424;
  sizetype D.5425;

  ubound.458 = (integer(kind=8)) *m;
  size.459 = NON_LVALUE_EXPR <ubound.458>;
  size.459 = MAX_EXPR <size.459, 0>;
  D.5423 = size.459 + -1;
  D.5424 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.459> * 32;
  D.5425 = (sizetype) NON_LVALUE_EXPR <size.459> * 4;
  ubound.456 = (integer(kind=8)) *m;
  size.457 = NON_LVALUE_EXPR <ubound.456>;
  size.457 = MAX_EXPR <size.457, 0>;
  D.5420 = size.457 + -1;
  D.5421 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.457> * 32;
  D.5422 = (sizetype) NON_LVALUE_EXPR <size.457> * 4;
  ubound.462 = (integer(kind=8)) *nmax;
  stride.464 = NON_LVALUE_EXPR <ubound.462>;
  stride.464 = MAX_EXPR <stride.464, 0>;
  ubound.463 = (integer(kind=8)) *nmax;
  stride.466 = stride.464 * NON_LVALUE_EXPR <ubound.463>;
  stride.466 = MAX_EXPR <stride.466, 0>;
  ubound.465 = (integer(kind=8)) *m;
  size.468 = stride.466 * NON_LVALUE_EXPR <ubound.465>;
  size.468 = MAX_EXPR <size.468, 0>;
  D.5417 = size.468 + -1;
  D.5418 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.468> * 64;
  D.5419 = (sizetype) NON_LVALUE_EXPR <size.468> * 8;
  offset.467 = ~NON_LVALUE_EXPR <stride.464> - NON_LVALUE_EXPR <stride.466>;
  ubound.460 = (integer(kind=8)) *ntot;
  size.461 = NON_LVALUE_EXPR <ubound.460>;
  size.461 = MAX_EXPR <size.461, 0>;
  D.5414 = size.461 + -1;
  D.5415 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.461> * 32;
  D.5416 = (sizetype) NON_LVALUE_EXPR <size.461> * 4;
  {
    integer(kind=4) D.5383;

    D.5383 = *m;
    s = 1;
    if (s <= D.5383)
      {
        while (1)
          {
            {
              logical(kind=4) D.5413;

              {
                integer(kind=4) D.5386;
                integer(kind=4) D.5387;

                D.5386 = (*ist)[(integer(kind=8)) s + -1];
                D.5387 = (*ifin)[(integer(kind=8)) s + -1];
                i = D.5386;
                if (i <= D.5387)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.5411;

                          sum = 0.0;
                          {
                            integer(kind=4) D.5390;
                            integer(kind=4) D.5391;

                            D.5390 = (*ist)[(integer(kind=8)) s + -1];
                            D.5391 = i + -1;
                            k = D.5390;
                            if (k <= D.5391)
                              {
                                while (1)
                                  {
                                    {
                                      logical(kind=4) D.5397;

                                      {
                                        real(kind=8) D.5394;
                                        real(kind=8) D.5395;

                                        D.5394 = (*v)[(((integer(kind=8)) s * stride.466 + offset.467) + (integer(kind=8)) (*occ)[(integer(kind=8)) i + -1] * stride.464) + (integer(kind=8)) (*occ)[(integer(kind=8)) k + -1]];
                                        D.5395 = D.5394 * D.5394;
                                        sum = sum + D.5395;
                                      }
                                      __label_000010:;
                                      L.170:;
                                      D.5397 = k == D.5391;
                                      k = k + 1;
                                      if (D.5397) goto L.171;
                                    }
                                  }
                              }
                            L.171:;
                          }
                          (*v)[(((integer(kind=8)) s * stride.466 + offset.467) + (integer(kind=8)) (*occ)[(integer(kind=8)) i + -1] * stride.464) + (integer(kind=8)) (*occ)[(integer(kind=8)) i + -1]] = __builtin_sqrt ((*v)[(((integer(kind=8)) s * stride.466 + offset.467) + (integer(kind=8)) (*occ)[(integer(kind=8)) i + -1] * stride.464) + (integer(kind=8)) (*occ)[(integer(kind=8)) i + -1]] - sum);
                          {
                            integer(kind=4) D.5398;
                            integer(kind=4) D.5399;

                            D.5398 = i + 1;
                            D.5399 = (*ifin)[(integer(kind=8)) s + -1];
                            j = D.5398;
                            if (j <= D.5399)
                              {
                                while (1)
                                  {
                                    {
                                      logical(kind=4) D.5409;

                                      sum = 0.0;
                                      {
                                        integer(kind=4) D.5402;
                                        integer(kind=4) D.5403;

                                        D.5402 = (*ist)[(integer(kind=8)) s + -1];
                                        D.5403 = i + -1;
                                        k = D.5402;
                                        if (k <= D.5403)
                                          {
                                            while (1)
                                              {
                                                {
                                                  logical(kind=4) D.5407;

                                                  sum = (*v)[(((integer(kind=8)) s * stride.466 + offset.467) + (integer(kind=8)) (*occ)[(integer(kind=8)) i + -1] * stride.464) + (integer(kind=8)) (*occ)[(integer(kind=8)) k + -1]] * (*v)[(((integer(kind=8)) s * stride.466 + offset.467) + (integer(kind=8)) (*occ)[(integer(kind=8)) j + -1] * stride.464) + (integer(kind=8)) (*occ)[(integer(kind=8)) k + -1]] + sum;
                                                  __label_000030:;
                                                  L.174:;
                                                  D.5407 = k == D.5403;
                                                  k = k + 1;
                                                  if (D.5407) goto L.175;
                                                }
                                              }
                                          }
                                        L.175:;
                                      }
                                      (*v)[(((integer(kind=8)) s * stride.466 + offset.467) + (integer(kind=8)) (*occ)[(integer(kind=8)) j + -1] * stride.464) + (integer(kind=8)) (*occ)[(integer(kind=8)) i + -1]] = (((*v)[(((integer(kind=8)) s * stride.466 + offset.467) + (integer(kind=8)) (*occ)[(integer(kind=8)) j + -1] * stride.464) + (integer(kind=8)) (*occ)[(integer(kind=8)) i + -1]] - sum)) / (*v)[(((integer(kind=8)) s * stride.466 + offset.467) + (integer(kind=8)) (*occ)[(integer(kind=8)) i + -1] * stride.464) + (integer(kind=8)) (*occ)[(integer(kind=8)) i + -1]];
                                      __label_000040:;
                                      L.172:;
                                      D.5409 = j == D.5399;
                                      j = j + 1;
                                      if (D.5409) goto L.173;
                                    }
                                  }
                              }
                            L.173:;
                          }
                          __label_000050:;
                          L.168:;
                          D.5411 = i == D.5387;
                          i = i + 1;
                          if (D.5411) goto L.169;
                        }
                      }
                  }
                L.169:;
              }
              __label_000100:;
              L.166:;
              D.5413 = s == D.5383;
              s = s + 1;
              if (D.5413) goto L.167;
            }
          }
      }
    L.167:;
  }
  return;
}


gls (integer(kind=4) & restrict ntot, integer(kind=4) & restrict m, integer(kind=4)[0:D.5615] * restrict ist, integer(kind=4)[0:D.5612] * restrict ifin, integer(kind=4)[0:D.5606] * restrict occ, integer(kind=4) & restrict nmax, real(kind=8)[0:D.5603] * restrict vi, real(kind=8)[0:D.5579] * restrict vh, integer(kind=4) & restrict pcol, real(kind=8)[0:D.5600] * restrict pred, integer(kind=4) & restrict q, integer(kind=4) & restrict iflag, real(kind=8)[0:] * restrict sig, real(kind=8) & restrict sigma2, integer(kind=4) & restrict p, integer(kind=4)[0:D.5597] * restrict xcol, real(kind=8)[0:D.5585] * restrict beta, real(kind=8)[0:D.5591] * restrict y, real(kind=8)[0:D.5582] * restrict delta, real(kind=8)[0:D.5609] * restrict w, real(kind=8)[0:D.5594] * restrict xtw, real(kind=8)[0:D.5618] * restrict xtwx, real(kind=8)[0:D.5621] * restrict xtwy, real(kind=8)[0:D.5588] * restrict xtwxinv)
{
  integer(kind=8) ubound.469;
  integer(kind=8) size.470;
  integer(kind=8) ubound.471;
  integer(kind=8) size.472;
  integer(kind=4) fin;
  integer(kind=4) i;
  integer(kind=8) ubound.473;
  integer(kind=8) size.474;
  integer(kind=8) ubound.475;
  integer(kind=8) size.476;
  integer(kind=4) j;
  integer(kind=8) ubound.477;
  integer(kind=8) size.478;
  integer(kind=8) ubound.479;
  integer(kind=8) ubound.480;
  integer(kind=8) stride.481;
  integer(kind=8) offset.482;
  integer(kind=8) size.483;
  integer(kind=4) s;
  integer(kind=4) st;
  real(kind=4) sum;
  real(kind=4) sum1;
  integer(kind=8) ubound.484;
  integer(kind=8) ubound.485;
  integer(kind=8) stride.486;
  integer(kind=8) ubound.487;
  integer(kind=8) stride.488;
  integer(kind=8) offset.489;
  integer(kind=8) size.490;
  integer(kind=8) ubound.491;
  integer(kind=8) ubound.492;
  integer(kind=8) stride.493;
  integer(kind=8) ubound.494;
  integer(kind=8) stride.495;
  integer(kind=8) offset.496;
  integer(kind=8) size.497;
  integer(kind=8) ubound.498;
  integer(kind=8) ubound.499;
  integer(kind=8) stride.500;
  integer(kind=8) ubound.501;
  integer(kind=8) stride.502;
  integer(kind=8) offset.503;
  integer(kind=8) size.504;
  integer(kind=8) ubound.505;
  integer(kind=8) size.506;
  integer(kind=8) ubound.507;
  integer(kind=8) ubound.508;
  integer(kind=8) stride.509;
  integer(kind=8) offset.510;
  integer(kind=8) size.511;
  integer(kind=8) ubound.512;
  integer(kind=8) ubound.513;
  integer(kind=8) stride.514;
  integer(kind=8) offset.515;
  integer(kind=8) size.516;
  integer(kind=8) ubound.517;
  integer(kind=8) ubound.518;
  integer(kind=8) stride.519;
  integer(kind=8) offset.520;
  integer(kind=8) size.521;
  integer(kind=8) ubound.522;
  integer(kind=8) size.523;
  integer(kind=8) ubound.524;
  integer(kind=8) size.525;
  integer(kind=8) D.5579;
  bitsizetype D.5580;
  sizetype D.5581;
  integer(kind=8) D.5582;
  bitsizetype D.5583;
  sizetype D.5584;
  integer(kind=8) D.5585;
  bitsizetype D.5586;
  sizetype D.5587;
  integer(kind=8) D.5588;
  bitsizetype D.5589;
  sizetype D.5590;
  integer(kind=8) D.5591;
  bitsizetype D.5592;
  sizetype D.5593;
  integer(kind=8) D.5594;
  bitsizetype D.5595;
  sizetype D.5596;
  integer(kind=8) D.5597;
  bitsizetype D.5598;
  sizetype D.5599;
  integer(kind=8) D.5600;
  bitsizetype D.5601;
  sizetype D.5602;
  integer(kind=8) D.5603;
  bitsizetype D.5604;
  sizetype D.5605;
  integer(kind=8) D.5606;
  bitsizetype D.5607;
  sizetype D.5608;
  integer(kind=8) D.5609;
  bitsizetype D.5610;
  sizetype D.5611;
  integer(kind=8) D.5612;
  bitsizetype D.5613;
  sizetype D.5614;
  integer(kind=8) D.5615;
  bitsizetype D.5616;
  sizetype D.5617;
  integer(kind=8) D.5618;
  bitsizetype D.5619;
  sizetype D.5620;
  integer(kind=8) D.5621;
  bitsizetype D.5622;
  sizetype D.5623;

  ubound.522 = (integer(kind=8)) *p;
  size.523 = NON_LVALUE_EXPR <ubound.522>;
  size.523 = MAX_EXPR <size.523, 0>;
  D.5621 = size.523 + -1;
  D.5622 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.523> * 64;
  D.5623 = (sizetype) NON_LVALUE_EXPR <size.523> * 8;
  ubound.512 = (integer(kind=8)) *p;
  stride.514 = NON_LVALUE_EXPR <ubound.512>;
  stride.514 = MAX_EXPR <stride.514, 0>;
  ubound.513 = (integer(kind=8)) *p;
  size.516 = stride.514 * NON_LVALUE_EXPR <ubound.513>;
  size.516 = MAX_EXPR <size.516, 0>;
  D.5618 = size.516 + -1;
  D.5619 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.516> * 64;
  D.5620 = (sizetype) NON_LVALUE_EXPR <size.516> * 8;
  offset.515 = ~NON_LVALUE_EXPR <stride.514>;
  ubound.475 = (integer(kind=8)) *m;
  size.476 = NON_LVALUE_EXPR <ubound.475>;
  size.476 = MAX_EXPR <size.476, 0>;
  D.5615 = size.476 + -1;
  D.5616 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.476> * 32;
  D.5617 = (sizetype) NON_LVALUE_EXPR <size.476> * 4;
  ubound.473 = (integer(kind=8)) *m;
  size.474 = NON_LVALUE_EXPR <ubound.473>;
  size.474 = MAX_EXPR <size.474, 0>;
  D.5612 = size.474 + -1;
  D.5613 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.474> * 32;
  D.5614 = (sizetype) NON_LVALUE_EXPR <size.474> * 4;
  ubound.498 = (integer(kind=8)) *nmax;
  stride.500 = NON_LVALUE_EXPR <ubound.498>;
  stride.500 = MAX_EXPR <stride.500, 0>;
  ubound.499 = (integer(kind=8)) *nmax;
  stride.502 = stride.500 * NON_LVALUE_EXPR <ubound.499>;
  stride.502 = MAX_EXPR <stride.502, 0>;
  ubound.501 = (integer(kind=8)) *m;
  size.504 = stride.502 * NON_LVALUE_EXPR <ubound.501>;
  size.504 = MAX_EXPR <size.504, 0>;
  D.5609 = size.504 + -1;
  D.5610 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.504> * 64;
  D.5611 = (sizetype) NON_LVALUE_EXPR <size.504> * 8;
  offset.503 = ~NON_LVALUE_EXPR <stride.500> - NON_LVALUE_EXPR <stride.502>;
  ubound.477 = (integer(kind=8)) *ntot;
  size.478 = NON_LVALUE_EXPR <ubound.477>;
  size.478 = MAX_EXPR <size.478, 0>;
  D.5606 = size.478 + -1;
  D.5607 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.478> * 32;
  D.5608 = (sizetype) NON_LVALUE_EXPR <size.478> * 4;
  ubound.491 = (integer(kind=8)) *nmax;
  stride.493 = NON_LVALUE_EXPR <ubound.491>;
  stride.493 = MAX_EXPR <stride.493, 0>;
  ubound.492 = (integer(kind=8)) *nmax;
  stride.495 = stride.493 * NON_LVALUE_EXPR <ubound.492>;
  stride.495 = MAX_EXPR <stride.495, 0>;
  ubound.494 = (integer(kind=8)) *m;
  size.497 = stride.495 * NON_LVALUE_EXPR <ubound.494>;
  size.497 = MAX_EXPR <size.497, 0>;
  D.5603 = size.497 + -1;
  D.5604 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.497> * 64;
  D.5605 = (sizetype) NON_LVALUE_EXPR <size.497> * 8;
  offset.496 = ~NON_LVALUE_EXPR <stride.493> - NON_LVALUE_EXPR <stride.495>;
  ubound.479 = (integer(kind=8)) *ntot;
  stride.481 = NON_LVALUE_EXPR <ubound.479>;
  stride.481 = MAX_EXPR <stride.481, 0>;
  ubound.480 = (integer(kind=8)) *pcol;
  size.483 = stride.481 * NON_LVALUE_EXPR <ubound.480>;
  size.483 = MAX_EXPR <size.483, 0>;
  D.5600 = size.483 + -1;
  D.5601 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.483> * 64;
  D.5602 = (sizetype) NON_LVALUE_EXPR <size.483> * 8;
  offset.482 = ~NON_LVALUE_EXPR <stride.481>;
  ubound.505 = (integer(kind=8)) *p;
  size.506 = NON_LVALUE_EXPR <ubound.505>;
  size.506 = MAX_EXPR <size.506, 0>;
  D.5597 = size.506 + -1;
  D.5598 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.506> * 32;
  D.5599 = (sizetype) NON_LVALUE_EXPR <size.506> * 4;
  ubound.507 = (integer(kind=8)) *p;
  stride.509 = NON_LVALUE_EXPR <ubound.507>;
  stride.509 = MAX_EXPR <stride.509, 0>;
  ubound.508 = (integer(kind=8)) *nmax;
  size.511 = stride.509 * NON_LVALUE_EXPR <ubound.508>;
  size.511 = MAX_EXPR <size.511, 0>;
  D.5594 = size.511 + -1;
  D.5595 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.511> * 64;
  D.5596 = (sizetype) NON_LVALUE_EXPR <size.511> * 8;
  offset.510 = ~NON_LVALUE_EXPR <stride.509>;
  ubound.524 = (integer(kind=8)) *ntot;
  size.525 = NON_LVALUE_EXPR <ubound.524>;
  size.525 = MAX_EXPR <size.525, 0>;
  D.5591 = size.525 + -1;
  D.5592 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.525> * 64;
  D.5593 = (sizetype) NON_LVALUE_EXPR <size.525> * 8;
  ubound.517 = (integer(kind=8)) *p;
  stride.519 = NON_LVALUE_EXPR <ubound.517>;
  stride.519 = MAX_EXPR <stride.519, 0>;
  ubound.518 = (integer(kind=8)) *p;
  size.521 = stride.519 * NON_LVALUE_EXPR <ubound.518>;
  size.521 = MAX_EXPR <size.521, 0>;
  D.5588 = size.521 + -1;
  D.5589 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.521> * 64;
  D.5590 = (sizetype) NON_LVALUE_EXPR <size.521> * 8;
  offset.520 = ~NON_LVALUE_EXPR <stride.519>;
  ubound.469 = (integer(kind=8)) *p;
  size.470 = NON_LVALUE_EXPR <ubound.469>;
  size.470 = MAX_EXPR <size.470, 0>;
  D.5585 = size.470 + -1;
  D.5586 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.470> * 64;
  D.5587 = (sizetype) NON_LVALUE_EXPR <size.470> * 8;
  ubound.471 = (integer(kind=8)) *ntot;
  size.472 = NON_LVALUE_EXPR <ubound.471>;
  size.472 = MAX_EXPR <size.472, 0>;
  D.5582 = size.472 + -1;
  D.5583 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.472> * 64;
  D.5584 = (sizetype) NON_LVALUE_EXPR <size.472> * 8;
  ubound.484 = (integer(kind=8)) *nmax;
  stride.486 = NON_LVALUE_EXPR <ubound.484>;
  stride.486 = MAX_EXPR <stride.486, 0>;
  ubound.485 = (integer(kind=8)) *nmax;
  stride.488 = stride.486 * NON_LVALUE_EXPR <ubound.485>;
  stride.488 = MAX_EXPR <stride.488, 0>;
  ubound.487 = (integer(kind=8)) *m;
  size.490 = stride.488 * NON_LVALUE_EXPR <ubound.487>;
  size.490 = MAX_EXPR <size.490, 0>;
  D.5579 = size.490 + -1;
  D.5580 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.490> * 64;
  D.5581 = (sizetype) NON_LVALUE_EXPR <size.490> * 8;
  offset.489 = ~NON_LVALUE_EXPR <stride.486> - NON_LVALUE_EXPR <stride.488>;
  {
    integer(kind=4) D.5505;

    D.5505 = *p;
    i = 1;
    if (i <= D.5505)
      {
        while (1)
          {
            {
              logical(kind=4) D.5515;

              (*xtwy)[(integer(kind=8)) i + -1] = 0.0;
              {
                integer(kind=4) D.5508;
                integer(kind=4) D.5509;

                D.5508 = i;
                D.5509 = *p;
                j = D.5508;
                if (j <= D.5509)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.5513;

                          (*xtwx)[((integer(kind=8)) j * stride.514 + offset.515) + (integer(kind=8)) i] = 0.0;
                          __label_000005:;
                          L.178:;
                          D.5513 = j == D.5509;
                          j = j + 1;
                          if (D.5513) goto L.179;
                        }
                      }
                  }
                L.179:;
              }
              __label_000010:;
              L.176:;
              D.5515 = i == D.5505;
              i = i + 1;
              if (D.5515) goto L.177;
            }
          }
      }
    L.177:;
  }
  {
    integer(kind=4) D.5516;

    D.5516 = *m;
    s = 1;
    if (s <= D.5516)
      {
        while (1)
          {
            {
              logical(kind=4) D.5534;

              st = (*ist)[(integer(kind=8)) s + -1];
              fin = (*ifin)[(integer(kind=8)) s + -1];
              {
                integer(kind=4) D.5519;
                integer(kind=4) D.5520;

                D.5519 = st;
                D.5520 = fin;
                i = D.5519;
                if (i <= D.5520)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.5532;

                          {
                            integer(kind=4) D.5523;
                            integer(kind=4) D.5524;

                            D.5523 = i;
                            D.5524 = fin;
                            j = D.5523;
                            if (j <= D.5524)
                              {
                                while (1)
                                  {
                                    {
                                      logical(kind=4) D.5530;

                                      if (*iflag != 1)
                                        {
                                          (*w)[(((integer(kind=8)) s * stride.502 + offset.503) + (integer(kind=8)) (*occ)[(integer(kind=8)) j + -1] * stride.500) + (integer(kind=8)) (*occ)[(integer(kind=8)) i + -1]] = (*vi)[(((integer(kind=8)) s * stride.495 + offset.496) + (integer(kind=8)) (*occ)[(integer(kind=8)) j + -1] * stride.493) + (integer(kind=8)) (*occ)[(integer(kind=8)) i + -1]];
                                        }
                                      else
                                        {
                                          if (i == j)
                                            {
                                              (*w)[(((integer(kind=8)) s * stride.502 + offset.503) + (integer(kind=8)) (*occ)[(integer(kind=8)) j + -1] * stride.500) + (integer(kind=8)) (*occ)[(integer(kind=8)) i + -1]] = 1.0e+0;
                                            }
                                          else
                                            {
                                              (*w)[(((integer(kind=8)) s * stride.502 + offset.503) + (integer(kind=8)) (*occ)[(integer(kind=8)) j + -1] * stride.500) + (integer(kind=8)) (*occ)[(integer(kind=8)) i + -1]] = 0.0;
                                            }
                                          L.187:;
                                        }
                                      L.186:;
                                      __label_000011:;
                                      L.184:;
                                      D.5530 = j == D.5524;
                                      j = j + 1;
                                      if (D.5530) goto L.185;
                                    }
                                  }
                              }
                            L.185:;
                          }
                          __label_000012:;
                          L.182:;
                          D.5532 = i == D.5520;
                          i = i + 1;
                          if (D.5532) goto L.183;
                        }
                      }
                  }
                L.183:;
              }
              mkxtw ((integer(kind=4) *) ntot, (integer(kind=4) *) pcol, pred, (integer(kind=4) *) p, xcol, occ, &st, &fin, (integer(kind=4) *) nmax, w, xtw, &s, (integer(kind=4) *) m);
              mkxtwx ((integer(kind=4) *) ntot, (integer(kind=4) *) pcol, pred, (integer(kind=4) *) p, xcol, occ, &st, &fin, (integer(kind=4) *) nmax, xtw, xtwx);
              mkxtwy ((integer(kind=4) *) ntot, (integer(kind=4) *) p, occ, &st, &fin, (integer(kind=4) *) nmax, xtw, y, xtwy);
              __label_000100:;
              L.180:;
              D.5534 = s == D.5516;
              s = s + 1;
              if (D.5534) goto L.181;
            }
          }
      }
    L.181:;
  }
  chfc ((integer(kind=4) *) p, (integer(kind=4) *) p, xtwx);
  bkslv ((integer(kind=4) *) p, (integer(kind=4) *) p, xtwx);
  mm ((integer(kind=4) *) p, (integer(kind=4) *) p, xtwx, xtwxinv);
  {
    integer(kind=4) D.5535;

    D.5535 = *p;
    i = 1;
    if (i <= D.5535)
      {
        while (1)
          {
            {
              logical(kind=4) D.5550;

              sum = 0.0;
              {
                integer(kind=4) D.5538;

                D.5538 = i;
                j = 1;
                if (j <= D.5538)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.5542;

                          sum = (real(kind=4)) ((real(kind=8)) sum + (*xtwxinv)[((integer(kind=8)) i * stride.519 + offset.520) + (integer(kind=8)) j] * (*xtwy)[(integer(kind=8)) j + -1]);
                          __label_000110:;
                          L.190:;
                          D.5542 = j == D.5538;
                          j = j + 1;
                          if (D.5542) goto L.191;
                        }
                      }
                  }
                L.191:;
              }
              {
                integer(kind=4) D.5543;
                integer(kind=4) D.5544;

                D.5543 = i + 1;
                D.5544 = *p;
                j = D.5543;
                if (j <= D.5544)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.5548;

                          sum = (real(kind=4)) ((real(kind=8)) sum + (*xtwxinv)[((integer(kind=8)) j * stride.519 + offset.520) + (integer(kind=8)) i] * (*xtwy)[(integer(kind=8)) j + -1]);
                          __label_000120:;
                          L.192:;
                          D.5548 = j == D.5544;
                          j = j + 1;
                          if (D.5548) goto L.193;
                        }
                      }
                  }
                L.193:;
              }
              (*beta)[(integer(kind=8)) i + -1] = (real(kind=8)) sum;
              __label_000130:;
              L.188:;
              D.5550 = i == D.5535;
              i = i + 1;
              if (D.5550) goto L.189;
            }
          }
      }
    L.189:;
  }
  mkdel ((integer(kind=4) *) ntot, (integer(kind=4) *) pcol, pred, (integer(kind=4) *) p, xcol, y, beta, delta);
  *sigma2 = 0.0;
  {
    integer(kind=4) D.5551;

    D.5551 = *m;
    s = 1;
    if (s <= D.5551)
      {
        while (1)
          {
            {
              logical(kind=4) D.5578;

              st = (*ist)[(integer(kind=8)) s + -1];
              fin = (*ifin)[(integer(kind=8)) s + -1];
              if (*iflag != 1)
                {
                  {
                    integer(kind=4) D.5555;
                    integer(kind=4) D.5556;

                    D.5555 = st;
                    D.5556 = fin;
                    i = D.5555;
                    if (i <= D.5556)
                      {
                        while (1)
                          {
                            {
                              logical(kind=4) D.5568;

                              sum1 = 0.0;
                              {
                                integer(kind=4) D.5559;
                                integer(kind=4) D.5560;

                                D.5559 = st;
                                D.5560 = i;
                                j = D.5559;
                                if (j <= D.5560)
                                  {
                                    while (1)
                                      {
                                        {
                                          logical(kind=4) D.5564;

                                          sum1 = (real(kind=4)) ((real(kind=8)) sum1 + (*delta)[(integer(kind=8)) j + -1] * (*vh)[(((integer(kind=8)) s * stride.488 + offset.489) + (integer(kind=8)) (*occ)[(integer(kind=8)) i + -1] * stride.486) + (integer(kind=8)) (*occ)[(integer(kind=8)) j + -1]]);
                                          __label_000190:;
                                          L.199:;
                                          D.5564 = j == D.5560;
                                          j = j + 1;
                                          if (D.5564) goto L.200;
                                        }
                                      }
                                  }
                                L.200:;
                              }
                              {
                                real(kind=4) D.5565;
                                real(kind=4) D.5566;

                                D.5565 = sum1;
                                D.5566 = D.5565 * D.5565;
                                *sigma2 = *sigma2 + (real(kind=8)) D.5566;
                              }
                              __label_000200:;
                              L.197:;
                              D.5568 = i == D.5556;
                              i = i + 1;
                              if (D.5568) goto L.198;
                            }
                          }
                      }
                    L.198:;
                  }
                }
              else
                {
                  {
                    integer(kind=4) D.5569;
                    integer(kind=4) D.5570;

                    D.5569 = st;
                    D.5570 = fin;
                    i = D.5569;
                    if (i <= D.5570)
                      {
                        while (1)
                          {
                            {
                              logical(kind=4) D.5576;

                              {
                                real(kind=8) D.5573;
                                real(kind=8) D.5574;

                                D.5573 = (*delta)[(integer(kind=8)) i + -1];
                                D.5574 = D.5573 * D.5573;
                                *sigma2 = *sigma2 + D.5574;
                              }
                              __label_000210:;
                              L.201:;
                              D.5576 = i == D.5570;
                              i = i + 1;
                              if (D.5576) goto L.202;
                            }
                          }
                      }
                    L.202:;
                  }
                }
              L.196:;
              __label_000300:;
              L.194:;
              D.5578 = s == D.5551;
              s = s + 1;
              if (D.5578) goto L.195;
            }
          }
      }
    L.195:;
  }
  *sigma2 = *sigma2 / (real(kind=8)) *ntot;
  return;
}


mml (integer(kind=4) & restrict ntot, integer(kind=4) & restrict q, integer(kind=4) & restrict nmax, integer(kind=4) & restrict m, real(kind=8)[0:D.5678] * restrict v, integer(kind=4)[0:D.5681] * restrict occ, integer(kind=4)[0:D.5690] * restrict ist, integer(kind=4)[0:D.5687] * restrict ifin, real(kind=8)[0:D.5684] * restrict ztv)
{
  integer(kind=4) fin;
  integer(kind=4) i;
  integer(kind=8) ubound.526;
  integer(kind=8) size.527;
  integer(kind=8) ubound.528;
  integer(kind=8) size.529;
  integer(kind=4) j;
  integer(kind=4) k;
  integer(kind=8) ubound.530;
  integer(kind=8) size.531;
  integer(kind=4) s;
  integer(kind=4) st;
  real(kind=8) sum;
  integer(kind=8) ubound.532;
  integer(kind=8) ubound.533;
  integer(kind=8) stride.534;
  integer(kind=8) ubound.535;
  integer(kind=8) stride.536;
  integer(kind=8) offset.537;
  integer(kind=8) size.538;
  integer(kind=8) ubound.539;
  integer(kind=8) ubound.540;
  integer(kind=8) stride.541;
  integer(kind=8) ubound.542;
  integer(kind=8) stride.543;
  integer(kind=8) offset.544;
  integer(kind=8) size.545;
  integer(kind=8) D.5678;
  bitsizetype D.5679;
  sizetype D.5680;
  integer(kind=8) D.5681;
  bitsizetype D.5682;
  sizetype D.5683;
  integer(kind=8) D.5684;
  bitsizetype D.5685;
  sizetype D.5686;
  integer(kind=8) D.5687;
  bitsizetype D.5688;
  sizetype D.5689;
  integer(kind=8) D.5690;
  bitsizetype D.5691;
  sizetype D.5692;

  ubound.528 = (integer(kind=8)) *m;
  size.529 = NON_LVALUE_EXPR <ubound.528>;
  size.529 = MAX_EXPR <size.529, 0>;
  D.5690 = size.529 + -1;
  D.5691 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.529> * 32;
  D.5692 = (sizetype) NON_LVALUE_EXPR <size.529> * 4;
  ubound.526 = (integer(kind=8)) *m;
  size.527 = NON_LVALUE_EXPR <ubound.526>;
  size.527 = MAX_EXPR <size.527, 0>;
  D.5687 = size.527 + -1;
  D.5688 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.527> * 32;
  D.5689 = (sizetype) NON_LVALUE_EXPR <size.527> * 4;
  ubound.539 = (integer(kind=8)) *q;
  stride.541 = NON_LVALUE_EXPR <ubound.539>;
  stride.541 = MAX_EXPR <stride.541, 0>;
  ubound.540 = (integer(kind=8)) *nmax;
  stride.543 = stride.541 * NON_LVALUE_EXPR <ubound.540>;
  stride.543 = MAX_EXPR <stride.543, 0>;
  ubound.542 = (integer(kind=8)) *m;
  size.545 = stride.543 * NON_LVALUE_EXPR <ubound.542>;
  size.545 = MAX_EXPR <size.545, 0>;
  D.5684 = size.545 + -1;
  D.5685 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.545> * 64;
  D.5686 = (sizetype) NON_LVALUE_EXPR <size.545> * 8;
  offset.544 = ~NON_LVALUE_EXPR <stride.541> - NON_LVALUE_EXPR <stride.543>;
  ubound.530 = (integer(kind=8)) *ntot;
  size.531 = NON_LVALUE_EXPR <ubound.530>;
  size.531 = MAX_EXPR <size.531, 0>;
  D.5681 = size.531 + -1;
  D.5682 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.531> * 32;
  D.5683 = (sizetype) NON_LVALUE_EXPR <size.531> * 4;
  ubound.532 = (integer(kind=8)) *nmax;
  stride.534 = NON_LVALUE_EXPR <ubound.532>;
  stride.534 = MAX_EXPR <stride.534, 0>;
  ubound.533 = (integer(kind=8)) *nmax;
  stride.536 = stride.534 * NON_LVALUE_EXPR <ubound.533>;
  stride.536 = MAX_EXPR <stride.536, 0>;
  ubound.535 = (integer(kind=8)) *m;
  size.538 = stride.536 * NON_LVALUE_EXPR <ubound.535>;
  size.538 = MAX_EXPR <size.538, 0>;
  D.5678 = size.538 + -1;
  D.5679 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.538> * 64;
  D.5680 = (sizetype) NON_LVALUE_EXPR <size.538> * 8;
  offset.537 = ~NON_LVALUE_EXPR <stride.534> - NON_LVALUE_EXPR <stride.536>;
  {
    integer(kind=4) D.5656;

    D.5656 = *m;
    s = 1;
    if (s <= D.5656)
      {
        while (1)
          {
            {
              logical(kind=4) D.5677;

              st = (*ist)[(integer(kind=8)) s + -1];
              fin = (*ifin)[(integer(kind=8)) s + -1];
              {
                integer(kind=4) D.5659;

                D.5659 = *q;
                i = 1;
                if (i <= D.5659)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.5675;

                          {
                            integer(kind=4) D.5662;
                            integer(kind=4) D.5663;

                            D.5662 = st;
                            D.5663 = fin;
                            j = D.5662;
                            if (j <= D.5663)
                              {
                                while (1)
                                  {
                                    {
                                      logical(kind=4) D.5673;

                                      sum = 0.0;
                                      {
                                        integer(kind=4) D.5666;
                                        integer(kind=4) D.5667;

                                        D.5666 = j;
                                        D.5667 = fin;
                                        k = D.5666;
                                        if (k <= D.5667)
                                          {
                                            while (1)
                                              {
                                                {
                                                  logical(kind=4) D.5671;

                                                  sum = (*ztv)[(((integer(kind=8)) s * stride.543 + offset.544) + (integer(kind=8)) (*occ)[(integer(kind=8)) k + -1] * stride.541) + (integer(kind=8)) i] * (*v)[(((integer(kind=8)) s * stride.536 + offset.537) + (integer(kind=8)) (*occ)[(integer(kind=8)) k + -1] * stride.534) + (integer(kind=8)) (*occ)[(integer(kind=8)) j + -1]] + sum;
                                                  __label_000050:;
                                                  L.209:;
                                                  D.5671 = k == D.5667;
                                                  k = k + 1;
                                                  if (D.5671) goto L.210;
                                                }
                                              }
                                          }
                                        L.210:;
                                      }
                                      (*ztv)[(((integer(kind=8)) s * stride.543 + offset.544) + (integer(kind=8)) (*occ)[(integer(kind=8)) j + -1] * stride.541) + (integer(kind=8)) i] = sum;
                                      __label_000100:;
                                      L.207:;
                                      D.5673 = j == D.5663;
                                      j = j + 1;
                                      if (D.5673) goto L.208;
                                    }
                                  }
                              }
                            L.208:;
                          }
                          __label_000200:;
                          L.205:;
                          D.5675 = i == D.5659;
                          i = i + 1;
                          if (D.5675) goto L.206;
                        }
                      }
                  }
                L.206:;
              }
              __label_000300:;
              L.203:;
              D.5677 = s == D.5656;
              s = s + 1;
              if (D.5677) goto L.204;
            }
          }
      }
    L.204:;
  }
  return;
}


mmtm (integer(kind=4) & restrict q, integer(kind=4) & restrict nmax, integer(kind=4) & restrict m, real(kind=8)[0:D.5751] * restrict ztv, integer(kind=4) & restrict ntot, integer(kind=4)[0:D.5748] * restrict occ, integer(kind=4)[0:D.5757] * restrict ist, integer(kind=4)[0:D.5754] * restrict ifin, real(kind=8)[0:D.5745] * restrict sig0)
{
  integer(kind=4) i;
  integer(kind=8) ubound.546;
  integer(kind=8) size.547;
  integer(kind=8) ubound.548;
  integer(kind=8) size.549;
  integer(kind=4) j;
  integer(kind=4) k;
  integer(kind=8) ubound.550;
  integer(kind=8) size.551;
  integer(kind=4) s;
  integer(kind=8) ubound.552;
  integer(kind=8) ubound.553;
  integer(kind=8) stride.554;
  integer(kind=8) ubound.555;
  integer(kind=8) stride.556;
  integer(kind=8) offset.557;
  integer(kind=8) size.558;
  real(kind=8) sum;
  integer(kind=8) ubound.559;
  integer(kind=8) ubound.560;
  integer(kind=8) stride.561;
  integer(kind=8) ubound.562;
  integer(kind=8) stride.563;
  integer(kind=8) offset.564;
  integer(kind=8) size.565;
  integer(kind=8) D.5745;
  bitsizetype D.5746;
  sizetype D.5747;
  integer(kind=8) D.5748;
  bitsizetype D.5749;
  sizetype D.5750;
  integer(kind=8) D.5751;
  bitsizetype D.5752;
  sizetype D.5753;
  integer(kind=8) D.5754;
  bitsizetype D.5755;
  sizetype D.5756;
  integer(kind=8) D.5757;
  bitsizetype D.5758;
  sizetype D.5759;

  ubound.548 = (integer(kind=8)) *m;
  size.549 = NON_LVALUE_EXPR <ubound.548>;
  size.549 = MAX_EXPR <size.549, 0>;
  D.5757 = size.549 + -1;
  D.5758 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.549> * 32;
  D.5759 = (sizetype) NON_LVALUE_EXPR <size.549> * 4;
  ubound.546 = (integer(kind=8)) *m;
  size.547 = NON_LVALUE_EXPR <ubound.546>;
  size.547 = MAX_EXPR <size.547, 0>;
  D.5754 = size.547 + -1;
  D.5755 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.547> * 32;
  D.5756 = (sizetype) NON_LVALUE_EXPR <size.547> * 4;
  ubound.559 = (integer(kind=8)) *q;
  stride.561 = NON_LVALUE_EXPR <ubound.559>;
  stride.561 = MAX_EXPR <stride.561, 0>;
  ubound.560 = (integer(kind=8)) *nmax;
  stride.563 = stride.561 * NON_LVALUE_EXPR <ubound.560>;
  stride.563 = MAX_EXPR <stride.563, 0>;
  ubound.562 = (integer(kind=8)) *m;
  size.565 = stride.563 * NON_LVALUE_EXPR <ubound.562>;
  size.565 = MAX_EXPR <size.565, 0>;
  D.5751 = size.565 + -1;
  D.5752 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.565> * 64;
  D.5753 = (sizetype) NON_LVALUE_EXPR <size.565> * 8;
  offset.564 = ~NON_LVALUE_EXPR <stride.561> - NON_LVALUE_EXPR <stride.563>;
  ubound.550 = (integer(kind=8)) *ntot;
  size.551 = NON_LVALUE_EXPR <ubound.550>;
  size.551 = MAX_EXPR <size.551, 0>;
  D.5748 = size.551 + -1;
  D.5749 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.551> * 32;
  D.5750 = (sizetype) NON_LVALUE_EXPR <size.551> * 4;
  ubound.552 = (integer(kind=8)) *q;
  stride.554 = NON_LVALUE_EXPR <ubound.552>;
  stride.554 = MAX_EXPR <stride.554, 0>;
  ubound.553 = (integer(kind=8)) *q;
  stride.556 = stride.554 * NON_LVALUE_EXPR <ubound.553>;
  stride.556 = MAX_EXPR <stride.556, 0>;
  ubound.555 = (integer(kind=8)) *m;
  size.558 = stride.556 * NON_LVALUE_EXPR <ubound.555>;
  size.558 = MAX_EXPR <size.558, 0>;
  D.5745 = size.558 + -1;
  D.5746 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.558> * 64;
  D.5747 = (sizetype) NON_LVALUE_EXPR <size.558> * 8;
  offset.557 = ~NON_LVALUE_EXPR <stride.554> - NON_LVALUE_EXPR <stride.556>;
  {
    integer(kind=4) D.5723;

    D.5723 = *m;
    s = 1;
    if (s <= D.5723)
      {
        while (1)
          {
            {
              logical(kind=4) D.5744;

              {
                integer(kind=4) D.5726;

                D.5726 = *q;
                i = 1;
                if (i <= D.5726)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.5742;

                          {
                            integer(kind=4) D.5729;
                            integer(kind=4) D.5730;

                            D.5729 = i;
                            D.5730 = *q;
                            j = D.5729;
                            if (j <= D.5730)
                              {
                                while (1)
                                  {
                                    {
                                      logical(kind=4) D.5740;

                                      sum = 0.0;
                                      {
                                        integer(kind=4) D.5733;
                                        integer(kind=4) D.5734;

                                        D.5733 = (*ist)[(integer(kind=8)) s + -1];
                                        D.5734 = (*ifin)[(integer(kind=8)) s + -1];
                                        k = D.5733;
                                        if (k <= D.5734)
                                          {
                                            while (1)
                                              {
                                                {
                                                  logical(kind=4) D.5738;

                                                  sum = (*ztv)[(((integer(kind=8)) s * stride.563 + offset.564) + (integer(kind=8)) (*occ)[(integer(kind=8)) k + -1] * stride.561) + (integer(kind=8)) i] * (*ztv)[(((integer(kind=8)) s * stride.563 + offset.564) + (integer(kind=8)) (*occ)[(integer(kind=8)) k + -1] * stride.561) + (integer(kind=8)) j] + sum;
                                                  __label_000200:;
                                                  L.217:;
                                                  D.5738 = k == D.5734;
                                                  k = k + 1;
                                                  if (D.5738) goto L.218;
                                                }
                                              }
                                          }
                                        L.218:;
                                      }
                                      (*sig0)[(((integer(kind=8)) s * stride.556 + offset.557) + (integer(kind=8)) j * stride.554) + (integer(kind=8)) i] = sum;
                                      __label_000300:;
                                      L.215:;
                                      D.5740 = j == D.5730;
                                      j = j + 1;
                                      if (D.5740) goto L.216;
                                    }
                                  }
                              }
                            L.216:;
                          }
                          __label_000400:;
                          L.213:;
                          D.5742 = i == D.5726;
                          i = i + 1;
                          if (D.5742) goto L.214;
                        }
                      }
                  }
                L.214:;
              }
              __label_000500:;
              L.211:;
              D.5744 = s == D.5723;
              s = s + 1;
              if (D.5744) goto L.212;
            }
          }
      }
    L.212:;
  }
  return;
}


mmu (integer(kind=4) & restrict ntot, integer(kind=4) & restrict pcol, real(kind=8)[0:D.5852] * restrict pred, integer(kind=4) & restrict q, integer(kind=4)[0:D.5849] * restrict zcol, integer(kind=4) & restrict nmax, integer(kind=4) & restrict m, real(kind=8)[0:D.5846] * restrict v, integer(kind=4)[0:D.5843] * restrict occ, integer(kind=4)[0:D.5858] * restrict ist, integer(kind=4)[0:D.5855] * restrict ifin, real(kind=8)[0:D.5840] * restrict ztv, integer(kind=4) & restrict iflag)
{
  integer(kind=4) fin;
  integer(kind=4) i;
  integer(kind=8) ubound.566;
  integer(kind=8) size.567;
  integer(kind=8) ubound.568;
  integer(kind=8) size.569;
  integer(kind=4) j;
  integer(kind=4) k;
  integer(kind=8) ubound.570;
  integer(kind=8) size.571;
  integer(kind=8) ubound.572;
  integer(kind=8) ubound.573;
  integer(kind=8) stride.574;
  integer(kind=8) offset.575;
  integer(kind=8) size.576;
  integer(kind=4) s;
  integer(kind=4) st;
  real(kind=8) sum;
  integer(kind=8) ubound.577;
  integer(kind=8) ubound.578;
  integer(kind=8) stride.579;
  integer(kind=8) ubound.580;
  integer(kind=8) stride.581;
  integer(kind=8) offset.582;
  integer(kind=8) size.583;
  integer(kind=8) ubound.584;
  integer(kind=8) size.585;
  integer(kind=8) ubound.586;
  integer(kind=8) ubound.587;
  integer(kind=8) stride.588;
  integer(kind=8) ubound.589;
  integer(kind=8) stride.590;
  integer(kind=8) offset.591;
  integer(kind=8) size.592;
  integer(kind=8) D.5840;
  bitsizetype D.5841;
  sizetype D.5842;
  integer(kind=8) D.5843;
  bitsizetype D.5844;
  sizetype D.5845;
  integer(kind=8) D.5846;
  bitsizetype D.5847;
  sizetype D.5848;
  integer(kind=8) D.5849;
  bitsizetype D.5850;
  sizetype D.5851;
  integer(kind=8) D.5852;
  bitsizetype D.5853;
  sizetype D.5854;
  integer(kind=8) D.5855;
  bitsizetype D.5856;
  sizetype D.5857;
  integer(kind=8) D.5858;
  bitsizetype D.5859;
  sizetype D.5860;

  ubound.568 = (integer(kind=8)) *m;
  size.569 = NON_LVALUE_EXPR <ubound.568>;
  size.569 = MAX_EXPR <size.569, 0>;
  D.5858 = size.569 + -1;
  D.5859 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.569> * 32;
  D.5860 = (sizetype) NON_LVALUE_EXPR <size.569> * 4;
  ubound.566 = (integer(kind=8)) *m;
  size.567 = NON_LVALUE_EXPR <ubound.566>;
  size.567 = MAX_EXPR <size.567, 0>;
  D.5855 = size.567 + -1;
  D.5856 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.567> * 32;
  D.5857 = (sizetype) NON_LVALUE_EXPR <size.567> * 4;
  ubound.572 = (integer(kind=8)) *ntot;
  stride.574 = NON_LVALUE_EXPR <ubound.572>;
  stride.574 = MAX_EXPR <stride.574, 0>;
  ubound.573 = (integer(kind=8)) *pcol;
  size.576 = stride.574 * NON_LVALUE_EXPR <ubound.573>;
  size.576 = MAX_EXPR <size.576, 0>;
  D.5852 = size.576 + -1;
  D.5853 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.576> * 64;
  D.5854 = (sizetype) NON_LVALUE_EXPR <size.576> * 8;
  offset.575 = ~NON_LVALUE_EXPR <stride.574>;
  ubound.584 = (integer(kind=8)) *q;
  size.585 = NON_LVALUE_EXPR <ubound.584>;
  size.585 = MAX_EXPR <size.585, 0>;
  D.5849 = size.585 + -1;
  D.5850 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.585> * 32;
  D.5851 = (sizetype) NON_LVALUE_EXPR <size.585> * 4;
  ubound.577 = (integer(kind=8)) *nmax;
  stride.579 = NON_LVALUE_EXPR <ubound.577>;
  stride.579 = MAX_EXPR <stride.579, 0>;
  ubound.578 = (integer(kind=8)) *nmax;
  stride.581 = stride.579 * NON_LVALUE_EXPR <ubound.578>;
  stride.581 = MAX_EXPR <stride.581, 0>;
  ubound.580 = (integer(kind=8)) *m;
  size.583 = stride.581 * NON_LVALUE_EXPR <ubound.580>;
  size.583 = MAX_EXPR <size.583, 0>;
  D.5846 = size.583 + -1;
  D.5847 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.583> * 64;
  D.5848 = (sizetype) NON_LVALUE_EXPR <size.583> * 8;
  offset.582 = ~NON_LVALUE_EXPR <stride.579> - NON_LVALUE_EXPR <stride.581>;
  ubound.570 = (integer(kind=8)) *ntot;
  size.571 = NON_LVALUE_EXPR <ubound.570>;
  size.571 = MAX_EXPR <size.571, 0>;
  D.5843 = size.571 + -1;
  D.5844 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.571> * 32;
  D.5845 = (sizetype) NON_LVALUE_EXPR <size.571> * 4;
  ubound.586 = (integer(kind=8)) *q;
  stride.588 = NON_LVALUE_EXPR <ubound.586>;
  stride.588 = MAX_EXPR <stride.588, 0>;
  ubound.587 = (integer(kind=8)) *nmax;
  stride.590 = stride.588 * NON_LVALUE_EXPR <ubound.587>;
  stride.590 = MAX_EXPR <stride.590, 0>;
  ubound.589 = (integer(kind=8)) *m;
  size.592 = stride.590 * NON_LVALUE_EXPR <ubound.589>;
  size.592 = MAX_EXPR <size.592, 0>;
  D.5840 = size.592 + -1;
  D.5841 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.592> * 64;
  D.5842 = (sizetype) NON_LVALUE_EXPR <size.592> * 8;
  offset.591 = ~NON_LVALUE_EXPR <stride.588> - NON_LVALUE_EXPR <stride.590>;
  if (*iflag != 1)
    {
      {
        integer(kind=4) D.5802;

        D.5802 = *m;
        s = 1;
        if (s <= D.5802)
          {
            while (1)
              {
                {
                  logical(kind=4) D.5823;

                  st = (*ist)[(integer(kind=8)) s + -1];
                  fin = (*ifin)[(integer(kind=8)) s + -1];
                  {
                    integer(kind=4) D.5805;

                    D.5805 = *q;
                    i = 1;
                    if (i <= D.5805)
                      {
                        while (1)
                          {
                            {
                              logical(kind=4) D.5821;

                              {
                                integer(kind=4) D.5808;
                                integer(kind=4) D.5809;

                                D.5808 = st;
                                D.5809 = fin;
                                j = D.5808;
                                if (j <= D.5809)
                                  {
                                    while (1)
                                      {
                                        {
                                          logical(kind=4) D.5819;

                                          sum = 0.0;
                                          {
                                            integer(kind=4) D.5812;
                                            integer(kind=4) D.5813;

                                            D.5812 = st;
                                            D.5813 = j;
                                            k = D.5812;
                                            if (k <= D.5813)
                                              {
                                                while (1)
                                                  {
                                                    {
                                                      logical(kind=4) D.5817;

                                                      sum = (*pred)[((integer(kind=8)) (*zcol)[(integer(kind=8)) i + -1] * stride.574 + offset.575) + (integer(kind=8)) k] * (*v)[(((integer(kind=8)) s * stride.581 + offset.582) + (integer(kind=8)) (*occ)[(integer(kind=8)) j + -1] * stride.579) + (integer(kind=8)) (*occ)[(integer(kind=8)) k + -1]] + sum;
                                                      __label_000050:;
                                                      L.226:;
                                                      D.5817 = k == D.5813;
                                                      k = k + 1;
                                                      if (D.5817) goto L.227;
                                                    }
                                                  }
                                              }
                                            L.227:;
                                          }
                                          (*ztv)[(((integer(kind=8)) s * stride.590 + offset.591) + (integer(kind=8)) (*occ)[(integer(kind=8)) j + -1] * stride.588) + (integer(kind=8)) i] = sum;
                                          __label_000100:;
                                          L.224:;
                                          D.5819 = j == D.5809;
                                          j = j + 1;
                                          if (D.5819) goto L.225;
                                        }
                                      }
                                  }
                                L.225:;
                              }
                              __label_000200:;
                              L.222:;
                              D.5821 = i == D.5805;
                              i = i + 1;
                              if (D.5821) goto L.223;
                            }
                          }
                      }
                    L.223:;
                  }
                  __label_000300:;
                  L.220:;
                  D.5823 = s == D.5802;
                  s = s + 1;
                  if (D.5823) goto L.221;
                }
              }
          }
        L.221:;
      }
    }
  else
    {
      {
        integer(kind=4) D.5824;

        D.5824 = *m;
        s = 1;
        if (s <= D.5824)
          {
            while (1)
              {
                {
                  logical(kind=4) D.5839;

                  st = (*ist)[(integer(kind=8)) s + -1];
                  fin = (*ifin)[(integer(kind=8)) s + -1];
                  {
                    integer(kind=4) D.5827;

                    D.5827 = *q;
                    i = 1;
                    if (i <= D.5827)
                      {
                        while (1)
                          {
                            {
                              logical(kind=4) D.5837;

                              {
                                integer(kind=4) D.5830;
                                integer(kind=4) D.5831;

                                D.5830 = st;
                                D.5831 = fin;
                                j = D.5830;
                                if (j <= D.5831)
                                  {
                                    while (1)
                                      {
                                        {
                                          logical(kind=4) D.5835;

                                          (*ztv)[(((integer(kind=8)) s * stride.590 + offset.591) + (integer(kind=8)) (*occ)[(integer(kind=8)) j + -1] * stride.588) + (integer(kind=8)) i] = (*pred)[((integer(kind=8)) (*zcol)[(integer(kind=8)) i + -1] * stride.574 + offset.575) + (integer(kind=8)) j];
                                          __label_000400:;
                                          L.232:;
                                          D.5835 = j == D.5831;
                                          j = j + 1;
                                          if (D.5835) goto L.233;
                                        }
                                      }
                                  }
                                L.233:;
                              }
                              __label_000500:;
                              L.230:;
                              D.5837 = i == D.5827;
                              i = i + 1;
                              if (D.5837) goto L.231;
                            }
                          }
                      }
                    L.231:;
                  }
                  __label_000600:;
                  L.228:;
                  D.5839 = s == D.5824;
                  s = s + 1;
                  if (D.5839) goto L.229;
                }
              }
          }
        L.229:;
      }
    }
  L.219:;
  return;
}


mmulv (integer(kind=4) & restrict nmax, integer(kind=4) & restrict m, real(kind=8)[0:D.5923] * restrict vh, real(kind=8)[0:D.5917] * restrict vi, integer(kind=4) & restrict ntot, integer(kind=4)[0:D.5920] * restrict occ, integer(kind=4)[0:D.5929] * restrict ist, integer(kind=4)[0:D.5926] * restrict ifin)
{
  integer(kind=4) fin;
  integer(kind=4) i;
  integer(kind=8) ubound.593;
  integer(kind=8) size.594;
  integer(kind=8) ubound.595;
  integer(kind=8) size.596;
  integer(kind=4) j;
  integer(kind=4) k;
  integer(kind=8) ubound.597;
  integer(kind=8) size.598;
  integer(kind=4) s;
  integer(kind=4) st;
  real(kind=8) sum;
  integer(kind=8) ubound.599;
  integer(kind=8) ubound.600;
  integer(kind=8) stride.601;
  integer(kind=8) ubound.602;
  integer(kind=8) stride.603;
  integer(kind=8) offset.604;
  integer(kind=8) size.605;
  integer(kind=8) ubound.606;
  integer(kind=8) ubound.607;
  integer(kind=8) stride.608;
  integer(kind=8) ubound.609;
  integer(kind=8) stride.610;
  integer(kind=8) offset.611;
  integer(kind=8) size.612;
  integer(kind=8) D.5917;
  bitsizetype D.5918;
  sizetype D.5919;
  integer(kind=8) D.5920;
  bitsizetype D.5921;
  sizetype D.5922;
  integer(kind=8) D.5923;
  bitsizetype D.5924;
  sizetype D.5925;
  integer(kind=8) D.5926;
  bitsizetype D.5927;
  sizetype D.5928;
  integer(kind=8) D.5929;
  bitsizetype D.5930;
  sizetype D.5931;

  ubound.595 = (integer(kind=8)) *m;
  size.596 = NON_LVALUE_EXPR <ubound.595>;
  size.596 = MAX_EXPR <size.596, 0>;
  D.5929 = size.596 + -1;
  D.5930 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.596> * 32;
  D.5931 = (sizetype) NON_LVALUE_EXPR <size.596> * 4;
  ubound.593 = (integer(kind=8)) *m;
  size.594 = NON_LVALUE_EXPR <ubound.593>;
  size.594 = MAX_EXPR <size.594, 0>;
  D.5926 = size.594 + -1;
  D.5927 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.594> * 32;
  D.5928 = (sizetype) NON_LVALUE_EXPR <size.594> * 4;
  ubound.599 = (integer(kind=8)) *nmax;
  stride.601 = NON_LVALUE_EXPR <ubound.599>;
  stride.601 = MAX_EXPR <stride.601, 0>;
  ubound.600 = (integer(kind=8)) *nmax;
  stride.603 = stride.601 * NON_LVALUE_EXPR <ubound.600>;
  stride.603 = MAX_EXPR <stride.603, 0>;
  ubound.602 = (integer(kind=8)) *m;
  size.605 = stride.603 * NON_LVALUE_EXPR <ubound.602>;
  size.605 = MAX_EXPR <size.605, 0>;
  D.5923 = size.605 + -1;
  D.5924 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.605> * 64;
  D.5925 = (sizetype) NON_LVALUE_EXPR <size.605> * 8;
  offset.604 = ~NON_LVALUE_EXPR <stride.601> - NON_LVALUE_EXPR <stride.603>;
  ubound.597 = (integer(kind=8)) *ntot;
  size.598 = NON_LVALUE_EXPR <ubound.597>;
  size.598 = MAX_EXPR <size.598, 0>;
  D.5920 = size.598 + -1;
  D.5921 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.598> * 32;
  D.5922 = (sizetype) NON_LVALUE_EXPR <size.598> * 4;
  ubound.606 = (integer(kind=8)) *nmax;
  stride.608 = NON_LVALUE_EXPR <ubound.606>;
  stride.608 = MAX_EXPR <stride.608, 0>;
  ubound.607 = (integer(kind=8)) *nmax;
  stride.610 = stride.608 * NON_LVALUE_EXPR <ubound.607>;
  stride.610 = MAX_EXPR <stride.610, 0>;
  ubound.609 = (integer(kind=8)) *m;
  size.612 = stride.610 * NON_LVALUE_EXPR <ubound.609>;
  size.612 = MAX_EXPR <size.612, 0>;
  D.5917 = size.612 + -1;
  D.5918 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.612> * 64;
  D.5919 = (sizetype) NON_LVALUE_EXPR <size.612> * 8;
  offset.611 = ~NON_LVALUE_EXPR <stride.608> - NON_LVALUE_EXPR <stride.610>;
  {
    integer(kind=4) D.5893;

    D.5893 = *m;
    s = 1;
    if (s <= D.5893)
      {
        while (1)
          {
            {
              logical(kind=4) D.5916;

              st = (*ist)[(integer(kind=8)) s + -1];
              fin = (*ifin)[(integer(kind=8)) s + -1];
              {
                integer(kind=4) D.5896;
                integer(kind=4) D.5897;

                D.5896 = st;
                D.5897 = fin;
                i = D.5896;
                if (i <= D.5897)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.5914;

                          {
                            integer(kind=4) D.5900;
                            integer(kind=4) D.5901;

                            D.5900 = i;
                            D.5901 = fin;
                            j = D.5900;
                            if (j <= D.5901)
                              {
                                while (1)
                                  {
                                    {
                                      logical(kind=4) D.5912;

                                      sum = 0.0;
                                      {
                                        integer(kind=4) M.613;
                                        integer(kind=4) D.5905;
                                        integer(kind=4) D.5906;

                                        M.613 = i;
                                        if (j > M.613)
                                          {
                                            M.613 = j;
                                          }
                                        D.5905 = M.613;
                                        D.5906 = fin;
                                        k = D.5905;
                                        if (k <= D.5906)
                                          {
                                            while (1)
                                              {
                                                {
                                                  logical(kind=4) D.5910;

                                                  sum = (*vh)[(((integer(kind=8)) s * stride.603 + offset.604) + (integer(kind=8)) (*occ)[(integer(kind=8)) k + -1] * stride.601) + (integer(kind=8)) (*occ)[(integer(kind=8)) i + -1]] * (*vh)[(((integer(kind=8)) s * stride.603 + offset.604) + (integer(kind=8)) (*occ)[(integer(kind=8)) k + -1] * stride.601) + (integer(kind=8)) (*occ)[(integer(kind=8)) j + -1]] + sum;
                                                  __label_000050:;
                                                  L.240:;
                                                  D.5910 = k == D.5906;
                                                  k = k + 1;
                                                  if (D.5910) goto L.241;
                                                }
                                              }
                                          }
                                        L.241:;
                                      }
                                      (*vi)[(((integer(kind=8)) s * stride.610 + offset.611) + (integer(kind=8)) (*occ)[(integer(kind=8)) j + -1] * stride.608) + (integer(kind=8)) (*occ)[(integer(kind=8)) i + -1]] = sum;
                                      __label_000100:;
                                      L.238:;
                                      D.5912 = j == D.5901;
                                      j = j + 1;
                                      if (D.5912) goto L.239;
                                    }
                                  }
                              }
                            L.239:;
                          }
                          __label_000200:;
                          L.236:;
                          D.5914 = i == D.5897;
                          i = i + 1;
                          if (D.5914) goto L.237;
                        }
                      }
                  }
                L.237:;
              }
              __label_000300:;
              L.234:;
              D.5916 = s == D.5893;
              s = s + 1;
              if (D.5916) goto L.235;
            }
          }
      }
    L.235:;
  }
  return;
}


bkv (integer(kind=4) & restrict nmax, integer(kind=4) & restrict m, real(kind=8)[0:D.5982] * restrict v, integer(kind=4) & restrict ntot, integer(kind=4)[0:D.5979] * restrict occ, integer(kind=4)[0:D.5988] * restrict ist, integer(kind=4)[0:D.5985] * restrict ifin)
{
  integer(kind=4) fin;
  integer(kind=4) i;
  integer(kind=8) ubound.614;
  integer(kind=8) size.615;
  integer(kind=8) ubound.616;
  integer(kind=8) size.617;
  integer(kind=4) j;
  integer(kind=4) k;
  integer(kind=8) ubound.618;
  integer(kind=8) size.619;
  integer(kind=4) s;
  integer(kind=4) st;
  real(kind=8) sum;
  integer(kind=8) ubound.620;
  integer(kind=8) ubound.621;
  integer(kind=8) stride.622;
  integer(kind=8) ubound.623;
  integer(kind=8) stride.624;
  integer(kind=8) offset.625;
  integer(kind=8) size.626;
  integer(kind=8) D.5979;
  bitsizetype D.5980;
  sizetype D.5981;
  integer(kind=8) D.5982;
  bitsizetype D.5983;
  sizetype D.5984;
  integer(kind=8) D.5985;
  bitsizetype D.5986;
  sizetype D.5987;
  integer(kind=8) D.5988;
  bitsizetype D.5989;
  sizetype D.5990;

  ubound.616 = (integer(kind=8)) *m;
  size.617 = NON_LVALUE_EXPR <ubound.616>;
  size.617 = MAX_EXPR <size.617, 0>;
  D.5988 = size.617 + -1;
  D.5989 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.617> * 32;
  D.5990 = (sizetype) NON_LVALUE_EXPR <size.617> * 4;
  ubound.614 = (integer(kind=8)) *m;
  size.615 = NON_LVALUE_EXPR <ubound.614>;
  size.615 = MAX_EXPR <size.615, 0>;
  D.5985 = size.615 + -1;
  D.5986 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.615> * 32;
  D.5987 = (sizetype) NON_LVALUE_EXPR <size.615> * 4;
  ubound.620 = (integer(kind=8)) *nmax;
  stride.622 = NON_LVALUE_EXPR <ubound.620>;
  stride.622 = MAX_EXPR <stride.622, 0>;
  ubound.621 = (integer(kind=8)) *nmax;
  stride.624 = stride.622 * NON_LVALUE_EXPR <ubound.621>;
  stride.624 = MAX_EXPR <stride.624, 0>;
  ubound.623 = (integer(kind=8)) *m;
  size.626 = stride.624 * NON_LVALUE_EXPR <ubound.623>;
  size.626 = MAX_EXPR <size.626, 0>;
  D.5982 = size.626 + -1;
  D.5983 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.626> * 64;
  D.5984 = (sizetype) NON_LVALUE_EXPR <size.626> * 8;
  offset.625 = ~NON_LVALUE_EXPR <stride.622> - NON_LVALUE_EXPR <stride.624>;
  ubound.618 = (integer(kind=8)) *ntot;
  size.619 = NON_LVALUE_EXPR <ubound.618>;
  size.619 = MAX_EXPR <size.619, 0>;
  D.5979 = size.619 + -1;
  D.5980 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.619> * 32;
  D.5981 = (sizetype) NON_LVALUE_EXPR <size.619> * 4;
  {
    integer(kind=4) D.5956;

    D.5956 = *m;
    s = 1;
    if (s <= D.5956)
      {
        while (1)
          {
            {
              logical(kind=4) D.5978;

              st = (*ist)[(integer(kind=8)) s + -1];
              fin = (*ifin)[(integer(kind=8)) s + -1];
              (*v)[(((integer(kind=8)) s * stride.624 + offset.625) + (integer(kind=8)) (*occ)[(integer(kind=8)) st + -1] * stride.622) + (integer(kind=8)) (*occ)[(integer(kind=8)) st + -1]] = 1.0e+0 / (*v)[(((integer(kind=8)) s * stride.624 + offset.625) + (integer(kind=8)) (*occ)[(integer(kind=8)) st + -1] * stride.622) + (integer(kind=8)) (*occ)[(integer(kind=8)) st + -1]];
              {
                integer(kind=4) D.5959;
                integer(kind=4) D.5960;

                D.5959 = st + 1;
                D.5960 = fin;
                k = D.5959;
                if (k <= D.5960)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.5976;

                          (*v)[(((integer(kind=8)) s * stride.624 + offset.625) + (integer(kind=8)) (*occ)[(integer(kind=8)) k + -1] * stride.622) + (integer(kind=8)) (*occ)[(integer(kind=8)) k + -1]] = 1.0e+0 / (*v)[(((integer(kind=8)) s * stride.624 + offset.625) + (integer(kind=8)) (*occ)[(integer(kind=8)) k + -1] * stride.622) + (integer(kind=8)) (*occ)[(integer(kind=8)) k + -1]];
                          {
                            integer(kind=4) D.5963;
                            integer(kind=4) D.5964;

                            D.5963 = st;
                            D.5964 = k + -1;
                            j = D.5963;
                            if (j <= D.5964)
                              {
                                while (1)
                                  {
                                    {
                                      logical(kind=4) D.5974;

                                      sum = 0.0;
                                      {
                                        integer(kind=4) D.5967;
                                        integer(kind=4) D.5968;

                                        D.5967 = j;
                                        D.5968 = k + -1;
                                        i = D.5967;
                                        if (i <= D.5968)
                                          {
                                            while (1)
                                              {
                                                {
                                                  logical(kind=4) D.5972;

                                                  sum = (*v)[(((integer(kind=8)) s * stride.624 + offset.625) + (integer(kind=8)) (*occ)[(integer(kind=8)) i + -1] * stride.622) + (integer(kind=8)) (*occ)[(integer(kind=8)) j + -1]] * (*v)[(((integer(kind=8)) s * stride.624 + offset.625) + (integer(kind=8)) (*occ)[(integer(kind=8)) k + -1] * stride.622) + (integer(kind=8)) (*occ)[(integer(kind=8)) i + -1]] + sum;
                                                  __label_000003:;
                                                  L.248:;
                                                  D.5972 = i == D.5968;
                                                  i = i + 1;
                                                  if (D.5972) goto L.249;
                                                }
                                              }
                                          }
                                        L.249:;
                                      }
                                      (*v)[(((integer(kind=8)) s * stride.624 + offset.625) + (integer(kind=8)) (*occ)[(integer(kind=8)) k + -1] * stride.622) + (integer(kind=8)) (*occ)[(integer(kind=8)) j + -1]] = -((*v)[(((integer(kind=8)) s * stride.624 + offset.625) + (integer(kind=8)) (*occ)[(integer(kind=8)) k + -1] * stride.622) + (integer(kind=8)) (*occ)[(integer(kind=8)) k + -1]] * sum);
                                      __label_000005:;
                                      L.246:;
                                      D.5974 = j == D.5964;
                                      j = j + 1;
                                      if (D.5974) goto L.247;
                                    }
                                  }
                              }
                            L.247:;
                          }
                          __label_000010:;
                          L.244:;
                          D.5976 = k == D.5960;
                          k = k + 1;
                          if (D.5976) goto L.245;
                        }
                      }
                  }
                L.245:;
              }
              __label_000100:;
              L.242:;
              D.5978 = s == D.5956;
              s = s + 1;
              if (D.5978) goto L.243;
            }
          }
      }
    L.243:;
  }
  return;
}


mkv (integer(kind=4) & restrict m, integer(kind=4) & restrict nmax, real(kind=8)[0:D.6034] * restrict vmax, integer(kind=4) & restrict ntot, integer(kind=4)[0:D.6037] * restrict occ, integer(kind=4)[0:D.6046] * restrict ist, integer(kind=4)[0:D.6043] * restrict ifin, real(kind=8)[0:D.6040] * restrict v)
{
  integer(kind=4) i;
  integer(kind=8) ubound.627;
  integer(kind=8) size.628;
  integer(kind=8) ubound.629;
  integer(kind=8) size.630;
  integer(kind=4) j;
  integer(kind=8) ubound.631;
  integer(kind=8) size.632;
  integer(kind=4) s;
  integer(kind=8) ubound.633;
  integer(kind=8) ubound.634;
  integer(kind=8) stride.635;
  integer(kind=8) ubound.636;
  integer(kind=8) stride.637;
  integer(kind=8) offset.638;
  integer(kind=8) size.639;
  integer(kind=8) ubound.640;
  integer(kind=8) ubound.641;
  integer(kind=8) stride.642;
  integer(kind=8) offset.643;
  integer(kind=8) size.644;
  integer(kind=8) D.6034;
  bitsizetype D.6035;
  sizetype D.6036;
  integer(kind=8) D.6037;
  bitsizetype D.6038;
  sizetype D.6039;
  integer(kind=8) D.6040;
  bitsizetype D.6041;
  sizetype D.6042;
  integer(kind=8) D.6043;
  bitsizetype D.6044;
  sizetype D.6045;
  integer(kind=8) D.6046;
  bitsizetype D.6047;
  sizetype D.6048;

  ubound.629 = (integer(kind=8)) *m;
  size.630 = NON_LVALUE_EXPR <ubound.629>;
  size.630 = MAX_EXPR <size.630, 0>;
  D.6046 = size.630 + -1;
  D.6047 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.630> * 32;
  D.6048 = (sizetype) NON_LVALUE_EXPR <size.630> * 4;
  ubound.627 = (integer(kind=8)) *m;
  size.628 = NON_LVALUE_EXPR <ubound.627>;
  size.628 = MAX_EXPR <size.628, 0>;
  D.6043 = size.628 + -1;
  D.6044 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.628> * 32;
  D.6045 = (sizetype) NON_LVALUE_EXPR <size.628> * 4;
  ubound.633 = (integer(kind=8)) *nmax;
  stride.635 = NON_LVALUE_EXPR <ubound.633>;
  stride.635 = MAX_EXPR <stride.635, 0>;
  ubound.634 = (integer(kind=8)) *nmax;
  stride.637 = stride.635 * NON_LVALUE_EXPR <ubound.634>;
  stride.637 = MAX_EXPR <stride.637, 0>;
  ubound.636 = (integer(kind=8)) *m;
  size.639 = stride.637 * NON_LVALUE_EXPR <ubound.636>;
  size.639 = MAX_EXPR <size.639, 0>;
  D.6040 = size.639 + -1;
  D.6041 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.639> * 64;
  D.6042 = (sizetype) NON_LVALUE_EXPR <size.639> * 8;
  offset.638 = ~NON_LVALUE_EXPR <stride.635> - NON_LVALUE_EXPR <stride.637>;
  ubound.631 = (integer(kind=8)) *ntot;
  size.632 = NON_LVALUE_EXPR <ubound.631>;
  size.632 = MAX_EXPR <size.632, 0>;
  D.6037 = size.632 + -1;
  D.6038 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.632> * 32;
  D.6039 = (sizetype) NON_LVALUE_EXPR <size.632> * 4;
  ubound.640 = (integer(kind=8)) *nmax;
  stride.642 = NON_LVALUE_EXPR <ubound.640>;
  stride.642 = MAX_EXPR <stride.642, 0>;
  ubound.641 = (integer(kind=8)) *nmax;
  size.644 = stride.642 * NON_LVALUE_EXPR <ubound.641>;
  size.644 = MAX_EXPR <size.644, 0>;
  D.6034 = size.644 + -1;
  D.6035 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.644> * 64;
  D.6036 = (sizetype) NON_LVALUE_EXPR <size.644> * 8;
  offset.643 = ~NON_LVALUE_EXPR <stride.642>;
  {
    integer(kind=4) D.6017;

    D.6017 = *m;
    s = 1;
    if (s <= D.6017)
      {
        while (1)
          {
            {
              logical(kind=4) D.6033;

              {
                integer(kind=4) D.6020;
                integer(kind=4) D.6021;

                D.6020 = (*ist)[(integer(kind=8)) s + -1];
                D.6021 = (*ifin)[(integer(kind=8)) s + -1];
                i = D.6020;
                if (i <= D.6021)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.6031;

                          {
                            integer(kind=4) D.6024;
                            integer(kind=4) D.6025;

                            D.6024 = i;
                            D.6025 = (*ifin)[(integer(kind=8)) s + -1];
                            j = D.6024;
                            if (j <= D.6025)
                              {
                                while (1)
                                  {
                                    {
                                      logical(kind=4) D.6029;

                                      (*v)[(((integer(kind=8)) s * stride.637 + offset.638) + (integer(kind=8)) (*occ)[(integer(kind=8)) j + -1] * stride.635) + (integer(kind=8)) (*occ)[(integer(kind=8)) i + -1]] = (*vmax)[((integer(kind=8)) (*occ)[(integer(kind=8)) j + -1] * stride.642 + offset.643) + (integer(kind=8)) (*occ)[(integer(kind=8)) i + -1]];
                                      __label_000080:;
                                      L.254:;
                                      D.6029 = j == D.6025;
                                      j = j + 1;
                                      if (D.6029) goto L.255;
                                    }
                                  }
                              }
                            L.255:;
                          }
                          __label_000090:;
                          L.252:;
                          D.6031 = i == D.6021;
                          i = i + 1;
                          if (D.6031) goto L.253;
                        }
                      }
                  }
                L.253:;
              }
              __label_000100:;
              L.250:;
              D.6033 = s == D.6017;
              s = s + 1;
              if (D.6033) goto L.251;
            }
          }
      }
    L.251:;
  }
  return;
}


istfin (integer(kind=4) & restrict ntot, integer(kind=4)[0:D.6078] * restrict subj, integer(kind=4) & restrict m, integer(kind=4)[0:D.6075] * restrict ist, integer(kind=4)[0:D.6072] * restrict ifin)
{
  integer(kind=4) i;
  integer(kind=4) icur;
  integer(kind=8) ubound.645;
  integer(kind=8) size.646;
  integer(kind=8) ubound.647;
  integer(kind=8) size.648;
  integer(kind=4) scur;
  integer(kind=8) ubound.649;
  integer(kind=8) size.650;
  integer(kind=8) D.6072;
  bitsizetype D.6073;
  sizetype D.6074;
  integer(kind=8) D.6075;
  bitsizetype D.6076;
  sizetype D.6077;
  integer(kind=8) D.6078;
  bitsizetype D.6079;
  sizetype D.6080;

  ubound.649 = (integer(kind=8)) *ntot;
  size.650 = NON_LVALUE_EXPR <ubound.649>;
  size.650 = MAX_EXPR <size.650, 0>;
  D.6078 = size.650 + -1;
  D.6079 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.650> * 32;
  D.6080 = (sizetype) NON_LVALUE_EXPR <size.650> * 4;
  ubound.647 = (integer(kind=8)) *m;
  size.648 = NON_LVALUE_EXPR <ubound.647>;
  size.648 = MAX_EXPR <size.648, 0>;
  D.6075 = size.648 + -1;
  D.6076 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.648> * 32;
  D.6077 = (sizetype) NON_LVALUE_EXPR <size.648> * 4;
  ubound.645 = (integer(kind=8)) *m;
  size.646 = NON_LVALUE_EXPR <ubound.645>;
  size.646 = MAX_EXPR <size.646, 0>;
  D.6072 = size.646 + -1;
  D.6073 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.646> * 32;
  D.6074 = (sizetype) NON_LVALUE_EXPR <size.646> * 4;
  scur = -999;
  icur = 0;
  {
    integer(kind=4) D.6061;

    D.6061 = *ntot;
    i = 1;
    if (i <= D.6061)
      {
        while (1)
          {
            {
              logical(kind=4) D.6066;

              if ((*subj)[(integer(kind=8)) i + -1] != scur)
                {
                  icur = icur + 1;
                  (*ist)[(integer(kind=8)) icur + -1] = i;
                  scur = (*subj)[(integer(kind=8)) i + -1];
                }
              L.258:;
              __label_000100:;
              L.256:;
              D.6066 = i == D.6061;
              i = i + 1;
              if (D.6066) goto L.257;
            }
          }
      }
    L.257:;
  }
  {
    integer(kind=4) D.6067;

    D.6067 = *m + -1;
    i = 1;
    if (i <= D.6067)
      {
        while (1)
          {
            {
              logical(kind=4) D.6071;

              (*ifin)[(integer(kind=8)) i + -1] = (*ist)[(integer(kind=8)) (i + 1) + -1] + -1;
              __label_000200:;
              L.259:;
              D.6071 = i == D.6067;
              i = i + 1;
              if (D.6071) goto L.260;
            }
          }
      }
    L.260:;
  }
  (*ifin)[(integer(kind=8)) *m + -1] = *ntot;
  return;
}


rangen (integer(kind=4) & restrict init)
{
  static integer(kind=4) a = 16807;
  static integer(kind=4) b15 = 32768;
  static integer(kind=4) b16 = 65536;
  integer(kind=4) fhi;
  static integer(kind=4) ix;
  integer(kind=4) k;
  integer(kind=4) leftflo;
  static integer(kind=4) p = 2147483647;
  integer(kind=4) xalo;
  integer(kind=4) xhi;
  real(kind=4) __result_rangen;

  if (*init != 0)
    {
      ix = *init;
    }
  L.261:;
  xhi = ix / b16;
  xalo = (ix - xhi * b16) * a;
  leftflo = xalo / b16;
  fhi = xhi * a + leftflo;
  k = fhi / b15;
  ix = (((xalo - leftflo * b16) - p) + (fhi - k * b15) * b16) + k;
  if (ix < 0)
    {
      ix = ix + p;
    }
  L.262:;
  __result_rangen = (real(kind=4)) ix * 4.656612873077392578125e-10;
  return __result_rangen;
  return __result_rangen;
}


store (integer(kind=4) & restrict iter, integer(kind=4) & restrict it, integer(kind=4) & restrict p, integer(kind=4) & restrict r, real(kind=8)[0:D.6196] * restrict beta, integer(kind=4) & restrict q, real(kind=8)[0:D.6190] * restrict psi, real(kind=8)[0:D.6184] * restrict sigma, real(kind=8)[0:D.6199] * restrict betas, real(kind=8)[0:D.6187] * restrict sigmas, real(kind=8)[0:D.6193] * restrict psis)
{
  integer(kind=8) ubound.651;
  integer(kind=8) ubound.652;
  integer(kind=8) stride.653;
  integer(kind=8) offset.654;
  integer(kind=8) size.655;
  integer(kind=8) ubound.656;
  integer(kind=8) ubound.657;
  integer(kind=8) stride.658;
  integer(kind=8) ubound.659;
  integer(kind=8) stride.660;
  integer(kind=8) offset.661;
  integer(kind=8) size.662;
  integer(kind=4) i;
  integer(kind=4) j;
  integer(kind=8) ubound.663;
  integer(kind=8) ubound.664;
  integer(kind=8) stride.665;
  integer(kind=8) offset.666;
  integer(kind=8) size.667;
  integer(kind=8) ubound.668;
  integer(kind=8) ubound.669;
  integer(kind=8) stride.670;
  integer(kind=8) ubound.671;
  integer(kind=8) stride.672;
  integer(kind=8) offset.673;
  integer(kind=8) size.674;
  integer(kind=8) ubound.675;
  integer(kind=8) ubound.676;
  integer(kind=8) stride.677;
  integer(kind=8) offset.678;
  integer(kind=8) size.679;
  integer(kind=8) ubound.680;
  integer(kind=8) ubound.681;
  integer(kind=8) stride.682;
  integer(kind=8) ubound.683;
  integer(kind=8) stride.684;
  integer(kind=8) offset.685;
  integer(kind=8) size.686;
  integer(kind=8) D.6184;
  bitsizetype D.6185;
  sizetype D.6186;
  integer(kind=8) D.6187;
  bitsizetype D.6188;
  sizetype D.6189;
  integer(kind=8) D.6190;
  bitsizetype D.6191;
  sizetype D.6192;
  integer(kind=8) D.6193;
  bitsizetype D.6194;
  sizetype D.6195;
  integer(kind=8) D.6196;
  bitsizetype D.6197;
  sizetype D.6198;
  integer(kind=8) D.6199;
  bitsizetype D.6200;
  sizetype D.6201;

  ubound.656 = (integer(kind=8)) *p;
  stride.658 = NON_LVALUE_EXPR <ubound.656>;
  stride.658 = MAX_EXPR <stride.658, 0>;
  ubound.657 = (integer(kind=8)) *r;
  stride.660 = stride.658 * NON_LVALUE_EXPR <ubound.657>;
  stride.660 = MAX_EXPR <stride.660, 0>;
  ubound.659 = (integer(kind=8)) *iter;
  size.662 = stride.660 * NON_LVALUE_EXPR <ubound.659>;
  size.662 = MAX_EXPR <size.662, 0>;
  D.6199 = size.662 + -1;
  D.6200 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.662> * 64;
  D.6201 = (sizetype) NON_LVALUE_EXPR <size.662> * 8;
  offset.661 = ~NON_LVALUE_EXPR <stride.658> - NON_LVALUE_EXPR <stride.660>;
  ubound.651 = (integer(kind=8)) *p;
  stride.653 = NON_LVALUE_EXPR <ubound.651>;
  stride.653 = MAX_EXPR <stride.653, 0>;
  ubound.652 = (integer(kind=8)) *r;
  size.655 = stride.653 * NON_LVALUE_EXPR <ubound.652>;
  size.655 = MAX_EXPR <size.655, 0>;
  D.6196 = size.655 + -1;
  D.6197 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.655> * 64;
  D.6198 = (sizetype) NON_LVALUE_EXPR <size.655> * 8;
  offset.654 = ~NON_LVALUE_EXPR <stride.653>;
  ubound.668 = (integer(kind=8)) (*r * *q);
  stride.670 = NON_LVALUE_EXPR <ubound.668>;
  stride.670 = MAX_EXPR <stride.670, 0>;
  ubound.669 = (integer(kind=8)) (*r * *q);
  stride.672 = stride.670 * NON_LVALUE_EXPR <ubound.669>;
  stride.672 = MAX_EXPR <stride.672, 0>;
  ubound.671 = (integer(kind=8)) *iter;
  size.674 = stride.672 * NON_LVALUE_EXPR <ubound.671>;
  size.674 = MAX_EXPR <size.674, 0>;
  D.6193 = size.674 + -1;
  D.6194 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.674> * 64;
  D.6195 = (sizetype) NON_LVALUE_EXPR <size.674> * 8;
  offset.673 = ~NON_LVALUE_EXPR <stride.670> - NON_LVALUE_EXPR <stride.672>;
  ubound.663 = (integer(kind=8)) (*r * *q);
  stride.665 = NON_LVALUE_EXPR <ubound.663>;
  stride.665 = MAX_EXPR <stride.665, 0>;
  ubound.664 = (integer(kind=8)) (*r * *q);
  size.667 = stride.665 * NON_LVALUE_EXPR <ubound.664>;
  size.667 = MAX_EXPR <size.667, 0>;
  D.6190 = size.667 + -1;
  D.6191 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.667> * 64;
  D.6192 = (sizetype) NON_LVALUE_EXPR <size.667> * 8;
  offset.666 = ~NON_LVALUE_EXPR <stride.665>;
  ubound.680 = (integer(kind=8)) *r;
  stride.682 = NON_LVALUE_EXPR <ubound.680>;
  stride.682 = MAX_EXPR <stride.682, 0>;
  ubound.681 = (integer(kind=8)) *r;
  stride.684 = stride.682 * NON_LVALUE_EXPR <ubound.681>;
  stride.684 = MAX_EXPR <stride.684, 0>;
  ubound.683 = (integer(kind=8)) *iter;
  size.686 = stride.684 * NON_LVALUE_EXPR <ubound.683>;
  size.686 = MAX_EXPR <size.686, 0>;
  D.6187 = size.686 + -1;
  D.6188 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.686> * 64;
  D.6189 = (sizetype) NON_LVALUE_EXPR <size.686> * 8;
  offset.685 = ~NON_LVALUE_EXPR <stride.682> - NON_LVALUE_EXPR <stride.684>;
  ubound.675 = (integer(kind=8)) *r;
  stride.677 = NON_LVALUE_EXPR <ubound.675>;
  stride.677 = MAX_EXPR <stride.677, 0>;
  ubound.676 = (integer(kind=8)) *r;
  size.679 = stride.677 * NON_LVALUE_EXPR <ubound.676>;
  size.679 = MAX_EXPR <size.679, 0>;
  D.6184 = size.679 + -1;
  D.6185 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.679> * 64;
  D.6186 = (sizetype) NON_LVALUE_EXPR <size.679> * 8;
  offset.678 = ~NON_LVALUE_EXPR <stride.677>;
  {
    integer(kind=4) D.6154;

    D.6154 = *r;
    j = 1;
    if (j <= D.6154)
      {
        while (1)
          {
            {
              logical(kind=4) D.6163;

              {
                integer(kind=4) D.6157;

                D.6157 = *p;
                i = 1;
                if (i <= D.6157)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.6161;

                          (*betas)[(((integer(kind=8)) *it * stride.660 + offset.661) + (integer(kind=8)) j * stride.658) + (integer(kind=8)) i] = (*beta)[((integer(kind=8)) j * stride.653 + offset.654) + (integer(kind=8)) i];
                          __label_000005:;
                          L.265:;
                          D.6161 = i == D.6157;
                          i = i + 1;
                          if (D.6161) goto L.266;
                        }
                      }
                  }
                L.266:;
              }
              __label_000010:;
              L.263:;
              D.6163 = j == D.6154;
              j = j + 1;
              if (D.6163) goto L.264;
            }
          }
      }
    L.264:;
  }
  {
    integer(kind=4) D.6164;

    D.6164 = *r * *q;
    j = 1;
    if (j <= D.6164)
      {
        while (1)
          {
            {
              logical(kind=4) D.6173;

              {
                integer(kind=4) D.6167;

                D.6167 = *r * *q;
                i = 1;
                if (i <= D.6167)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.6171;

                          (*psis)[(((integer(kind=8)) *it * stride.672 + offset.673) + (integer(kind=8)) j * stride.670) + (integer(kind=8)) i] = (*psi)[((integer(kind=8)) j * stride.665 + offset.666) + (integer(kind=8)) i];
                          __label_000015:;
                          L.269:;
                          D.6171 = i == D.6167;
                          i = i + 1;
                          if (D.6171) goto L.270;
                        }
                      }
                  }
                L.270:;
              }
              __label_000020:;
              L.267:;
              D.6173 = j == D.6164;
              j = j + 1;
              if (D.6173) goto L.268;
            }
          }
      }
    L.268:;
  }
  {
    integer(kind=4) D.6174;

    D.6174 = *r;
    j = 1;
    if (j <= D.6174)
      {
        while (1)
          {
            {
              logical(kind=4) D.6183;

              {
                integer(kind=4) D.6177;

                D.6177 = *r;
                i = 1;
                if (i <= D.6177)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.6181;

                          (*sigmas)[(((integer(kind=8)) *it * stride.684 + offset.685) + (integer(kind=8)) j * stride.682) + (integer(kind=8)) i] = (*sigma)[((integer(kind=8)) j * stride.677 + offset.678) + (integer(kind=8)) i];
                          __label_000025:;
                          L.273:;
                          D.6181 = i == D.6177;
                          i = i + 1;
                          if (D.6181) goto L.274;
                        }
                      }
                  }
                L.274:;
              }
              __label_000030:;
              L.271:;
              D.6183 = j == D.6174;
              j = j + 1;
              if (D.6183) goto L.272;
            }
          }
      }
    L.272:;
  }
  return;
}


mky (integer(kind=4) & restrict ntot, integer(kind=4) & restrict r, integer(kind=4) & restrict pcol, real(kind=8)[0:D.6356] * restrict pred, real(kind=8)[0:D.6338] * restrict delta, real(kind=8)[0:D.6341] * restrict y, integer(kind=4) & restrict p, integer(kind=4)[0:D.6353] * restrict xcol, integer(kind=4) & restrict q, integer(kind=4)[0:D.6347] * restrict zcol, real(kind=8)[0:D.6350] * restrict beta, integer(kind=4) & restrict m, real(kind=8)[0:D.6344] * restrict b, integer(kind=4)[0:D.6365] * restrict ist, integer(kind=4)[0:D.6362] * restrict ifin, integer(kind=4) & restrict npatt, integer(kind=4)[0:D.6335] * restrict rmat, integer(kind=4)[0:D.6359] * restrict patt)
{
  integer(kind=8) ubound.687;
  integer(kind=8) ubound.688;
  integer(kind=8) stride.689;
  integer(kind=8) ubound.690;
  integer(kind=8) stride.691;
  integer(kind=8) offset.692;
  integer(kind=8) size.693;
  integer(kind=8) ubound.694;
  integer(kind=8) ubound.695;
  integer(kind=8) stride.696;
  integer(kind=8) offset.697;
  integer(kind=8) size.698;
  integer(kind=8) ubound.699;
  integer(kind=8) ubound.700;
  integer(kind=8) stride.701;
  integer(kind=8) offset.702;
  integer(kind=8) size.703;
  integer(kind=4) fin;
  integer(kind=4) i;
  integer(kind=8) ubound.704;
  integer(kind=8) size.705;
  integer(kind=8) ubound.706;
  integer(kind=8) size.707;
  integer(kind=4) j;
  integer(kind=4) k;
  integer(kind=8) ubound.708;
  integer(kind=8) size.709;
  integer(kind=8) ubound.710;
  integer(kind=8) ubound.711;
  integer(kind=8) stride.712;
  integer(kind=8) offset.713;
  integer(kind=8) size.714;
  integer(kind=8) ubound.715;
  integer(kind=8) ubound.716;
  integer(kind=8) stride.717;
  integer(kind=8) offset.718;
  integer(kind=8) size.719;
  integer(kind=4) s;
  integer(kind=4) st;
  real(kind=8) sum;
  integer(kind=8) ubound.720;
  integer(kind=8) size.721;
  integer(kind=8) ubound.722;
  integer(kind=8) ubound.723;
  integer(kind=8) stride.724;
  integer(kind=8) offset.725;
  integer(kind=8) size.726;
  integer(kind=8) ubound.727;
  integer(kind=8) size.728;
  integer(kind=8) D.6335;
  bitsizetype D.6336;
  sizetype D.6337;
  integer(kind=8) D.6338;
  bitsizetype D.6339;
  sizetype D.6340;
  integer(kind=8) D.6341;
  bitsizetype D.6342;
  sizetype D.6343;
  integer(kind=8) D.6344;
  bitsizetype D.6345;
  sizetype D.6346;
  integer(kind=8) D.6347;
  bitsizetype D.6348;
  sizetype D.6349;
  integer(kind=8) D.6350;
  bitsizetype D.6351;
  sizetype D.6352;
  integer(kind=8) D.6353;
  bitsizetype D.6354;
  sizetype D.6355;
  integer(kind=8) D.6356;
  bitsizetype D.6357;
  sizetype D.6358;
  integer(kind=8) D.6359;
  bitsizetype D.6360;
  sizetype D.6361;
  integer(kind=8) D.6362;
  bitsizetype D.6363;
  sizetype D.6364;
  integer(kind=8) D.6365;
  bitsizetype D.6366;
  sizetype D.6367;

  ubound.706 = (integer(kind=8)) *m;
  size.707 = NON_LVALUE_EXPR <ubound.706>;
  size.707 = MAX_EXPR <size.707, 0>;
  D.6365 = size.707 + -1;
  D.6366 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.707> * 32;
  D.6367 = (sizetype) NON_LVALUE_EXPR <size.707> * 4;
  ubound.704 = (integer(kind=8)) *m;
  size.705 = NON_LVALUE_EXPR <ubound.704>;
  size.705 = MAX_EXPR <size.705, 0>;
  D.6362 = size.705 + -1;
  D.6363 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.705> * 32;
  D.6364 = (sizetype) NON_LVALUE_EXPR <size.705> * 4;
  ubound.708 = (integer(kind=8)) *ntot;
  size.709 = NON_LVALUE_EXPR <ubound.708>;
  size.709 = MAX_EXPR <size.709, 0>;
  D.6359 = size.709 + -1;
  D.6360 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.709> * 32;
  D.6361 = (sizetype) NON_LVALUE_EXPR <size.709> * 4;
  ubound.710 = (integer(kind=8)) *ntot;
  stride.712 = NON_LVALUE_EXPR <ubound.710>;
  stride.712 = MAX_EXPR <stride.712, 0>;
  ubound.711 = (integer(kind=8)) *pcol;
  size.714 = stride.712 * NON_LVALUE_EXPR <ubound.711>;
  size.714 = MAX_EXPR <size.714, 0>;
  D.6356 = size.714 + -1;
  D.6357 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.714> * 64;
  D.6358 = (sizetype) NON_LVALUE_EXPR <size.714> * 8;
  offset.713 = ~NON_LVALUE_EXPR <stride.712>;
  ubound.720 = (integer(kind=8)) *p;
  size.721 = NON_LVALUE_EXPR <ubound.720>;
  size.721 = MAX_EXPR <size.721, 0>;
  D.6353 = size.721 + -1;
  D.6354 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.721> * 32;
  D.6355 = (sizetype) NON_LVALUE_EXPR <size.721> * 4;
  ubound.694 = (integer(kind=8)) *p;
  stride.696 = NON_LVALUE_EXPR <ubound.694>;
  stride.696 = MAX_EXPR <stride.696, 0>;
  ubound.695 = (integer(kind=8)) *r;
  size.698 = stride.696 * NON_LVALUE_EXPR <ubound.695>;
  size.698 = MAX_EXPR <size.698, 0>;
  D.6350 = size.698 + -1;
  D.6351 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.698> * 64;
  D.6352 = (sizetype) NON_LVALUE_EXPR <size.698> * 8;
  offset.697 = ~NON_LVALUE_EXPR <stride.696>;
  ubound.727 = (integer(kind=8)) *q;
  size.728 = NON_LVALUE_EXPR <ubound.727>;
  size.728 = MAX_EXPR <size.728, 0>;
  D.6347 = size.728 + -1;
  D.6348 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.728> * 32;
  D.6349 = (sizetype) NON_LVALUE_EXPR <size.728> * 4;
  ubound.687 = (integer(kind=8)) *q;
  stride.689 = NON_LVALUE_EXPR <ubound.687>;
  stride.689 = MAX_EXPR <stride.689, 0>;
  ubound.688 = (integer(kind=8)) *r;
  stride.691 = stride.689 * NON_LVALUE_EXPR <ubound.688>;
  stride.691 = MAX_EXPR <stride.691, 0>;
  ubound.690 = (integer(kind=8)) *m;
  size.693 = stride.691 * NON_LVALUE_EXPR <ubound.690>;
  size.693 = MAX_EXPR <size.693, 0>;
  D.6344 = size.693 + -1;
  D.6345 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.693> * 64;
  D.6346 = (sizetype) NON_LVALUE_EXPR <size.693> * 8;
  offset.692 = ~NON_LVALUE_EXPR <stride.689> - NON_LVALUE_EXPR <stride.691>;
  ubound.722 = (integer(kind=8)) *ntot;
  stride.724 = NON_LVALUE_EXPR <ubound.722>;
  stride.724 = MAX_EXPR <stride.724, 0>;
  ubound.723 = (integer(kind=8)) *r;
  size.726 = stride.724 * NON_LVALUE_EXPR <ubound.723>;
  size.726 = MAX_EXPR <size.726, 0>;
  D.6341 = size.726 + -1;
  D.6342 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.726> * 64;
  D.6343 = (sizetype) NON_LVALUE_EXPR <size.726> * 8;
  offset.725 = ~NON_LVALUE_EXPR <stride.724>;
  ubound.699 = (integer(kind=8)) *ntot;
  stride.701 = NON_LVALUE_EXPR <ubound.699>;
  stride.701 = MAX_EXPR <stride.701, 0>;
  ubound.700 = (integer(kind=8)) *r;
  size.703 = stride.701 * NON_LVALUE_EXPR <ubound.700>;
  size.703 = MAX_EXPR <size.703, 0>;
  D.6338 = size.703 + -1;
  D.6339 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.703> * 64;
  D.6340 = (sizetype) NON_LVALUE_EXPR <size.703> * 8;
  offset.702 = ~NON_LVALUE_EXPR <stride.701>;
  ubound.715 = (integer(kind=8)) *npatt;
  stride.717 = NON_LVALUE_EXPR <ubound.715>;
  stride.717 = MAX_EXPR <stride.717, 0>;
  ubound.716 = (integer(kind=8)) *r;
  size.719 = stride.717 * NON_LVALUE_EXPR <ubound.716>;
  size.719 = MAX_EXPR <size.719, 0>;
  D.6335 = size.719 + -1;
  D.6336 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.719> * 32;
  D.6337 = (sizetype) NON_LVALUE_EXPR <size.719> * 4;
  offset.718 = ~NON_LVALUE_EXPR <stride.717>;
  {
    integer(kind=4) D.6292;

    D.6292 = *m;
    s = 1;
    if (s <= D.6292)
      {
        while (1)
          {
            {
              logical(kind=4) D.6334;

              st = (*ist)[(integer(kind=8)) s + -1];
              fin = (*ifin)[(integer(kind=8)) s + -1];
              {
                integer(kind=4) D.6295;
                integer(kind=4) D.6296;

                D.6295 = st;
                D.6296 = fin;
                i = D.6295;
                if (i <= D.6296)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.6332;

                          if ((*patt)[(integer(kind=8)) i + -1] == 0)
                            {
                              {
                                integer(kind=4) D.6300;

                                D.6300 = *r;
                                j = 1;
                                if (j <= D.6300)
                                  {
                                    while (1)
                                      {
                                        {
                                          logical(kind=4) D.6314;

                                          sum = 0.0;
                                          {
                                            integer(kind=4) D.6303;

                                            D.6303 = *p;
                                            k = 1;
                                            if (k <= D.6303)
                                              {
                                                while (1)
                                                  {
                                                    {
                                                      logical(kind=4) D.6307;

                                                      sum = (*pred)[((integer(kind=8)) (*xcol)[(integer(kind=8)) k + -1] * stride.712 + offset.713) + (integer(kind=8)) i] * (*beta)[((integer(kind=8)) j * stride.696 + offset.697) + (integer(kind=8)) k] + sum;
                                                      __label_000010:;
                                                      L.282:;
                                                      D.6307 = k == D.6303;
                                                      k = k + 1;
                                                      if (D.6307) goto L.283;
                                                    }
                                                  }
                                              }
                                            L.283:;
                                          }
                                          {
                                            integer(kind=4) D.6308;

                                            D.6308 = *q;
                                            k = 1;
                                            if (k <= D.6308)
                                              {
                                                while (1)
                                                  {
                                                    {
                                                      logical(kind=4) D.6312;

                                                      sum = (*pred)[((integer(kind=8)) (*zcol)[(integer(kind=8)) k + -1] * stride.712 + offset.713) + (integer(kind=8)) i] * (*b)[(((integer(kind=8)) s * stride.691 + offset.692) + (integer(kind=8)) j * stride.689) + (integer(kind=8)) k] + sum;
                                                      __label_000015:;
                                                      L.284:;
                                                      D.6312 = k == D.6308;
                                                      k = k + 1;
                                                      if (D.6312) goto L.285;
                                                    }
                                                  }
                                              }
                                            L.285:;
                                          }
                                          (*y)[((integer(kind=8)) j * stride.724 + offset.725) + (integer(kind=8)) i] = (*delta)[((integer(kind=8)) j * stride.701 + offset.702) + (integer(kind=8)) i] + sum;
                                          __label_000020:;
                                          L.280:;
                                          D.6314 = j == D.6300;
                                          j = j + 1;
                                          if (D.6314) goto L.281;
                                        }
                                      }
                                  }
                                L.281:;
                              }
                            }
                          else
                            {
                              {
                                integer(kind=4) D.6315;

                                D.6315 = *r;
                                j = 1;
                                if (j <= D.6315)
                                  {
                                    while (1)
                                      {
                                        {
                                          logical(kind=4) D.6330;

                                          if ((*rmat)[((integer(kind=8)) j * stride.717 + offset.718) + (integer(kind=8)) (*patt)[(integer(kind=8)) i + -1]] == 0)
                                            {
                                              sum = 0.0;
                                              {
                                                integer(kind=4) D.6319;

                                                D.6319 = *p;
                                                k = 1;
                                                if (k <= D.6319)
                                                  {
                                                    while (1)
                                                      {
                                                        {
                                                          logical(kind=4) D.6323;

                                                          sum = (*pred)[((integer(kind=8)) (*xcol)[(integer(kind=8)) k + -1] * stride.712 + offset.713) + (integer(kind=8)) i] * (*beta)[((integer(kind=8)) j * stride.696 + offset.697) + (integer(kind=8)) k] + sum;
                                                          __label_000040:;
                                                          L.289:;
                                                          D.6323 = k == D.6319;
                                                          k = k + 1;
                                                          if (D.6323) goto L.290;
                                                        }
                                                      }
                                                  }
                                                L.290:;
                                              }
                                              {
                                                integer(kind=4) D.6324;

                                                D.6324 = *q;
                                                k = 1;
                                                if (k <= D.6324)
                                                  {
                                                    while (1)
                                                      {
                                                        {
                                                          logical(kind=4) D.6328;

                                                          sum = (*pred)[((integer(kind=8)) (*zcol)[(integer(kind=8)) k + -1] * stride.712 + offset.713) + (integer(kind=8)) i] * (*b)[(((integer(kind=8)) s * stride.691 + offset.692) + (integer(kind=8)) j * stride.689) + (integer(kind=8)) k] + sum;
                                                          __label_000050:;
                                                          L.291:;
                                                          D.6328 = k == D.6324;
                                                          k = k + 1;
                                                          if (D.6328) goto L.292;
                                                        }
                                                      }
                                                  }
                                                L.292:;
                                              }
                                              (*y)[((integer(kind=8)) j * stride.724 + offset.725) + (integer(kind=8)) i] = (*delta)[((integer(kind=8)) j * stride.701 + offset.702) + (integer(kind=8)) i] + sum;
                                            }
                                          L.288:;
                                          __label_000085:;
                                          L.286:;
                                          D.6330 = j == D.6315;
                                          j = j + 1;
                                          if (D.6330) goto L.287;
                                        }
                                      }
                                  }
                                L.287:;
                              }
                            }
                          L.279:;
                          __label_000090:;
                          L.277:;
                          D.6332 = i == D.6296;
                          i = i + 1;
                          if (D.6332) goto L.278;
                        }
                      }
                  }
                L.278:;
              }
              __label_000100:;
              L.275:;
              D.6334 = s == D.6292;
              s = s + 1;
              if (D.6334) goto L.276;
            }
          }
      }
    L.276:;
  }
  return;
}


dreps (integer(kind=4) & restrict loc, integer(kind=4) & restrict lmc, integer(kind=4)[0:D.6587] * restrict oc, integer(kind=4)[0:D.6590] * restrict mc, integer(kind=4) & restrict lwkr, real(kind=8)[0:D.6602] * restrict wkr, integer(kind=4) & restrict ntot, integer(kind=4)[0:D.6596] * restrict iposn, integer(kind=4) & restrict npatt, integer(kind=4)[0:D.6611] * restrict pstfin, integer(kind=4) & restrict r, integer(kind=4)[0:D.6593] * restrict rmat, real(kind=8)[0:D.6599] * restrict delta, real(kind=8)[0:D.6605] * restrict sigma, real(kind=8)[0:D.6608] * restrict wkrr1, real(kind=8)[0:D.6584] * restrict wkrr2)
{
  integer(kind=8) ubound.729;
  integer(kind=8) ubound.730;
  integer(kind=8) stride.731;
  integer(kind=8) offset.732;
  integer(kind=8) size.733;
  integer(kind=4) i;
  integer(kind=8) ubound.734;
  integer(kind=8) size.735;
  integer(kind=4) j;
  integer(kind=4) k;
  integer(kind=8) ubound.736;
  integer(kind=8) size.737;
  integer(kind=4) nmc;
  integer(kind=4) noc;
  integer(kind=8) ubound.738;
  integer(kind=8) size.739;
  integer(kind=8) ubound.740;
  integer(kind=8) stride.741;
  integer(kind=8) offset.742;
  integer(kind=8) size.743;
  integer(kind=4) pt;
  integer(kind=8) ubound.744;
  integer(kind=8) ubound.745;
  integer(kind=8) stride.746;
  integer(kind=8) offset.747;
  integer(kind=8) size.748;
  integer(kind=8) ubound.749;
  integer(kind=8) ubound.750;
  integer(kind=8) stride.751;
  integer(kind=8) offset.752;
  integer(kind=8) size.753;
  real(kind=8) sum;
  integer(kind=8) ubound.754;
  integer(kind=8) size.755;
  integer(kind=8) ubound.756;
  integer(kind=8) ubound.757;
  integer(kind=8) stride.758;
  integer(kind=8) offset.759;
  integer(kind=8) size.760;
  integer(kind=8) ubound.761;
  integer(kind=8) ubound.762;
  integer(kind=8) stride.763;
  integer(kind=8) offset.764;
  integer(kind=8) size.765;
  integer(kind=8) D.6584;
  bitsizetype D.6585;
  sizetype D.6586;
  integer(kind=8) D.6587;
  bitsizetype D.6588;
  sizetype D.6589;
  integer(kind=8) D.6590;
  bitsizetype D.6591;
  sizetype D.6592;
  integer(kind=8) D.6593;
  bitsizetype D.6594;
  sizetype D.6595;
  integer(kind=8) D.6596;
  bitsizetype D.6597;
  sizetype D.6598;
  integer(kind=8) D.6599;
  bitsizetype D.6600;
  sizetype D.6601;
  integer(kind=8) D.6602;
  bitsizetype D.6603;
  sizetype D.6604;
  integer(kind=8) D.6605;
  bitsizetype D.6606;
  sizetype D.6607;
  integer(kind=8) D.6608;
  bitsizetype D.6609;
  sizetype D.6610;
  integer(kind=8) D.6611;
  bitsizetype D.6612;
  sizetype D.6613;

  ubound.740 = (integer(kind=8)) *npatt;
  stride.741 = NON_LVALUE_EXPR <ubound.740>;
  stride.741 = MAX_EXPR <stride.741, 0>;
  size.743 = stride.741 * 2;
  size.743 = MAX_EXPR <size.743, 0>;
  D.6611 = size.743 + -1;
  D.6612 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.743> * 32;
  D.6613 = (sizetype) NON_LVALUE_EXPR <size.743> * 4;
  offset.742 = ~NON_LVALUE_EXPR <stride.741>;
  ubound.756 = (integer(kind=8)) *r;
  stride.758 = NON_LVALUE_EXPR <ubound.756>;
  stride.758 = MAX_EXPR <stride.758, 0>;
  ubound.757 = (integer(kind=8)) *r;
  size.760 = stride.758 * NON_LVALUE_EXPR <ubound.757>;
  size.760 = MAX_EXPR <size.760, 0>;
  D.6608 = size.760 + -1;
  D.6609 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.760> * 64;
  D.6610 = (sizetype) NON_LVALUE_EXPR <size.760> * 8;
  offset.759 = ~NON_LVALUE_EXPR <stride.758>;
  ubound.749 = (integer(kind=8)) *r;
  stride.751 = NON_LVALUE_EXPR <ubound.749>;
  stride.751 = MAX_EXPR <stride.751, 0>;
  ubound.750 = (integer(kind=8)) *r;
  size.753 = stride.751 * NON_LVALUE_EXPR <ubound.750>;
  size.753 = MAX_EXPR <size.753, 0>;
  D.6605 = size.753 + -1;
  D.6606 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.753> * 64;
  D.6607 = (sizetype) NON_LVALUE_EXPR <size.753> * 8;
  offset.752 = ~NON_LVALUE_EXPR <stride.751>;
  ubound.754 = (integer(kind=8)) *lwkr;
  size.755 = NON_LVALUE_EXPR <ubound.754>;
  size.755 = MAX_EXPR <size.755, 0>;
  D.6602 = size.755 + -1;
  D.6603 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.755> * 64;
  D.6604 = (sizetype) NON_LVALUE_EXPR <size.755> * 8;
  ubound.729 = (integer(kind=8)) *ntot;
  stride.731 = NON_LVALUE_EXPR <ubound.729>;
  stride.731 = MAX_EXPR <stride.731, 0>;
  ubound.730 = (integer(kind=8)) *r;
  size.733 = stride.731 * NON_LVALUE_EXPR <ubound.730>;
  size.733 = MAX_EXPR <size.733, 0>;
  D.6599 = size.733 + -1;
  D.6600 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.733> * 64;
  D.6601 = (sizetype) NON_LVALUE_EXPR <size.733> * 8;
  offset.732 = ~NON_LVALUE_EXPR <stride.731>;
  ubound.734 = (integer(kind=8)) *ntot;
  size.735 = NON_LVALUE_EXPR <ubound.734>;
  size.735 = MAX_EXPR <size.735, 0>;
  D.6596 = size.735 + -1;
  D.6597 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.735> * 32;
  D.6598 = (sizetype) NON_LVALUE_EXPR <size.735> * 4;
  ubound.744 = (integer(kind=8)) *npatt;
  stride.746 = NON_LVALUE_EXPR <ubound.744>;
  stride.746 = MAX_EXPR <stride.746, 0>;
  ubound.745 = (integer(kind=8)) *r;
  size.748 = stride.746 * NON_LVALUE_EXPR <ubound.745>;
  size.748 = MAX_EXPR <size.748, 0>;
  D.6593 = size.748 + -1;
  D.6594 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.748> * 32;
  D.6595 = (sizetype) NON_LVALUE_EXPR <size.748> * 4;
  offset.747 = ~NON_LVALUE_EXPR <stride.746>;
  ubound.736 = (integer(kind=8)) *lmc;
  size.737 = NON_LVALUE_EXPR <ubound.736>;
  size.737 = MAX_EXPR <size.737, 0>;
  D.6590 = size.737 + -1;
  D.6591 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.737> * 32;
  D.6592 = (sizetype) NON_LVALUE_EXPR <size.737> * 4;
  ubound.738 = (integer(kind=8)) *loc;
  size.739 = NON_LVALUE_EXPR <ubound.738>;
  size.739 = MAX_EXPR <size.739, 0>;
  D.6587 = size.739 + -1;
  D.6588 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.739> * 32;
  D.6589 = (sizetype) NON_LVALUE_EXPR <size.739> * 4;
  ubound.761 = (integer(kind=8)) *r;
  stride.763 = NON_LVALUE_EXPR <ubound.761>;
  stride.763 = MAX_EXPR <stride.763, 0>;
  ubound.762 = (integer(kind=8)) *r;
  size.765 = stride.763 * NON_LVALUE_EXPR <ubound.762>;
  size.765 = MAX_EXPR <size.765, 0>;
  D.6584 = size.765 + -1;
  D.6585 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.765> * 64;
  D.6586 = (sizetype) NON_LVALUE_EXPR <size.765> * 8;
  offset.764 = ~NON_LVALUE_EXPR <stride.763>;
  if ((*pstfin)[(offset.742 + NON_LVALUE_EXPR <stride.741>) + 1] != 1)
    {
      {
        integer(kind=4) D.6449;

        D.6449 = *r;
        i = 1;
        if (i <= D.6449)
          {
            while (1)
              {
                {
                  logical(kind=4) D.6459;

                  {
                    integer(kind=4) D.6452;
                    integer(kind=4) D.6453;

                    D.6452 = i;
                    D.6453 = *r;
                    j = D.6452;
                    if (j <= D.6453)
                      {
                        while (1)
                          {
                            {
                              logical(kind=4) D.6457;

                              (*wkrr1)[((integer(kind=8)) j * stride.758 + offset.759) + (integer(kind=8)) i] = (*sigma)[((integer(kind=8)) j * stride.751 + offset.752) + (integer(kind=8)) i];
                              __label_000004:;
                              L.296:;
                              D.6457 = j == D.6453;
                              j = j + 1;
                              if (D.6457) goto L.297;
                            }
                          }
                      }
                    L.297:;
                  }
                  __label_000005:;
                  L.294:;
                  D.6459 = i == D.6449;
                  i = i + 1;
                  if (D.6459) goto L.295;
                }
              }
          }
        L.295:;
      }
      chfc ((integer(kind=4) *) r, (integer(kind=4) *) r, wkrr1);
      {
        integer(kind=4) D.6460;

        D.6460 = (*pstfin)[(offset.742 + NON_LVALUE_EXPR <stride.741>) + 1] + -1;
        i = 1;
        if (i <= D.6460)
          {
            while (1)
              {
                {
                  logical(kind=4) D.6486;

                  {
                    integer(kind=4) D.6463;

                    D.6463 = *r;
                    j = 1;
                    if (j <= D.6463)
                      {
                        while (1)
                          {
                            {
                              logical(kind=4) D.6469;

                              (*wkr)[(integer(kind=8)) j + -1] = (real(kind=8)) gauss ();
                              __label_000010:;
                              L.300:;
                              D.6469 = j == D.6463;
                              j = j + 1;
                              if (D.6469) goto L.301;
                            }
                          }
                      }
                    L.301:;
                  }
                  {
                    integer(kind=4) D.6470;

                    D.6470 = *r;
                    j = D.6470;
                    if (j > 0)
                      {
                        while (1)
                          {
                            {
                              logical(kind=4) D.6479;

                              sum = 0.0;
                              {
                                integer(kind=4) D.6473;

                                D.6473 = j;
                                k = 1;
                                if (k <= D.6473)
                                  {
                                    while (1)
                                      {
                                        {
                                          logical(kind=4) D.6477;

                                          sum = (*wkrr1)[((integer(kind=8)) j * stride.758 + offset.759) + (integer(kind=8)) k] * (*wkr)[(integer(kind=8)) k + -1] + sum;
                                          __label_000040:;
                                          L.304:;
                                          D.6477 = k == D.6473;
                                          k = k + 1;
                                          if (D.6477) goto L.305;
                                        }
                                      }
                                  }
                                L.305:;
                              }
                              (*wkr)[(integer(kind=8)) j + -1] = sum;
                              __label_000050:;
                              L.302:;
                              D.6479 = j == 1;
                              j = j + -1;
                              if (D.6479) goto L.303;
                            }
                          }
                      }
                    L.303:;
                  }
                  {
                    integer(kind=4) D.6480;

                    D.6480 = *r;
                    j = 1;
                    if (j <= D.6480)
                      {
                        while (1)
                          {
                            {
                              logical(kind=4) D.6484;

                              (*delta)[((integer(kind=8)) j * stride.731 + offset.732) + (integer(kind=8)) (*iposn)[(integer(kind=8)) i + -1]] = (*wkr)[(integer(kind=8)) j + -1];
                              __label_000070:;
                              L.306:;
                              D.6484 = j == D.6480;
                              j = j + 1;
                              if (D.6484) goto L.307;
                            }
                          }
                      }
                    L.307:;
                  }
                  __label_000100:;
                  L.298:;
                  D.6486 = i == D.6460;
                  i = i + 1;
                  if (D.6486) goto L.299;
                }
              }
          }
        L.299:;
      }
    }
  L.293:;
  {
    integer(kind=4) D.6487;

    D.6487 = *r;
    i = 1;
    if (i <= D.6487)
      {
        while (1)
          {
            {
              logical(kind=4) D.6497;

              {
                integer(kind=4) D.6490;
                integer(kind=4) D.6491;

                D.6490 = i;
                D.6491 = *r;
                j = D.6490;
                if (j <= D.6491)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.6495;

                          (*wkrr1)[((integer(kind=8)) j * stride.758 + offset.759) + (integer(kind=8)) i] = (*sigma)[((integer(kind=8)) j * stride.751 + offset.752) + (integer(kind=8)) i];
                          __label_000105:;
                          L.310:;
                          D.6495 = j == D.6491;
                          j = j + 1;
                          if (D.6495) goto L.311;
                        }
                      }
                  }
                L.311:;
              }
              __label_000110:;
              L.308:;
              D.6497 = i == D.6487;
              i = i + 1;
              if (D.6497) goto L.309;
            }
          }
      }
    L.309:;
  }
  {
    integer(kind=4) D.6498;

    D.6498 = *npatt;
    pt = 1;
    if (pt <= D.6498)
      {
        while (1)
          {
            {
              logical(kind=4) D.6583;

              swpobs ((integer(kind=4) *) r, wkrr1, (integer(kind=4) *) npatt, rmat, &pt);
              {
                integer(kind=4) D.6508;

                D.6508 = *r;
                i = 1;
                if (i <= D.6508)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.6518;

                          {
                            integer(kind=4) D.6511;
                            integer(kind=4) D.6512;

                            D.6511 = i + 1;
                            D.6512 = *r;
                            j = D.6511;
                            if (j <= D.6512)
                              {
                                while (1)
                                  {
                                    {
                                      logical(kind=4) D.6516;

                                      (*wkrr1)[((integer(kind=8)) i * stride.758 + offset.759) + (integer(kind=8)) j] = (*wkrr1)[((integer(kind=8)) j * stride.758 + offset.759) + (integer(kind=8)) i];
                                      __label_000119:;
                                      L.316:;
                                      D.6516 = j == D.6512;
                                      j = j + 1;
                                      if (D.6516) goto L.317;
                                    }
                                  }
                              }
                            L.317:;
                          }
                          __label_000120:;
                          L.314:;
                          D.6518 = i == D.6508;
                          i = i + 1;
                          if (D.6518) goto L.315;
                        }
                      }
                  }
                L.315:;
              }
              getmc ((integer(kind=4) *) r, (integer(kind=4) *) npatt, rmat, &pt, (integer(kind=4) *) lmc, mc, &nmc);
              getoc ((integer(kind=4) *) r, (integer(kind=4) *) npatt, rmat, &pt, (integer(kind=4) *) loc, oc, &noc);
              chsub ((integer(kind=4) *) r, wkrr1, (integer(kind=4) *) lmc, mc, &nmc, wkrr2);
              {
                integer(kind=4) D.6551;
                integer(kind=4) D.6552;

                D.6551 = (*pstfin)[(offset.742 + NON_LVALUE_EXPR <stride.741>) + (integer(kind=8)) pt];
                D.6552 = (*pstfin)[(stride.741 * 2 + offset.742) + (integer(kind=8)) pt];
                i = D.6551;
                if (i <= D.6552)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.6581;

                          {
                            integer(kind=4) D.6555;

                            D.6555 = nmc;
                            j = 1;
                            if (j <= D.6555)
                              {
                                while (1)
                                  {
                                    {
                                      logical(kind=4) D.6559;

                                      (*wkr)[(integer(kind=8)) j + -1] = (real(kind=8)) gauss ();
                                      __label_000150:;
                                      L.320:;
                                      D.6559 = j == D.6555;
                                      j = j + 1;
                                      if (D.6559) goto L.321;
                                    }
                                  }
                              }
                            L.321:;
                          }
                          {
                            integer(kind=4) D.6560;

                            D.6560 = nmc;
                            j = D.6560;
                            if (j > 0)
                              {
                                while (1)
                                  {
                                    {
                                      logical(kind=4) D.6569;

                                      sum = 0.0;
                                      {
                                        integer(kind=4) D.6563;

                                        D.6563 = j;
                                        k = 1;
                                        if (k <= D.6563)
                                          {
                                            while (1)
                                              {
                                                {
                                                  logical(kind=4) D.6567;

                                                  sum = (*wkrr2)[((integer(kind=8)) j * stride.763 + offset.764) + (integer(kind=8)) k] * (*wkr)[(integer(kind=8)) k + -1] + sum;
                                                  __label_000190:;
                                                  L.324:;
                                                  D.6567 = k == D.6563;
                                                  k = k + 1;
                                                  if (D.6567) goto L.325;
                                                }
                                              }
                                          }
                                        L.325:;
                                      }
                                      (*wkr)[(integer(kind=8)) j + -1] = sum;
                                      __label_000200:;
                                      L.322:;
                                      D.6569 = j == 1;
                                      j = j + -1;
                                      if (D.6569) goto L.323;
                                    }
                                  }
                              }
                            L.323:;
                          }
                          {
                            integer(kind=4) D.6570;

                            D.6570 = nmc;
                            j = 1;
                            if (j <= D.6570)
                              {
                                while (1)
                                  {
                                    {
                                      logical(kind=4) D.6579;

                                      sum = 0.0;
                                      {
                                        integer(kind=4) D.6573;

                                        D.6573 = noc;
                                        k = 1;
                                        if (k <= D.6573)
                                          {
                                            while (1)
                                              {
                                                {
                                                  logical(kind=4) D.6577;

                                                  sum = (*wkrr1)[((integer(kind=8)) (*mc)[(integer(kind=8)) j + -1] * stride.758 + offset.759) + (integer(kind=8)) (*oc)[(integer(kind=8)) k + -1]] * (*delta)[((integer(kind=8)) (*oc)[(integer(kind=8)) k + -1] * stride.731 + offset.732) + (integer(kind=8)) (*iposn)[(integer(kind=8)) i + -1]] + sum;
                                                  __label_000210:;
                                                  L.328:;
                                                  D.6577 = k == D.6573;
                                                  k = k + 1;
                                                  if (D.6577) goto L.329;
                                                }
                                              }
                                          }
                                        L.329:;
                                      }
                                      (*delta)[((integer(kind=8)) (*mc)[(integer(kind=8)) j + -1] * stride.731 + offset.732) + (integer(kind=8)) (*iposn)[(integer(kind=8)) i + -1]] = (*wkr)[(integer(kind=8)) j + -1] + sum;
                                      __label_000300:;
                                      L.326:;
                                      D.6579 = j == D.6570;
                                      j = j + 1;
                                      if (D.6579) goto L.327;
                                    }
                                  }
                              }
                            L.327:;
                          }
                          __label_000450:;
                          L.318:;
                          D.6581 = i == D.6552;
                          i = i + 1;
                          if (D.6581) goto L.319;
                        }
                      }
                  }
                L.319:;
              }
              __label_000500:;
              L.312:;
              D.6583 = pt == D.6498;
              pt = pt + 1;
              if (D.6583) goto L.313;
            }
          }
      }
    L.313:;
  }
  return;
}


mkeps1 (integer(kind=4) & restrict ntot, integer(kind=4) & restrict r, real(kind=8)[0:D.6680] * restrict y, integer(kind=4) & restrict pcol, real(kind=8)[0:D.6692] * restrict pred, integer(kind=4) & restrict p, integer(kind=4)[0:D.6689] * restrict xcol, real(kind=8)[0:D.6686] * restrict beta, real(kind=8)[0:D.6683] * restrict eps, integer(kind=4)[0:D.6695] * restrict patt)
{
  integer(kind=8) ubound.766;
  integer(kind=8) ubound.767;
  integer(kind=8) stride.768;
  integer(kind=8) offset.769;
  integer(kind=8) size.770;
  integer(kind=8) ubound.771;
  integer(kind=8) ubound.772;
  integer(kind=8) stride.773;
  integer(kind=8) offset.774;
  integer(kind=8) size.775;
  integer(kind=4) i;
  integer(kind=4) j;
  integer(kind=4) k;
  integer(kind=8) ubound.776;
  integer(kind=8) size.777;
  integer(kind=8) ubound.778;
  integer(kind=8) ubound.779;
  integer(kind=8) stride.780;
  integer(kind=8) offset.781;
  integer(kind=8) size.782;
  real(kind=8) sum;
  integer(kind=8) ubound.783;
  integer(kind=8) size.784;
  integer(kind=8) ubound.785;
  integer(kind=8) ubound.786;
  integer(kind=8) stride.787;
  integer(kind=8) offset.788;
  integer(kind=8) size.789;
  integer(kind=8) D.6680;
  bitsizetype D.6681;
  sizetype D.6682;
  integer(kind=8) D.6683;
  bitsizetype D.6684;
  sizetype D.6685;
  integer(kind=8) D.6686;
  bitsizetype D.6687;
  sizetype D.6688;
  integer(kind=8) D.6689;
  bitsizetype D.6690;
  sizetype D.6691;
  integer(kind=8) D.6692;
  bitsizetype D.6693;
  sizetype D.6694;
  integer(kind=8) D.6695;
  bitsizetype D.6696;
  sizetype D.6697;

  ubound.776 = (integer(kind=8)) *ntot;
  size.777 = NON_LVALUE_EXPR <ubound.776>;
  size.777 = MAX_EXPR <size.777, 0>;
  D.6695 = size.777 + -1;
  D.6696 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.777> * 32;
  D.6697 = (sizetype) NON_LVALUE_EXPR <size.777> * 4;
  ubound.778 = (integer(kind=8)) *ntot;
  stride.780 = NON_LVALUE_EXPR <ubound.778>;
  stride.780 = MAX_EXPR <stride.780, 0>;
  ubound.779 = (integer(kind=8)) *pcol;
  size.782 = stride.780 * NON_LVALUE_EXPR <ubound.779>;
  size.782 = MAX_EXPR <size.782, 0>;
  D.6692 = size.782 + -1;
  D.6693 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.782> * 64;
  D.6694 = (sizetype) NON_LVALUE_EXPR <size.782> * 8;
  offset.781 = ~NON_LVALUE_EXPR <stride.780>;
  ubound.783 = (integer(kind=8)) *p;
  size.784 = NON_LVALUE_EXPR <ubound.783>;
  size.784 = MAX_EXPR <size.784, 0>;
  D.6689 = size.784 + -1;
  D.6690 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.784> * 32;
  D.6691 = (sizetype) NON_LVALUE_EXPR <size.784> * 4;
  ubound.766 = (integer(kind=8)) *p;
  stride.768 = NON_LVALUE_EXPR <ubound.766>;
  stride.768 = MAX_EXPR <stride.768, 0>;
  ubound.767 = (integer(kind=8)) *r;
  size.770 = stride.768 * NON_LVALUE_EXPR <ubound.767>;
  size.770 = MAX_EXPR <size.770, 0>;
  D.6686 = size.770 + -1;
  D.6687 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.770> * 64;
  D.6688 = (sizetype) NON_LVALUE_EXPR <size.770> * 8;
  offset.769 = ~NON_LVALUE_EXPR <stride.768>;
  ubound.771 = (integer(kind=8)) *ntot;
  stride.773 = NON_LVALUE_EXPR <ubound.771>;
  stride.773 = MAX_EXPR <stride.773, 0>;
  ubound.772 = (integer(kind=8)) *r;
  size.775 = stride.773 * NON_LVALUE_EXPR <ubound.772>;
  size.775 = MAX_EXPR <size.775, 0>;
  D.6683 = size.775 + -1;
  D.6684 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.775> * 64;
  D.6685 = (sizetype) NON_LVALUE_EXPR <size.775> * 8;
  offset.774 = ~NON_LVALUE_EXPR <stride.773>;
  ubound.785 = (integer(kind=8)) *ntot;
  stride.787 = NON_LVALUE_EXPR <ubound.785>;
  stride.787 = MAX_EXPR <stride.787, 0>;
  ubound.786 = (integer(kind=8)) *r;
  size.789 = stride.787 * NON_LVALUE_EXPR <ubound.786>;
  size.789 = MAX_EXPR <size.789, 0>;
  D.6680 = size.789 + -1;
  D.6681 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.789> * 64;
  D.6682 = (sizetype) NON_LVALUE_EXPR <size.789> * 8;
  offset.788 = ~NON_LVALUE_EXPR <stride.787>;
  {
    integer(kind=4) D.6664;

    D.6664 = *ntot;
    i = 1;
    if (i <= D.6664)
      {
        while (1)
          {
            {
              logical(kind=4) D.6679;

              if ((*patt)[(integer(kind=8)) i + -1] != 0)
                {
                  {
                    integer(kind=4) D.6668;

                    D.6668 = *r;
                    j = 1;
                    if (j <= D.6668)
                      {
                        while (1)
                          {
                            {
                              logical(kind=4) D.6677;

                              sum = 0.0;
                              {
                                integer(kind=4) D.6671;

                                D.6671 = *p;
                                k = 1;
                                if (k <= D.6671)
                                  {
                                    while (1)
                                      {
                                        {
                                          logical(kind=4) D.6675;

                                          sum = (*pred)[((integer(kind=8)) (*xcol)[(integer(kind=8)) k + -1] * stride.780 + offset.781) + (integer(kind=8)) i] * (*beta)[((integer(kind=8)) j * stride.768 + offset.769) + (integer(kind=8)) k] + sum;
                                          __label_000080:;
                                          L.335:;
                                          D.6675 = k == D.6671;
                                          k = k + 1;
                                          if (D.6675) goto L.336;
                                        }
                                      }
                                  }
                                L.336:;
                              }
                              (*eps)[((integer(kind=8)) j * stride.773 + offset.774) + (integer(kind=8)) i] = (*y)[((integer(kind=8)) j * stride.787 + offset.788) + (integer(kind=8)) i] - sum;
                              __label_000090:;
                              L.333:;
                              D.6677 = j == D.6668;
                              j = j + 1;
                              if (D.6677) goto L.334;
                            }
                          }
                      }
                    L.334:;
                  }
                }
              L.332:;
              __label_000100:;
              L.330:;
              D.6679 = i == D.6664;
              i = i + 1;
              if (D.6679) goto L.331;
            }
          }
      }
    L.331:;
  }
  return;
}


drbeta (integer(kind=4) & restrict r, real(kind=8)[0:D.6822] * restrict sigma, real(kind=8)[0:D.6816] * restrict xtxinv, integer(kind=4) & restrict p, real(kind=8)[0:D.6810] * restrict beta, real(kind=8)[0:D.6825] * restrict wkrr1, real(kind=8)[0:D.6819] * restrict wkpp, real(kind=8)[0:D.6813] * restrict wkpr)
{
  integer(kind=8) ubound.790;
  integer(kind=8) ubound.791;
  integer(kind=8) stride.792;
  integer(kind=8) offset.793;
  integer(kind=8) size.794;
  integer(kind=4) i;
  integer(kind=4) j;
  integer(kind=4) k;
  integer(kind=8) ubound.795;
  integer(kind=8) ubound.796;
  integer(kind=8) stride.797;
  integer(kind=8) offset.798;
  integer(kind=8) size.799;
  real(kind=8) sum;
  integer(kind=8) ubound.800;
  integer(kind=8) ubound.801;
  integer(kind=8) stride.802;
  integer(kind=8) offset.803;
  integer(kind=8) size.804;
  integer(kind=8) ubound.805;
  integer(kind=8) ubound.806;
  integer(kind=8) stride.807;
  integer(kind=8) offset.808;
  integer(kind=8) size.809;
  integer(kind=8) ubound.810;
  integer(kind=8) ubound.811;
  integer(kind=8) stride.812;
  integer(kind=8) offset.813;
  integer(kind=8) size.814;
  integer(kind=8) ubound.815;
  integer(kind=8) ubound.816;
  integer(kind=8) stride.817;
  integer(kind=8) offset.818;
  integer(kind=8) size.819;
  integer(kind=8) D.6810;
  bitsizetype D.6811;
  sizetype D.6812;
  integer(kind=8) D.6813;
  bitsizetype D.6814;
  sizetype D.6815;
  integer(kind=8) D.6816;
  bitsizetype D.6817;
  sizetype D.6818;
  integer(kind=8) D.6819;
  bitsizetype D.6820;
  sizetype D.6821;
  integer(kind=8) D.6822;
  bitsizetype D.6823;
  sizetype D.6824;
  integer(kind=8) D.6825;
  bitsizetype D.6826;
  sizetype D.6827;

  ubound.810 = (integer(kind=8)) *r;
  stride.812 = NON_LVALUE_EXPR <ubound.810>;
  stride.812 = MAX_EXPR <stride.812, 0>;
  ubound.811 = (integer(kind=8)) *r;
  size.814 = stride.812 * NON_LVALUE_EXPR <ubound.811>;
  size.814 = MAX_EXPR <size.814, 0>;
  D.6825 = size.814 + -1;
  D.6826 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.814> * 64;
  D.6827 = (sizetype) NON_LVALUE_EXPR <size.814> * 8;
  offset.813 = ~NON_LVALUE_EXPR <stride.812>;
  ubound.795 = (integer(kind=8)) *r;
  stride.797 = NON_LVALUE_EXPR <ubound.795>;
  stride.797 = MAX_EXPR <stride.797, 0>;
  ubound.796 = (integer(kind=8)) *r;
  size.799 = stride.797 * NON_LVALUE_EXPR <ubound.796>;
  size.799 = MAX_EXPR <size.799, 0>;
  D.6822 = size.799 + -1;
  D.6823 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.799> * 64;
  D.6824 = (sizetype) NON_LVALUE_EXPR <size.799> * 8;
  offset.798 = ~NON_LVALUE_EXPR <stride.797>;
  ubound.800 = (integer(kind=8)) *p;
  stride.802 = NON_LVALUE_EXPR <ubound.800>;
  stride.802 = MAX_EXPR <stride.802, 0>;
  ubound.801 = (integer(kind=8)) *p;
  size.804 = stride.802 * NON_LVALUE_EXPR <ubound.801>;
  size.804 = MAX_EXPR <size.804, 0>;
  D.6819 = size.804 + -1;
  D.6820 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.804> * 64;
  D.6821 = (sizetype) NON_LVALUE_EXPR <size.804> * 8;
  offset.803 = ~NON_LVALUE_EXPR <stride.802>;
  ubound.815 = (integer(kind=8)) *p;
  stride.817 = NON_LVALUE_EXPR <ubound.815>;
  stride.817 = MAX_EXPR <stride.817, 0>;
  ubound.816 = (integer(kind=8)) *p;
  size.819 = stride.817 * NON_LVALUE_EXPR <ubound.816>;
  size.819 = MAX_EXPR <size.819, 0>;
  D.6816 = size.819 + -1;
  D.6817 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.819> * 64;
  D.6818 = (sizetype) NON_LVALUE_EXPR <size.819> * 8;
  offset.818 = ~NON_LVALUE_EXPR <stride.817>;
  ubound.805 = (integer(kind=8)) *p;
  stride.807 = NON_LVALUE_EXPR <ubound.805>;
  stride.807 = MAX_EXPR <stride.807, 0>;
  ubound.806 = (integer(kind=8)) *r;
  size.809 = stride.807 * NON_LVALUE_EXPR <ubound.806>;
  size.809 = MAX_EXPR <size.809, 0>;
  D.6813 = size.809 + -1;
  D.6814 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.809> * 64;
  D.6815 = (sizetype) NON_LVALUE_EXPR <size.809> * 8;
  offset.808 = ~NON_LVALUE_EXPR <stride.807>;
  ubound.790 = (integer(kind=8)) *p;
  stride.792 = NON_LVALUE_EXPR <ubound.790>;
  stride.792 = MAX_EXPR <stride.792, 0>;
  ubound.791 = (integer(kind=8)) *r;
  size.794 = stride.792 * NON_LVALUE_EXPR <ubound.791>;
  size.794 = MAX_EXPR <size.794, 0>;
  D.6810 = size.794 + -1;
  D.6811 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.794> * 64;
  D.6812 = (sizetype) NON_LVALUE_EXPR <size.794> * 8;
  offset.793 = ~NON_LVALUE_EXPR <stride.792>;
  {
    integer(kind=4) D.6748;

    D.6748 = *r;
    i = 1;
    if (i <= D.6748)
      {
        while (1)
          {
            {
              logical(kind=4) D.6758;

              {
                integer(kind=4) D.6751;
                integer(kind=4) D.6752;

                D.6751 = i;
                D.6752 = *r;
                j = D.6751;
                if (j <= D.6752)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.6756;

                          (*wkrr1)[((integer(kind=8)) j * stride.812 + offset.813) + (integer(kind=8)) i] = (*sigma)[((integer(kind=8)) j * stride.797 + offset.798) + (integer(kind=8)) i];
                          __label_000001:;
                          L.339:;
                          D.6756 = j == D.6752;
                          j = j + 1;
                          if (D.6756) goto L.340;
                        }
                      }
                  }
                L.340:;
              }
              __label_000002:;
              L.337:;
              D.6758 = i == D.6748;
              i = i + 1;
              if (D.6758) goto L.338;
            }
          }
      }
    L.338:;
  }
  {
    integer(kind=4) D.6759;

    D.6759 = *p;
    i = 1;
    if (i <= D.6759)
      {
        while (1)
          {
            {
              logical(kind=4) D.6769;

              {
                integer(kind=4) D.6762;
                integer(kind=4) D.6763;

                D.6762 = i;
                D.6763 = *p;
                j = D.6762;
                if (j <= D.6763)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.6767;

                          (*wkpp)[((integer(kind=8)) j * stride.802 + offset.803) + (integer(kind=8)) i] = (*xtxinv)[((integer(kind=8)) j * stride.817 + offset.818) + (integer(kind=8)) i];
                          __label_000004:;
                          L.343:;
                          D.6767 = j == D.6763;
                          j = j + 1;
                          if (D.6767) goto L.344;
                        }
                      }
                  }
                L.344:;
              }
              __label_000005:;
              L.341:;
              D.6769 = i == D.6759;
              i = i + 1;
              if (D.6769) goto L.342;
            }
          }
      }
    L.342:;
  }
  chfc ((integer(kind=4) *) r, (integer(kind=4) *) r, wkrr1);
  chfc ((integer(kind=4) *) p, (integer(kind=4) *) p, wkpp);
  {
    integer(kind=4) D.6770;

    D.6770 = *p;
    i = 1;
    if (i <= D.6770)
      {
        while (1)
          {
            {
              logical(kind=4) D.6779;

              {
                integer(kind=4) D.6773;

                D.6773 = *r;
                j = 1;
                if (j <= D.6773)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.6777;

                          (*wkpr)[((integer(kind=8)) j * stride.807 + offset.808) + (integer(kind=8)) i] = (real(kind=8)) gauss ();
                          __label_000009:;
                          L.347:;
                          D.6777 = j == D.6773;
                          j = j + 1;
                          if (D.6777) goto L.348;
                        }
                      }
                  }
                L.348:;
              }
              __label_000010:;
              L.345:;
              D.6779 = i == D.6770;
              i = i + 1;
              if (D.6779) goto L.346;
            }
          }
      }
    L.346:;
  }
  {
    integer(kind=4) D.6780;

    D.6780 = *r;
    j = 1;
    if (j <= D.6780)
      {
        while (1)
          {
            {
              logical(kind=4) D.6794;

              {
                integer(kind=4) D.6783;

                D.6783 = *p;
                i = D.6783;
                if (i > 0)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.6792;

                          sum = 0.0;
                          {
                            integer(kind=4) D.6786;

                            D.6786 = i;
                            k = 1;
                            if (k <= D.6786)
                              {
                                while (1)
                                  {
                                    {
                                      logical(kind=4) D.6790;

                                      sum = (*wkpp)[((integer(kind=8)) i * stride.802 + offset.803) + (integer(kind=8)) k] * (*wkpr)[((integer(kind=8)) j * stride.807 + offset.808) + (integer(kind=8)) k] + sum;
                                      __label_000070:;
                                      L.353:;
                                      D.6790 = k == D.6786;
                                      k = k + 1;
                                      if (D.6790) goto L.354;
                                    }
                                  }
                              }
                            L.354:;
                          }
                          (*wkpr)[((integer(kind=8)) j * stride.807 + offset.808) + (integer(kind=8)) i] = sum;
                          __label_000080:;
                          L.351:;
                          D.6792 = i == 1;
                          i = i + -1;
                          if (D.6792) goto L.352;
                        }
                      }
                  }
                L.352:;
              }
              __label_000100:;
              L.349:;
              D.6794 = j == D.6780;
              j = j + 1;
              if (D.6794) goto L.350;
            }
          }
      }
    L.350:;
  }
  {
    integer(kind=4) D.6795;

    D.6795 = *r;
    j = 1;
    if (j <= D.6795)
      {
        while (1)
          {
            {
              logical(kind=4) D.6809;

              {
                integer(kind=4) D.6798;

                D.6798 = j;
                i = 1;
                if (i <= D.6798)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.6807;

                          {
                            integer(kind=4) D.6801;

                            D.6801 = *p;
                            k = 1;
                            if (k <= D.6801)
                              {
                                while (1)
                                  {
                                    {
                                      logical(kind=4) D.6805;

                                      (*beta)[((integer(kind=8)) j * stride.792 + offset.793) + (integer(kind=8)) k] = (*beta)[((integer(kind=8)) j * stride.792 + offset.793) + (integer(kind=8)) k] + (*wkrr1)[((integer(kind=8)) j * stride.812 + offset.813) + (integer(kind=8)) i] * (*wkpr)[((integer(kind=8)) i * stride.807 + offset.808) + (integer(kind=8)) k];
                                      __label_000170:;
                                      L.359:;
                                      D.6805 = k == D.6801;
                                      k = k + 1;
                                      if (D.6805) goto L.360;
                                    }
                                  }
                              }
                            L.360:;
                          }
                          __label_000180:;
                          L.357:;
                          D.6807 = i == D.6798;
                          i = i + 1;
                          if (D.6807) goto L.358;
                        }
                      }
                  }
                L.358:;
              }
              __label_000200:;
              L.355:;
              D.6809 = j == D.6795;
              j = j + 1;
              if (D.6809) goto L.356;
            }
          }
      }
    L.356:;
  }
  return;
}


drsigma (integer(kind=4) & restrict ntot, integer(kind=4) & restrict r, real(kind=8)[0:D.6953] * restrict delta, integer(kind=4) & restrict nstar, real(kind=8)[0:D.6950] * restrict sigma, integer(kind=4)[0:D.6956] * restrict patt, integer(kind=4) & restrict nhyp, real(kind=8)[0:D.6962] * restrict hyp, real(kind=8)[0:D.6959] * restrict wkrr1, real(kind=8)[0:D.6947] * restrict wkrr2, integer(kind=4) & restrict p)
{
  real(kind=8) a;
  integer(kind=8) ubound.820;
  integer(kind=8) ubound.821;
  integer(kind=8) stride.822;
  integer(kind=8) offset.823;
  integer(kind=8) size.824;
  integer(kind=8) ubound.825;
  integer(kind=8) size.826;
  integer(kind=4) i;
  integer(kind=4) j;
  integer(kind=4) k;
  integer(kind=8) ubound.827;
  integer(kind=8) size.828;
  integer(kind=8) ubound.829;
  integer(kind=8) ubound.830;
  integer(kind=8) stride.831;
  integer(kind=8) offset.832;
  integer(kind=8) size.833;
  real(kind=4) sum;
  integer(kind=8) ubound.834;
  integer(kind=8) ubound.835;
  integer(kind=8) stride.836;
  integer(kind=8) offset.837;
  integer(kind=8) size.838;
  integer(kind=8) ubound.839;
  integer(kind=8) ubound.840;
  integer(kind=8) stride.841;
  integer(kind=8) offset.842;
  integer(kind=8) size.843;
  integer(kind=8) D.6947;
  bitsizetype D.6948;
  sizetype D.6949;
  integer(kind=8) D.6950;
  bitsizetype D.6951;
  sizetype D.6952;
  integer(kind=8) D.6953;
  bitsizetype D.6954;
  sizetype D.6955;
  integer(kind=8) D.6956;
  bitsizetype D.6957;
  sizetype D.6958;
  integer(kind=8) D.6959;
  bitsizetype D.6960;
  sizetype D.6961;
  integer(kind=8) D.6962;
  bitsizetype D.6963;
  sizetype D.6964;

  ubound.825 = (integer(kind=8)) *nhyp;
  size.826 = NON_LVALUE_EXPR <ubound.825>;
  size.826 = MAX_EXPR <size.826, 0>;
  D.6962 = size.826 + -1;
  D.6963 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.826> * 64;
  D.6964 = (sizetype) NON_LVALUE_EXPR <size.826> * 8;
  ubound.834 = (integer(kind=8)) *r;
  stride.836 = NON_LVALUE_EXPR <ubound.834>;
  stride.836 = MAX_EXPR <stride.836, 0>;
  ubound.835 = (integer(kind=8)) *r;
  size.838 = stride.836 * NON_LVALUE_EXPR <ubound.835>;
  size.838 = MAX_EXPR <size.838, 0>;
  D.6959 = size.838 + -1;
  D.6960 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.838> * 64;
  D.6961 = (sizetype) NON_LVALUE_EXPR <size.838> * 8;
  offset.837 = ~NON_LVALUE_EXPR <stride.836>;
  ubound.827 = (integer(kind=8)) *ntot;
  size.828 = NON_LVALUE_EXPR <ubound.827>;
  size.828 = MAX_EXPR <size.828, 0>;
  D.6956 = size.828 + -1;
  D.6957 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.828> * 32;
  D.6958 = (sizetype) NON_LVALUE_EXPR <size.828> * 4;
  ubound.820 = (integer(kind=8)) *ntot;
  stride.822 = NON_LVALUE_EXPR <ubound.820>;
  stride.822 = MAX_EXPR <stride.822, 0>;
  ubound.821 = (integer(kind=8)) *r;
  size.824 = stride.822 * NON_LVALUE_EXPR <ubound.821>;
  size.824 = MAX_EXPR <size.824, 0>;
  D.6953 = size.824 + -1;
  D.6954 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.824> * 64;
  D.6955 = (sizetype) NON_LVALUE_EXPR <size.824> * 8;
  offset.823 = ~NON_LVALUE_EXPR <stride.822>;
  ubound.829 = (integer(kind=8)) *r;
  stride.831 = NON_LVALUE_EXPR <ubound.829>;
  stride.831 = MAX_EXPR <stride.831, 0>;
  ubound.830 = (integer(kind=8)) *r;
  size.833 = stride.831 * NON_LVALUE_EXPR <ubound.830>;
  size.833 = MAX_EXPR <size.833, 0>;
  D.6950 = size.833 + -1;
  D.6951 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.833> * 64;
  D.6952 = (sizetype) NON_LVALUE_EXPR <size.833> * 8;
  offset.832 = ~NON_LVALUE_EXPR <stride.831>;
  ubound.839 = (integer(kind=8)) *r;
  stride.841 = NON_LVALUE_EXPR <ubound.839>;
  stride.841 = MAX_EXPR <stride.841, 0>;
  ubound.840 = (integer(kind=8)) *r;
  size.843 = stride.841 * NON_LVALUE_EXPR <ubound.840>;
  size.843 = MAX_EXPR <size.843, 0>;
  D.6947 = size.843 + -1;
  D.6948 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.843> * 64;
  D.6949 = (sizetype) NON_LVALUE_EXPR <size.843> * 8;
  offset.842 = ~NON_LVALUE_EXPR <stride.841>;
  k = 1;
  a = (*hyp)[(integer(kind=8)) k + -1];
  {
    integer(kind=4) D.6880;

    D.6880 = *r;
    i = 1;
    if (i <= D.6880)
      {
        while (1)
          {
            {
              logical(kind=4) D.6890;

              {
                integer(kind=4) D.6883;
                integer(kind=4) D.6884;

                D.6883 = i;
                D.6884 = *r;
                j = D.6883;
                if (j <= D.6884)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.6888;

                          k = k + 1;
                          (*wkrr1)[((integer(kind=8)) j * stride.836 + offset.837) + (integer(kind=8)) i] = (*hyp)[(integer(kind=8)) k + -1];
                          __label_000004:;
                          L.363:;
                          D.6888 = j == D.6884;
                          j = j + 1;
                          if (D.6888) goto L.364;
                        }
                      }
                  }
                L.364:;
              }
              __label_000005:;
              L.361:;
              D.6890 = i == D.6880;
              i = i + 1;
              if (D.6890) goto L.362;
            }
          }
      }
    L.362:;
  }
  {
    integer(kind=4) D.6891;

    D.6891 = *ntot;
    i = 1;
    if (i <= D.6891)
      {
        while (1)
          {
            {
              logical(kind=4) D.6907;

              if ((*patt)[(integer(kind=8)) i + -1] != 0)
                {
                  {
                    integer(kind=4) D.6895;

                    D.6895 = *r;
                    j = 1;
                    if (j <= D.6895)
                      {
                        while (1)
                          {
                            {
                              logical(kind=4) D.6905;

                              {
                                integer(kind=4) D.6898;
                                integer(kind=4) D.6899;

                                D.6898 = j;
                                D.6899 = *r;
                                k = D.6898;
                                if (k <= D.6899)
                                  {
                                    while (1)
                                      {
                                        {
                                          logical(kind=4) D.6903;

                                          (*wkrr1)[((integer(kind=8)) k * stride.836 + offset.837) + (integer(kind=8)) j] = (*wkrr1)[((integer(kind=8)) k * stride.836 + offset.837) + (integer(kind=8)) j] + (*delta)[((integer(kind=8)) j * stride.822 + offset.823) + (integer(kind=8)) i] * (*delta)[((integer(kind=8)) k * stride.822 + offset.823) + (integer(kind=8)) i];
                                          __label_000070:;
                                          L.370:;
                                          D.6903 = k == D.6899;
                                          k = k + 1;
                                          if (D.6903) goto L.371;
                                        }
                                      }
                                  }
                                L.371:;
                              }
                              __label_000080:;
                              L.368:;
                              D.6905 = j == D.6895;
                              j = j + 1;
                              if (D.6905) goto L.369;
                            }
                          }
                      }
                    L.369:;
                  }
                }
              L.367:;
              __label_000100:;
              L.365:;
              D.6907 = i == D.6891;
              i = i + 1;
              if (D.6907) goto L.366;
            }
          }
      }
    L.366:;
  }
  chfc ((integer(kind=4) *) r, (integer(kind=4) *) r, wkrr1);
  {
    real(kind=4) D.6908;

    D.6908 = (real(kind=4)) a + (real(kind=4)) (*nstar - *p);
    bfac ((integer(kind=4) *) r, &D.6908, sigma);
  }
  bkslv ((integer(kind=4) *) r, (integer(kind=4) *) r, sigma);
  {
    integer(kind=4) D.6914;

    D.6914 = *r;
    i = 1;
    if (i <= D.6914)
      {
        while (1)
          {
            {
              logical(kind=4) D.6929;

              {
                integer(kind=4) D.6917;

                D.6917 = *r;
                j = 1;
                if (j <= D.6917)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.6927;

                          sum = 0.0;
                          {
                            integer(kind=4) M.844;
                            integer(kind=4) D.6921;

                            M.844 = i;
                            if (j < M.844)
                              {
                                M.844 = j;
                              }
                            D.6921 = M.844;
                            k = 1;
                            if (k <= D.6921)
                              {
                                while (1)
                                  {
                                    {
                                      logical(kind=4) D.6925;

                                      sum = (real(kind=4)) ((real(kind=8)) sum + (*wkrr1)[((integer(kind=8)) i * stride.836 + offset.837) + (integer(kind=8)) k] * (*sigma)[((integer(kind=8)) j * stride.831 + offset.832) + (integer(kind=8)) k]);
                                      __label_000180:;
                                      L.376:;
                                      D.6925 = k == D.6921;
                                      k = k + 1;
                                      if (D.6925) goto L.377;
                                    }
                                  }
                              }
                            L.377:;
                          }
                          (*wkrr2)[((integer(kind=8)) j * stride.841 + offset.842) + (integer(kind=8)) i] = (real(kind=8)) sum;
                          __label_000190:;
                          L.374:;
                          D.6927 = j == D.6917;
                          j = j + 1;
                          if (D.6927) goto L.375;
                        }
                      }
                  }
                L.375:;
              }
              __label_000200:;
              L.372:;
              D.6929 = i == D.6914;
              i = i + 1;
              if (D.6929) goto L.373;
            }
          }
      }
    L.373:;
  }
  {
    integer(kind=4) D.6930;

    D.6930 = *r;
    i = 1;
    if (i <= D.6930)
      {
        while (1)
          {
            {
              logical(kind=4) D.6946;

              {
                integer(kind=4) D.6933;
                integer(kind=4) D.6934;

                D.6933 = i;
                D.6934 = *r;
                j = D.6933;
                if (j <= D.6934)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.6944;

                          sum = 0.0;
                          {
                            integer(kind=4) D.6937;

                            D.6937 = *r;
                            k = 1;
                            if (k <= D.6937)
                              {
                                while (1)
                                  {
                                    {
                                      logical(kind=4) D.6941;

                                      sum = (real(kind=4)) ((real(kind=8)) sum + (*wkrr2)[((integer(kind=8)) k * stride.841 + offset.842) + (integer(kind=8)) i] * (*wkrr2)[((integer(kind=8)) k * stride.841 + offset.842) + (integer(kind=8)) j]);
                                      __label_000250:;
                                      L.382:;
                                      D.6941 = k == D.6937;
                                      k = k + 1;
                                      if (D.6941) goto L.383;
                                    }
                                  }
                              }
                            L.383:;
                          }
                          (*sigma)[((integer(kind=8)) j * stride.831 + offset.832) + (integer(kind=8)) i] = (real(kind=8)) sum;
                          if (i != j)
                            {
                              (*sigma)[((integer(kind=8)) i * stride.831 + offset.832) + (integer(kind=8)) j] = (*sigma)[((integer(kind=8)) j * stride.831 + offset.832) + (integer(kind=8)) i];
                            }
                          L.384:;
                          __label_000280:;
                          L.380:;
                          D.6944 = j == D.6934;
                          j = j + 1;
                          if (D.6944) goto L.381;
                        }
                      }
                  }
                L.381:;
              }
              __label_000300:;
              L.378:;
              D.6946 = i == D.6930;
              i = i + 1;
              if (D.6946) goto L.379;
            }
          }
      }
    L.379:;
  }
  return;
}


mkbeta (integer(kind=4) & restrict p, integer(kind=4) & restrict r, real(kind=8)[0:D.7015] * restrict xtxinv, real(kind=8)[0:D.7012] * restrict xty, real(kind=8)[0:D.7009] * restrict beta)
{
  integer(kind=8) ubound.845;
  integer(kind=8) ubound.846;
  integer(kind=8) stride.847;
  integer(kind=8) offset.848;
  integer(kind=8) size.849;
  integer(kind=4) i;
  integer(kind=4) j;
  integer(kind=4) k;
  real(kind=8) sum;
  integer(kind=8) ubound.850;
  integer(kind=8) ubound.851;
  integer(kind=8) stride.852;
  integer(kind=8) offset.853;
  integer(kind=8) size.854;
  integer(kind=8) ubound.855;
  integer(kind=8) ubound.856;
  integer(kind=8) stride.857;
  integer(kind=8) offset.858;
  integer(kind=8) size.859;
  integer(kind=8) D.7009;
  bitsizetype D.7010;
  sizetype D.7011;
  integer(kind=8) D.7012;
  bitsizetype D.7013;
  sizetype D.7014;
  integer(kind=8) D.7015;
  bitsizetype D.7016;
  sizetype D.7017;

  ubound.850 = (integer(kind=8)) *p;
  stride.852 = NON_LVALUE_EXPR <ubound.850>;
  stride.852 = MAX_EXPR <stride.852, 0>;
  ubound.851 = (integer(kind=8)) *p;
  size.854 = stride.852 * NON_LVALUE_EXPR <ubound.851>;
  size.854 = MAX_EXPR <size.854, 0>;
  D.7015 = size.854 + -1;
  D.7016 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.854> * 64;
  D.7017 = (sizetype) NON_LVALUE_EXPR <size.854> * 8;
  offset.853 = ~NON_LVALUE_EXPR <stride.852>;
  ubound.855 = (integer(kind=8)) *p;
  stride.857 = NON_LVALUE_EXPR <ubound.855>;
  stride.857 = MAX_EXPR <stride.857, 0>;
  ubound.856 = (integer(kind=8)) *r;
  size.859 = stride.857 * NON_LVALUE_EXPR <ubound.856>;
  size.859 = MAX_EXPR <size.859, 0>;
  D.7012 = size.859 + -1;
  D.7013 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.859> * 64;
  D.7014 = (sizetype) NON_LVALUE_EXPR <size.859> * 8;
  offset.858 = ~NON_LVALUE_EXPR <stride.857>;
  ubound.845 = (integer(kind=8)) *p;
  stride.847 = NON_LVALUE_EXPR <ubound.845>;
  stride.847 = MAX_EXPR <stride.847, 0>;
  ubound.846 = (integer(kind=8)) *r;
  size.849 = stride.847 * NON_LVALUE_EXPR <ubound.846>;
  size.849 = MAX_EXPR <size.849, 0>;
  D.7009 = size.849 + -1;
  D.7010 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.849> * 64;
  D.7011 = (sizetype) NON_LVALUE_EXPR <size.849> * 8;
  offset.848 = ~NON_LVALUE_EXPR <stride.847>;
  {
    integer(kind=4) D.6994;

    D.6994 = *p;
    i = 1;
    if (i <= D.6994)
      {
        while (1)
          {
            {
              logical(kind=4) D.7008;

              {
                integer(kind=4) D.6997;

                D.6997 = *r;
                j = 1;
                if (j <= D.6997)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.7006;

                          sum = 0.0;
                          {
                            integer(kind=4) D.7000;

                            D.7000 = *p;
                            k = 1;
                            if (k <= D.7000)
                              {
                                while (1)
                                  {
                                    {
                                      logical(kind=4) D.7004;

                                      sum = (*xtxinv)[((integer(kind=8)) k * stride.852 + offset.853) + (integer(kind=8)) i] * (*xty)[((integer(kind=8)) j * stride.857 + offset.858) + (integer(kind=8)) k] + sum;
                                      __label_000050:;
                                      L.389:;
                                      D.7004 = k == D.7000;
                                      k = k + 1;
                                      if (D.7004) goto L.390;
                                    }
                                  }
                              }
                            L.390:;
                          }
                          (*beta)[((integer(kind=8)) j * stride.847 + offset.848) + (integer(kind=8)) i] = sum;
                          __label_000090:;
                          L.387:;
                          D.7006 = j == D.6997;
                          j = j + 1;
                          if (D.7006) goto L.388;
                        }
                      }
                  }
                L.388:;
              }
              __label_000100:;
              L.385:;
              D.7008 = i == D.6994;
              i = i + 1;
              if (D.7008) goto L.386;
            }
          }
      }
    L.386:;
  }
  return;
}


mkxty (integer(kind=4) & restrict ntot, integer(kind=4) & restrict r, real(kind=8)[0:D.7080] * restrict y, integer(kind=4) & restrict pcol, real(kind=8)[0:D.7086] * restrict pred, integer(kind=4) & restrict p, integer(kind=4)[0:D.7083] * restrict xcol, integer(kind=4)[0:D.7089] * restrict patt, real(kind=8)[0:D.7077] * restrict xty)
{
  integer(kind=4) i;
  integer(kind=4) j;
  integer(kind=4) k;
  integer(kind=8) ubound.860;
  integer(kind=8) size.861;
  integer(kind=8) ubound.862;
  integer(kind=8) ubound.863;
  integer(kind=8) stride.864;
  integer(kind=8) offset.865;
  integer(kind=8) size.866;
  real(kind=8) sum;
  integer(kind=8) ubound.867;
  integer(kind=8) size.868;
  integer(kind=8) ubound.869;
  integer(kind=8) ubound.870;
  integer(kind=8) stride.871;
  integer(kind=8) offset.872;
  integer(kind=8) size.873;
  integer(kind=8) ubound.874;
  integer(kind=8) ubound.875;
  integer(kind=8) stride.876;
  integer(kind=8) offset.877;
  integer(kind=8) size.878;
  integer(kind=8) D.7077;
  bitsizetype D.7078;
  sizetype D.7079;
  integer(kind=8) D.7080;
  bitsizetype D.7081;
  sizetype D.7082;
  integer(kind=8) D.7083;
  bitsizetype D.7084;
  sizetype D.7085;
  integer(kind=8) D.7086;
  bitsizetype D.7087;
  sizetype D.7088;
  integer(kind=8) D.7089;
  bitsizetype D.7090;
  sizetype D.7091;

  ubound.860 = (integer(kind=8)) *ntot;
  size.861 = NON_LVALUE_EXPR <ubound.860>;
  size.861 = MAX_EXPR <size.861, 0>;
  D.7089 = size.861 + -1;
  D.7090 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.861> * 32;
  D.7091 = (sizetype) NON_LVALUE_EXPR <size.861> * 4;
  ubound.862 = (integer(kind=8)) *ntot;
  stride.864 = NON_LVALUE_EXPR <ubound.862>;
  stride.864 = MAX_EXPR <stride.864, 0>;
  ubound.863 = (integer(kind=8)) *pcol;
  size.866 = stride.864 * NON_LVALUE_EXPR <ubound.863>;
  size.866 = MAX_EXPR <size.866, 0>;
  D.7086 = size.866 + -1;
  D.7087 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.866> * 64;
  D.7088 = (sizetype) NON_LVALUE_EXPR <size.866> * 8;
  offset.865 = ~NON_LVALUE_EXPR <stride.864>;
  ubound.867 = (integer(kind=8)) *p;
  size.868 = NON_LVALUE_EXPR <ubound.867>;
  size.868 = MAX_EXPR <size.868, 0>;
  D.7083 = size.868 + -1;
  D.7084 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.868> * 32;
  D.7085 = (sizetype) NON_LVALUE_EXPR <size.868> * 4;
  ubound.874 = (integer(kind=8)) *ntot;
  stride.876 = NON_LVALUE_EXPR <ubound.874>;
  stride.876 = MAX_EXPR <stride.876, 0>;
  ubound.875 = (integer(kind=8)) *r;
  size.878 = stride.876 * NON_LVALUE_EXPR <ubound.875>;
  size.878 = MAX_EXPR <size.878, 0>;
  D.7080 = size.878 + -1;
  D.7081 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.878> * 64;
  D.7082 = (sizetype) NON_LVALUE_EXPR <size.878> * 8;
  offset.877 = ~NON_LVALUE_EXPR <stride.876>;
  ubound.869 = (integer(kind=8)) *p;
  stride.871 = NON_LVALUE_EXPR <ubound.869>;
  stride.871 = MAX_EXPR <stride.871, 0>;
  ubound.870 = (integer(kind=8)) *r;
  size.873 = stride.871 * NON_LVALUE_EXPR <ubound.870>;
  size.873 = MAX_EXPR <size.873, 0>;
  D.7077 = size.873 + -1;
  D.7078 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.873> * 64;
  D.7079 = (sizetype) NON_LVALUE_EXPR <size.873> * 8;
  offset.872 = ~NON_LVALUE_EXPR <stride.871>;
  {
    integer(kind=4) D.7061;

    D.7061 = *p;
    i = 1;
    if (i <= D.7061)
      {
        while (1)
          {
            {
              logical(kind=4) D.7076;

              {
                integer(kind=4) D.7064;

                D.7064 = *r;
                j = 1;
                if (j <= D.7064)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.7074;

                          sum = 0.0;
                          {
                            integer(kind=4) D.7067;

                            D.7067 = *ntot;
                            k = 1;
                            if (k <= D.7067)
                              {
                                while (1)
                                  {
                                    {
                                      logical(kind=4) D.7072;

                                      if ((*patt)[(integer(kind=8)) k + -1] != 0)
                                        {
                                          sum = (*pred)[((integer(kind=8)) (*xcol)[(integer(kind=8)) i + -1] * stride.864 + offset.865) + (integer(kind=8)) k] * (*y)[((integer(kind=8)) j * stride.876 + offset.877) + (integer(kind=8)) k] + sum;
                                        }
                                      L.397:;
                                      __label_000050:;
                                      L.395:;
                                      D.7072 = k == D.7067;
                                      k = k + 1;
                                      if (D.7072) goto L.396;
                                    }
                                  }
                              }
                            L.396:;
                          }
                          (*xty)[((integer(kind=8)) j * stride.871 + offset.872) + (integer(kind=8)) i] = sum;
                          __label_000080:;
                          L.393:;
                          D.7074 = j == D.7064;
                          j = j + 1;
                          if (D.7074) goto L.394;
                        }
                      }
                  }
                L.394:;
              }
              __label_000100:;
              L.391:;
              D.7076 = i == D.7061;
              i = i + 1;
              if (D.7076) goto L.392;
            }
          }
      }
    L.392:;
  }
  return;
}


mkeps2 (integer(kind=4) & restrict ntot, integer(kind=4) & restrict m, integer(kind=4) & restrict r, real(kind=8)[0:D.7182] * restrict y, integer(kind=4) & restrict pcol, real(kind=8)[0:D.7194] * restrict pred, integer(kind=4) & restrict q, integer(kind=4)[0:D.7191] * restrict zcol, real(kind=8)[0:D.7188] * restrict b, real(kind=8)[0:D.7185] * restrict eps, integer(kind=4)[0:D.7197] * restrict patt, integer(kind=4)[0:D.7203] * restrict ist, integer(kind=4)[0:D.7200] * restrict ifin)
{
  integer(kind=8) ubound.879;
  integer(kind=8) ubound.880;
  integer(kind=8) stride.881;
  integer(kind=8) ubound.882;
  integer(kind=8) stride.883;
  integer(kind=8) offset.884;
  integer(kind=8) size.885;
  integer(kind=8) ubound.886;
  integer(kind=8) ubound.887;
  integer(kind=8) stride.888;
  integer(kind=8) offset.889;
  integer(kind=8) size.890;
  integer(kind=4) fin;
  integer(kind=4) i;
  integer(kind=8) ubound.891;
  integer(kind=8) size.892;
  integer(kind=8) ubound.893;
  integer(kind=8) size.894;
  integer(kind=4) j;
  integer(kind=4) k;
  integer(kind=8) ubound.895;
  integer(kind=8) size.896;
  integer(kind=8) ubound.897;
  integer(kind=8) ubound.898;
  integer(kind=8) stride.899;
  integer(kind=8) offset.900;
  integer(kind=8) size.901;
  integer(kind=4) s;
  integer(kind=4) st;
  real(kind=8) sum;
  integer(kind=8) ubound.902;
  integer(kind=8) ubound.903;
  integer(kind=8) stride.904;
  integer(kind=8) offset.905;
  integer(kind=8) size.906;
  integer(kind=8) ubound.907;
  integer(kind=8) size.908;
  integer(kind=8) D.7182;
  bitsizetype D.7183;
  sizetype D.7184;
  integer(kind=8) D.7185;
  bitsizetype D.7186;
  sizetype D.7187;
  integer(kind=8) D.7188;
  bitsizetype D.7189;
  sizetype D.7190;
  integer(kind=8) D.7191;
  bitsizetype D.7192;
  sizetype D.7193;
  integer(kind=8) D.7194;
  bitsizetype D.7195;
  sizetype D.7196;
  integer(kind=8) D.7197;
  bitsizetype D.7198;
  sizetype D.7199;
  integer(kind=8) D.7200;
  bitsizetype D.7201;
  sizetype D.7202;
  integer(kind=8) D.7203;
  bitsizetype D.7204;
  sizetype D.7205;

  ubound.893 = (integer(kind=8)) *m;
  size.894 = NON_LVALUE_EXPR <ubound.893>;
  size.894 = MAX_EXPR <size.894, 0>;
  D.7203 = size.894 + -1;
  D.7204 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.894> * 32;
  D.7205 = (sizetype) NON_LVALUE_EXPR <size.894> * 4;
  ubound.891 = (integer(kind=8)) *m;
  size.892 = NON_LVALUE_EXPR <ubound.891>;
  size.892 = MAX_EXPR <size.892, 0>;
  D.7200 = size.892 + -1;
  D.7201 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.892> * 32;
  D.7202 = (sizetype) NON_LVALUE_EXPR <size.892> * 4;
  ubound.895 = (integer(kind=8)) *ntot;
  size.896 = NON_LVALUE_EXPR <ubound.895>;
  size.896 = MAX_EXPR <size.896, 0>;
  D.7197 = size.896 + -1;
  D.7198 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.896> * 32;
  D.7199 = (sizetype) NON_LVALUE_EXPR <size.896> * 4;
  ubound.897 = (integer(kind=8)) *ntot;
  stride.899 = NON_LVALUE_EXPR <ubound.897>;
  stride.899 = MAX_EXPR <stride.899, 0>;
  ubound.898 = (integer(kind=8)) *pcol;
  size.901 = stride.899 * NON_LVALUE_EXPR <ubound.898>;
  size.901 = MAX_EXPR <size.901, 0>;
  D.7194 = size.901 + -1;
  D.7195 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.901> * 64;
  D.7196 = (sizetype) NON_LVALUE_EXPR <size.901> * 8;
  offset.900 = ~NON_LVALUE_EXPR <stride.899>;
  ubound.907 = (integer(kind=8)) *q;
  size.908 = NON_LVALUE_EXPR <ubound.907>;
  size.908 = MAX_EXPR <size.908, 0>;
  D.7191 = size.908 + -1;
  D.7192 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.908> * 32;
  D.7193 = (sizetype) NON_LVALUE_EXPR <size.908> * 4;
  ubound.879 = (integer(kind=8)) *q;
  stride.881 = NON_LVALUE_EXPR <ubound.879>;
  stride.881 = MAX_EXPR <stride.881, 0>;
  ubound.880 = (integer(kind=8)) *r;
  stride.883 = stride.881 * NON_LVALUE_EXPR <ubound.880>;
  stride.883 = MAX_EXPR <stride.883, 0>;
  ubound.882 = (integer(kind=8)) *m;
  size.885 = stride.883 * NON_LVALUE_EXPR <ubound.882>;
  size.885 = MAX_EXPR <size.885, 0>;
  D.7188 = size.885 + -1;
  D.7189 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.885> * 64;
  D.7190 = (sizetype) NON_LVALUE_EXPR <size.885> * 8;
  offset.884 = ~NON_LVALUE_EXPR <stride.881> - NON_LVALUE_EXPR <stride.883>;
  ubound.886 = (integer(kind=8)) *ntot;
  stride.888 = NON_LVALUE_EXPR <ubound.886>;
  stride.888 = MAX_EXPR <stride.888, 0>;
  ubound.887 = (integer(kind=8)) *r;
  size.890 = stride.888 * NON_LVALUE_EXPR <ubound.887>;
  size.890 = MAX_EXPR <size.890, 0>;
  D.7185 = size.890 + -1;
  D.7186 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.890> * 64;
  D.7187 = (sizetype) NON_LVALUE_EXPR <size.890> * 8;
  offset.889 = ~NON_LVALUE_EXPR <stride.888>;
  ubound.902 = (integer(kind=8)) *ntot;
  stride.904 = NON_LVALUE_EXPR <ubound.902>;
  stride.904 = MAX_EXPR <stride.904, 0>;
  ubound.903 = (integer(kind=8)) *r;
  size.906 = stride.904 * NON_LVALUE_EXPR <ubound.903>;
  size.906 = MAX_EXPR <size.906, 0>;
  D.7182 = size.906 + -1;
  D.7183 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.906> * 64;
  D.7184 = (sizetype) NON_LVALUE_EXPR <size.906> * 8;
  offset.905 = ~NON_LVALUE_EXPR <stride.904>;
  {
    integer(kind=4) D.7160;

    D.7160 = *m;
    s = 1;
    if (s <= D.7160)
      {
        while (1)
          {
            {
              logical(kind=4) D.7181;

              st = (*ist)[(integer(kind=8)) s + -1];
              fin = (*ifin)[(integer(kind=8)) s + -1];
              {
                integer(kind=4) D.7163;
                integer(kind=4) D.7164;

                D.7163 = st;
                D.7164 = fin;
                i = D.7163;
                if (i <= D.7164)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.7179;

                          if ((*patt)[(integer(kind=8)) i + -1] != 0)
                            {
                              {
                                integer(kind=4) D.7168;

                                D.7168 = *r;
                                j = 1;
                                if (j <= D.7168)
                                  {
                                    while (1)
                                      {
                                        {
                                          logical(kind=4) D.7177;

                                          sum = 0.0;
                                          {
                                            integer(kind=4) D.7171;

                                            D.7171 = *q;
                                            k = 1;
                                            if (k <= D.7171)
                                              {
                                                while (1)
                                                  {
                                                    {
                                                      logical(kind=4) D.7175;

                                                      sum = (*pred)[((integer(kind=8)) (*zcol)[(integer(kind=8)) k + -1] * stride.899 + offset.900) + (integer(kind=8)) i] * (*b)[(((integer(kind=8)) s * stride.883 + offset.884) + (integer(kind=8)) j * stride.881) + (integer(kind=8)) k] + sum;
                                                      __label_000070:;
                                                      L.405:;
                                                      D.7175 = k == D.7171;
                                                      k = k + 1;
                                                      if (D.7175) goto L.406;
                                                    }
                                                  }
                                              }
                                            L.406:;
                                          }
                                          (*eps)[((integer(kind=8)) j * stride.888 + offset.889) + (integer(kind=8)) i] = (*y)[((integer(kind=8)) j * stride.904 + offset.905) + (integer(kind=8)) i] - sum;
                                          __label_000080:;
                                          L.403:;
                                          D.7177 = j == D.7168;
                                          j = j + 1;
                                          if (D.7177) goto L.404;
                                        }
                                      }
                                  }
                                L.404:;
                              }
                            }
                          L.402:;
                          __label_000090:;
                          L.400:;
                          D.7179 = i == D.7164;
                          i = i + 1;
                          if (D.7179) goto L.401;
                        }
                      }
                  }
                L.401:;
              }
              __label_000100:;
              L.398:;
              D.7181 = s == D.7160;
              s = s + 1;
              if (D.7181) goto L.399;
            }
          }
      }
    L.399:;
  }
  return;
}


drpsi (integer(kind=4) & restrict r, integer(kind=4) & restrict q, integer(kind=4) & restrict m, real(kind=8)[0:D.7340] * restrict psi, real(kind=8)[0:D.7349] * restrict wkrqrq1, real(kind=8)[0:D.7337] * restrict wkrqrq2, real(kind=8)[0:D.7346] * restrict wkqrv, integer(kind=4) & restrict nhyp, real(kind=8)[0:D.7352] * restrict hyp, real(kind=8)[0:D.7343] * restrict b)
{
  integer(kind=8) ubound.909;
  integer(kind=8) ubound.910;
  integer(kind=8) stride.911;
  integer(kind=8) ubound.912;
  integer(kind=8) stride.913;
  integer(kind=8) offset.914;
  integer(kind=8) size.915;
  real(kind=8) c;
  integer(kind=8) ubound.916;
  integer(kind=8) size.917;
  integer(kind=4) i;
  integer(kind=4) ia;
  integer(kind=4) j;
  integer(kind=4) k;
  integer(kind=8) ubound.918;
  integer(kind=8) ubound.919;
  integer(kind=8) stride.920;
  integer(kind=8) offset.921;
  integer(kind=8) size.922;
  integer(kind=4) s;
  real(kind=8) sum;
  integer(kind=8) ubound.923;
  integer(kind=8) size.924;
  integer(kind=8) ubound.925;
  integer(kind=8) ubound.926;
  integer(kind=8) stride.927;
  integer(kind=8) offset.928;
  integer(kind=8) size.929;
  integer(kind=8) ubound.930;
  integer(kind=8) ubound.931;
  integer(kind=8) stride.932;
  integer(kind=8) offset.933;
  integer(kind=8) size.934;
  integer(kind=8) D.7337;
  bitsizetype D.7338;
  sizetype D.7339;
  integer(kind=8) D.7340;
  bitsizetype D.7341;
  sizetype D.7342;
  integer(kind=8) D.7343;
  bitsizetype D.7344;
  sizetype D.7345;
  integer(kind=8) D.7346;
  bitsizetype D.7347;
  sizetype D.7348;
  integer(kind=8) D.7349;
  bitsizetype D.7350;
  sizetype D.7351;
  integer(kind=8) D.7352;
  bitsizetype D.7353;
  sizetype D.7354;

  ubound.916 = (integer(kind=8)) *nhyp;
  size.917 = NON_LVALUE_EXPR <ubound.916>;
  size.917 = MAX_EXPR <size.917, 0>;
  D.7352 = size.917 + -1;
  D.7353 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.917> * 64;
  D.7354 = (sizetype) NON_LVALUE_EXPR <size.917> * 8;
  ubound.925 = (integer(kind=8)) (*r * *q);
  stride.927 = NON_LVALUE_EXPR <ubound.925>;
  stride.927 = MAX_EXPR <stride.927, 0>;
  ubound.926 = (integer(kind=8)) (*r * *q);
  size.929 = stride.927 * NON_LVALUE_EXPR <ubound.926>;
  size.929 = MAX_EXPR <size.929, 0>;
  D.7349 = size.929 + -1;
  D.7350 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.929> * 64;
  D.7351 = (sizetype) NON_LVALUE_EXPR <size.929> * 8;
  offset.928 = ~NON_LVALUE_EXPR <stride.927>;
  ubound.923 = (integer(kind=8)) (*q * *r);
  size.924 = NON_LVALUE_EXPR <ubound.923>;
  size.924 = MAX_EXPR <size.924, 0>;
  D.7346 = size.924 + -1;
  D.7347 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.924> * 64;
  D.7348 = (sizetype) NON_LVALUE_EXPR <size.924> * 8;
  ubound.909 = (integer(kind=8)) *q;
  stride.911 = NON_LVALUE_EXPR <ubound.909>;
  stride.911 = MAX_EXPR <stride.911, 0>;
  ubound.910 = (integer(kind=8)) *r;
  stride.913 = stride.911 * NON_LVALUE_EXPR <ubound.910>;
  stride.913 = MAX_EXPR <stride.913, 0>;
  ubound.912 = (integer(kind=8)) *m;
  size.915 = stride.913 * NON_LVALUE_EXPR <ubound.912>;
  size.915 = MAX_EXPR <size.915, 0>;
  D.7343 = size.915 + -1;
  D.7344 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.915> * 64;
  D.7345 = (sizetype) NON_LVALUE_EXPR <size.915> * 8;
  offset.914 = ~NON_LVALUE_EXPR <stride.911> - NON_LVALUE_EXPR <stride.913>;
  ubound.918 = (integer(kind=8)) (*r * *q);
  stride.920 = NON_LVALUE_EXPR <ubound.918>;
  stride.920 = MAX_EXPR <stride.920, 0>;
  ubound.919 = (integer(kind=8)) (*r * *q);
  size.922 = stride.920 * NON_LVALUE_EXPR <ubound.919>;
  size.922 = MAX_EXPR <size.922, 0>;
  D.7340 = size.922 + -1;
  D.7341 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.922> * 64;
  D.7342 = (sizetype) NON_LVALUE_EXPR <size.922> * 8;
  offset.921 = ~NON_LVALUE_EXPR <stride.920>;
  ubound.930 = (integer(kind=8)) (*r * *q);
  stride.932 = NON_LVALUE_EXPR <ubound.930>;
  stride.932 = MAX_EXPR <stride.932, 0>;
  ubound.931 = (integer(kind=8)) (*r * *q);
  size.934 = stride.932 * NON_LVALUE_EXPR <ubound.931>;
  size.934 = MAX_EXPR <size.934, 0>;
  D.7337 = size.934 + -1;
  D.7338 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.934> * 64;
  D.7339 = (sizetype) NON_LVALUE_EXPR <size.934> * 8;
  offset.933 = ~NON_LVALUE_EXPR <stride.932>;
  k = (*r * (*r + 1)) / 2 + 2;
  c = (*hyp)[(integer(kind=8)) k + -1];
  {
    integer(kind=4) D.7261;

    D.7261 = *r * *q;
    i = 1;
    if (i <= D.7261)
      {
        while (1)
          {
            {
              logical(kind=4) D.7271;

              {
                integer(kind=4) D.7264;
                integer(kind=4) D.7265;

                D.7264 = i;
                D.7265 = *r * *q;
                j = D.7264;
                if (j <= D.7265)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.7269;

                          k = k + 1;
                          (*wkrqrq1)[((integer(kind=8)) j * stride.927 + offset.928) + (integer(kind=8)) i] = (*hyp)[(integer(kind=8)) k + -1];
                          __label_000004:;
                          L.409:;
                          D.7269 = j == D.7265;
                          j = j + 1;
                          if (D.7269) goto L.410;
                        }
                      }
                  }
                L.410:;
              }
              __label_000005:;
              L.407:;
              D.7271 = i == D.7261;
              i = i + 1;
              if (D.7271) goto L.408;
            }
          }
      }
    L.408:;
  }
  {
    integer(kind=4) D.7272;

    D.7272 = *m;
    s = 1;
    if (s <= D.7272)
      {
        while (1)
          {
            {
              logical(kind=4) D.7297;

              ia = 0;
              {
                integer(kind=4) D.7275;

                D.7275 = *r;
                j = 1;
                if (j <= D.7275)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.7284;

                          {
                            integer(kind=4) D.7278;

                            D.7278 = *q;
                            i = 1;
                            if (i <= D.7278)
                              {
                                while (1)
                                  {
                                    {
                                      logical(kind=4) D.7282;

                                      ia = ia + 1;
                                      (*wkqrv)[(integer(kind=8)) ia + -1] = (*b)[(((integer(kind=8)) s * stride.913 + offset.914) + (integer(kind=8)) j * stride.911) + (integer(kind=8)) i];
                                      __label_000015:;
                                      L.415:;
                                      D.7282 = i == D.7278;
                                      i = i + 1;
                                      if (D.7282) goto L.416;
                                    }
                                  }
                              }
                            L.416:;
                          }
                          __label_000020:;
                          L.413:;
                          D.7284 = j == D.7275;
                          j = j + 1;
                          if (D.7284) goto L.414;
                        }
                      }
                  }
                L.414:;
              }
              {
                integer(kind=4) D.7285;

                D.7285 = *r * *q;
                i = 1;
                if (i <= D.7285)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.7295;

                          {
                            integer(kind=4) D.7288;
                            integer(kind=4) D.7289;

                            D.7288 = i;
                            D.7289 = *r * *q;
                            j = D.7288;
                            if (j <= D.7289)
                              {
                                while (1)
                                  {
                                    {
                                      logical(kind=4) D.7293;

                                      (*wkrqrq1)[((integer(kind=8)) j * stride.927 + offset.928) + (integer(kind=8)) i] = (*wkrqrq1)[((integer(kind=8)) j * stride.927 + offset.928) + (integer(kind=8)) i] + (*wkqrv)[(integer(kind=8)) i + -1] * (*wkqrv)[(integer(kind=8)) j + -1];
                                      __label_000030:;
                                      L.419:;
                                      D.7293 = j == D.7289;
                                      j = j + 1;
                                      if (D.7293) goto L.420;
                                    }
                                  }
                              }
                            L.420:;
                          }
                          __label_000040:;
                          L.417:;
                          D.7295 = i == D.7285;
                          i = i + 1;
                          if (D.7295) goto L.418;
                        }
                      }
                  }
                L.418:;
              }
              __label_000100:;
              L.411:;
              D.7297 = s == D.7272;
              s = s + 1;
              if (D.7297) goto L.412;
            }
          }
      }
    L.412:;
  }
  {
    integer(kind=4) D.7298;
    integer(kind=4) D.7299;

    D.7298 = *r * *q;
    D.7299 = *r * *q;
    chfc (&D.7298, &D.7299, wkrqrq1);
  }
  {
    integer(kind=4) D.7300;
    real(kind=4) D.7301;

    D.7300 = *r * *q;
    D.7301 = (real(kind=4)) c + (real(kind=4)) *m;
    bfac (&D.7300, &D.7301, psi);
  }
  {
    integer(kind=4) D.7302;
    integer(kind=4) D.7303;

    D.7302 = *r * *q;
    D.7303 = *r * *q;
    bkslv (&D.7302, &D.7303, psi);
  }
  {
    integer(kind=4) D.7304;

    D.7304 = *r * *q;
    i = 1;
    if (i <= D.7304)
      {
        while (1)
          {
            {
              logical(kind=4) D.7319;

              {
                integer(kind=4) D.7307;

                D.7307 = *r * *q;
                j = 1;
                if (j <= D.7307)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.7317;

                          sum = 0.0;
                          {
                            integer(kind=4) M.935;
                            integer(kind=4) D.7311;

                            M.935 = i;
                            if (j < M.935)
                              {
                                M.935 = j;
                              }
                            D.7311 = M.935;
                            k = 1;
                            if (k <= D.7311)
                              {
                                while (1)
                                  {
                                    {
                                      logical(kind=4) D.7315;

                                      sum = (*wkrqrq1)[((integer(kind=8)) i * stride.927 + offset.928) + (integer(kind=8)) k] * (*psi)[((integer(kind=8)) j * stride.920 + offset.921) + (integer(kind=8)) k] + sum;
                                      __label_000180:;
                                      L.425:;
                                      D.7315 = k == D.7311;
                                      k = k + 1;
                                      if (D.7315) goto L.426;
                                    }
                                  }
                              }
                            L.426:;
                          }
                          (*wkrqrq2)[((integer(kind=8)) j * stride.932 + offset.933) + (integer(kind=8)) i] = sum;
                          __label_000190:;
                          L.423:;
                          D.7317 = j == D.7307;
                          j = j + 1;
                          if (D.7317) goto L.424;
                        }
                      }
                  }
                L.424:;
              }
              __label_000200:;
              L.421:;
              D.7319 = i == D.7304;
              i = i + 1;
              if (D.7319) goto L.422;
            }
          }
      }
    L.422:;
  }
  {
    integer(kind=4) D.7320;

    D.7320 = *r * *q;
    i = 1;
    if (i <= D.7320)
      {
        while (1)
          {
            {
              logical(kind=4) D.7336;

              {
                integer(kind=4) D.7323;
                integer(kind=4) D.7324;

                D.7323 = i;
                D.7324 = *r * *q;
                j = D.7323;
                if (j <= D.7324)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.7334;

                          sum = 0.0;
                          {
                            integer(kind=4) D.7327;

                            D.7327 = *r * *q;
                            k = 1;
                            if (k <= D.7327)
                              {
                                while (1)
                                  {
                                    {
                                      logical(kind=4) D.7331;

                                      sum = (*wkrqrq2)[((integer(kind=8)) k * stride.932 + offset.933) + (integer(kind=8)) i] * (*wkrqrq2)[((integer(kind=8)) k * stride.932 + offset.933) + (integer(kind=8)) j] + sum;
                                      __label_000250:;
                                      L.431:;
                                      D.7331 = k == D.7327;
                                      k = k + 1;
                                      if (D.7331) goto L.432;
                                    }
                                  }
                              }
                            L.432:;
                          }
                          (*psi)[((integer(kind=8)) j * stride.920 + offset.921) + (integer(kind=8)) i] = sum;
                          if (i != j)
                            {
                              (*psi)[((integer(kind=8)) i * stride.920 + offset.921) + (integer(kind=8)) j] = (*psi)[((integer(kind=8)) j * stride.920 + offset.921) + (integer(kind=8)) i];
                            }
                          L.433:;
                          __label_000280:;
                          L.429:;
                          D.7334 = j == D.7324;
                          j = j + 1;
                          if (D.7334) goto L.430;
                        }
                      }
                  }
                L.430:;
              }
              __label_000300:;
              L.427:;
              D.7336 = i == D.7320;
              i = i + 1;
              if (D.7336) goto L.428;
            }
          }
      }
    L.428:;
  }
  return;
}


bfac (integer(kind=4) & restrict p, real(kind=4) & restrict m, real(kind=8)[0:D.7384] * restrict b)
{
  integer(kind=8) ubound.936;
  integer(kind=8) ubound.937;
  integer(kind=8) stride.938;
  integer(kind=8) offset.939;
  integer(kind=8) size.940;
  integer(kind=4) j;
  real(kind=4) jnk;
  integer(kind=4) k;
  integer(kind=8) D.7384;
  bitsizetype D.7385;
  sizetype D.7386;

  ubound.936 = (integer(kind=8)) *p;
  stride.938 = NON_LVALUE_EXPR <ubound.936>;
  stride.938 = MAX_EXPR <stride.938, 0>;
  ubound.937 = (integer(kind=8)) *p;
  size.940 = stride.938 * NON_LVALUE_EXPR <ubound.937>;
  size.940 = MAX_EXPR <size.940, 0>;
  D.7384 = size.940 + -1;
  D.7385 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.940> * 64;
  D.7386 = (sizetype) NON_LVALUE_EXPR <size.940> * 8;
  offset.939 = ~NON_LVALUE_EXPR <stride.938>;
  jnk = gauss ();
  {
    integer(kind=4) D.7364;

    D.7364 = *p;
    j = 1;
    if (j <= D.7364)
      {
        while (1)
          {
            {
              logical(kind=4) D.7372;

              {
                real(kind=4) D.7367;

                D.7367 = (((*m - (real(kind=4)) j) + 1.0e+0)) / 2.0e+0;
                (*b)[((integer(kind=8)) j * stride.938 + offset.939) + (integer(kind=8)) j] = (real(kind=8)) __builtin_sqrtf (gamm (&D.7367) * 2.0e+0);
              }
              __label_000010:;
              L.434:;
              D.7372 = j == D.7364;
              j = j + 1;
              if (D.7372) goto L.435;
            }
          }
      }
    L.435:;
  }
  {
    integer(kind=4) D.7373;

    D.7373 = *p + -1;
    j = 1;
    if (j <= D.7373)
      {
        while (1)
          {
            {
              logical(kind=4) D.7383;

              {
                integer(kind=4) D.7376;
                integer(kind=4) D.7377;

                D.7376 = j + 1;
                D.7377 = *p;
                k = D.7376;
                if (k <= D.7377)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.7381;

                          (*b)[((integer(kind=8)) k * stride.938 + offset.939) + (integer(kind=8)) j] = (real(kind=8)) gauss ();
                          __label_000020:;
                          L.438:;
                          D.7381 = k == D.7377;
                          k = k + 1;
                          if (D.7381) goto L.439;
                        }
                      }
                  }
                L.439:;
              }
              __label_000030:;
              L.436:;
              D.7383 = j == D.7373;
              j = j + 1;
              if (D.7383) goto L.437;
            }
          }
      }
    L.437:;
  }
  return;
}


drb (integer(kind=4) & restrict r, integer(kind=4) & restrict q, integer(kind=4) & restrict m, real(kind=8)[0:D.7589] * restrict b, real(kind=8)[0:D.7601] * restrict sigmainv, real(kind=8)[0:D.7607] * restrict eps, integer(kind=4) & restrict pcol, real(kind=8)[0:D.7613] * restrict pred, integer(kind=4)[0:D.7610] * restrict zcol, real(kind=8)[0:D.7604] * restrict wkqr1, real(kind=8)[0:D.7598] * restrict wkqr2, integer(kind=4)[0:D.7622] * restrict ist, integer(kind=4)[0:D.7619] * restrict ifin, integer(kind=4)[0:D.7616] * restrict patt, integer(kind=4) & restrict ntot, real(kind=8)[0:D.7595] * restrict sig, real(kind=8)[0:D.7592] * restrict wkrqrq2, real(kind=8)[0:D.7586] * restrict wkqrv)
{
  integer(kind=8) ubound.941;
  integer(kind=8) ubound.942;
  integer(kind=8) stride.943;
  integer(kind=8) ubound.944;
  integer(kind=8) stride.945;
  integer(kind=8) offset.946;
  integer(kind=8) size.947;
  integer(kind=8) ubound.948;
  integer(kind=8) ubound.949;
  integer(kind=8) stride.950;
  integer(kind=8) offset.951;
  integer(kind=8) size.952;
  integer(kind=4) fin;
  integer(kind=4) i;
  integer(kind=4) ia;
  integer(kind=8) ubound.953;
  integer(kind=8) size.954;
  integer(kind=4) ii;
  integer(kind=8) ubound.955;
  integer(kind=8) size.956;
  integer(kind=4) j;
  integer(kind=4) ja;
  integer(kind=4) jj;
  integer(kind=4) k;
  integer(kind=8) ubound.957;
  integer(kind=8) size.958;
  integer(kind=8) ubound.959;
  integer(kind=8) ubound.960;
  integer(kind=8) stride.961;
  integer(kind=8) offset.962;
  integer(kind=8) size.963;
  integer(kind=4) s;
  integer(kind=8) ubound.964;
  integer(kind=8) ubound.965;
  integer(kind=8) stride.966;
  integer(kind=8) ubound.967;
  integer(kind=8) stride.968;
  integer(kind=8) offset.969;
  integer(kind=8) size.970;
  integer(kind=8) ubound.971;
  integer(kind=8) ubound.972;
  integer(kind=8) stride.973;
  integer(kind=8) offset.974;
  integer(kind=8) size.975;
  integer(kind=4) st;
  real(kind=8) sum;
  integer(kind=8) ubound.976;
  integer(kind=8) ubound.977;
  integer(kind=8) stride.978;
  integer(kind=8) offset.979;
  integer(kind=8) size.980;
  integer(kind=8) ubound.981;
  integer(kind=8) ubound.982;
  integer(kind=8) stride.983;
  integer(kind=8) offset.984;
  integer(kind=8) size.985;
  integer(kind=8) ubound.986;
  integer(kind=8) size.987;
  integer(kind=8) ubound.988;
  integer(kind=8) ubound.989;
  integer(kind=8) stride.990;
  integer(kind=8) offset.991;
  integer(kind=8) size.992;
  integer(kind=8) ubound.993;
  integer(kind=8) size.994;
  integer(kind=8) D.7586;
  bitsizetype D.7587;
  sizetype D.7588;
  integer(kind=8) D.7589;
  bitsizetype D.7590;
  sizetype D.7591;
  integer(kind=8) D.7592;
  bitsizetype D.7593;
  sizetype D.7594;
  integer(kind=8) D.7595;
  bitsizetype D.7596;
  sizetype D.7597;
  integer(kind=8) D.7598;
  bitsizetype D.7599;
  sizetype D.7600;
  integer(kind=8) D.7601;
  bitsizetype D.7602;
  sizetype D.7603;
  integer(kind=8) D.7604;
  bitsizetype D.7605;
  sizetype D.7606;
  integer(kind=8) D.7607;
  bitsizetype D.7608;
  sizetype D.7609;
  integer(kind=8) D.7610;
  bitsizetype D.7611;
  sizetype D.7612;
  integer(kind=8) D.7613;
  bitsizetype D.7614;
  sizetype D.7615;
  integer(kind=8) D.7616;
  bitsizetype D.7617;
  sizetype D.7618;
  integer(kind=8) D.7619;
  bitsizetype D.7620;
  sizetype D.7621;
  integer(kind=8) D.7622;
  bitsizetype D.7623;
  sizetype D.7624;

  ubound.955 = (integer(kind=8)) *m;
  size.956 = NON_LVALUE_EXPR <ubound.955>;
  size.956 = MAX_EXPR <size.956, 0>;
  D.7622 = size.956 + -1;
  D.7623 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.956> * 32;
  D.7624 = (sizetype) NON_LVALUE_EXPR <size.956> * 4;
  ubound.953 = (integer(kind=8)) *m;
  size.954 = NON_LVALUE_EXPR <ubound.953>;
  size.954 = MAX_EXPR <size.954, 0>;
  D.7619 = size.954 + -1;
  D.7620 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.954> * 32;
  D.7621 = (sizetype) NON_LVALUE_EXPR <size.954> * 4;
  ubound.957 = (integer(kind=8)) *ntot;
  size.958 = NON_LVALUE_EXPR <ubound.957>;
  size.958 = MAX_EXPR <size.958, 0>;
  D.7616 = size.958 + -1;
  D.7617 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.958> * 32;
  D.7618 = (sizetype) NON_LVALUE_EXPR <size.958> * 4;
  ubound.959 = (integer(kind=8)) *ntot;
  stride.961 = NON_LVALUE_EXPR <ubound.959>;
  stride.961 = MAX_EXPR <stride.961, 0>;
  ubound.960 = (integer(kind=8)) *pcol;
  size.963 = stride.961 * NON_LVALUE_EXPR <ubound.960>;
  size.963 = MAX_EXPR <size.963, 0>;
  D.7613 = size.963 + -1;
  D.7614 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.963> * 64;
  D.7615 = (sizetype) NON_LVALUE_EXPR <size.963> * 8;
  offset.962 = ~NON_LVALUE_EXPR <stride.961>;
  ubound.993 = (integer(kind=8)) *q;
  size.994 = NON_LVALUE_EXPR <ubound.993>;
  size.994 = MAX_EXPR <size.994, 0>;
  D.7610 = size.994 + -1;
  D.7611 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.994> * 32;
  D.7612 = (sizetype) NON_LVALUE_EXPR <size.994> * 4;
  ubound.948 = (integer(kind=8)) *ntot;
  stride.950 = NON_LVALUE_EXPR <ubound.948>;
  stride.950 = MAX_EXPR <stride.950, 0>;
  ubound.949 = (integer(kind=8)) *r;
  size.952 = stride.950 * NON_LVALUE_EXPR <ubound.949>;
  size.952 = MAX_EXPR <size.952, 0>;
  D.7607 = size.952 + -1;
  D.7608 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.952> * 64;
  D.7609 = (sizetype) NON_LVALUE_EXPR <size.952> * 8;
  offset.951 = ~NON_LVALUE_EXPR <stride.950>;
  ubound.976 = (integer(kind=8)) *q;
  stride.978 = NON_LVALUE_EXPR <ubound.976>;
  stride.978 = MAX_EXPR <stride.978, 0>;
  ubound.977 = (integer(kind=8)) *r;
  size.980 = stride.978 * NON_LVALUE_EXPR <ubound.977>;
  size.980 = MAX_EXPR <size.980, 0>;
  D.7604 = size.980 + -1;
  D.7605 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.980> * 64;
  D.7606 = (sizetype) NON_LVALUE_EXPR <size.980> * 8;
  offset.979 = ~NON_LVALUE_EXPR <stride.978>;
  ubound.971 = (integer(kind=8)) *r;
  stride.973 = NON_LVALUE_EXPR <ubound.971>;
  stride.973 = MAX_EXPR <stride.973, 0>;
  ubound.972 = (integer(kind=8)) *r;
  size.975 = stride.973 * NON_LVALUE_EXPR <ubound.972>;
  size.975 = MAX_EXPR <size.975, 0>;
  D.7601 = size.975 + -1;
  D.7602 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.975> * 64;
  D.7603 = (sizetype) NON_LVALUE_EXPR <size.975> * 8;
  offset.974 = ~NON_LVALUE_EXPR <stride.973>;
  ubound.981 = (integer(kind=8)) *q;
  stride.983 = NON_LVALUE_EXPR <ubound.981>;
  stride.983 = MAX_EXPR <stride.983, 0>;
  ubound.982 = (integer(kind=8)) *r;
  size.985 = stride.983 * NON_LVALUE_EXPR <ubound.982>;
  size.985 = MAX_EXPR <size.985, 0>;
  D.7598 = size.985 + -1;
  D.7599 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.985> * 64;
  D.7600 = (sizetype) NON_LVALUE_EXPR <size.985> * 8;
  offset.984 = ~NON_LVALUE_EXPR <stride.983>;
  ubound.964 = (integer(kind=8)) (*r * *q);
  stride.966 = NON_LVALUE_EXPR <ubound.964>;
  stride.966 = MAX_EXPR <stride.966, 0>;
  ubound.965 = (integer(kind=8)) (*r * *q);
  stride.968 = stride.966 * NON_LVALUE_EXPR <ubound.965>;
  stride.968 = MAX_EXPR <stride.968, 0>;
  ubound.967 = (integer(kind=8)) *m;
  size.970 = stride.968 * NON_LVALUE_EXPR <ubound.967>;
  size.970 = MAX_EXPR <size.970, 0>;
  D.7595 = size.970 + -1;
  D.7596 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.970> * 64;
  D.7597 = (sizetype) NON_LVALUE_EXPR <size.970> * 8;
  offset.969 = ~NON_LVALUE_EXPR <stride.966> - NON_LVALUE_EXPR <stride.968>;
  ubound.988 = (integer(kind=8)) (*r * *q);
  stride.990 = NON_LVALUE_EXPR <ubound.988>;
  stride.990 = MAX_EXPR <stride.990, 0>;
  ubound.989 = (integer(kind=8)) (*r * *q);
  size.992 = stride.990 * NON_LVALUE_EXPR <ubound.989>;
  size.992 = MAX_EXPR <size.992, 0>;
  D.7592 = size.992 + -1;
  D.7593 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.992> * 64;
  D.7594 = (sizetype) NON_LVALUE_EXPR <size.992> * 8;
  offset.991 = ~NON_LVALUE_EXPR <stride.990>;
  ubound.941 = (integer(kind=8)) *q;
  stride.943 = NON_LVALUE_EXPR <ubound.941>;
  stride.943 = MAX_EXPR <stride.943, 0>;
  ubound.942 = (integer(kind=8)) *r;
  stride.945 = stride.943 * NON_LVALUE_EXPR <ubound.942>;
  stride.945 = MAX_EXPR <stride.945, 0>;
  ubound.944 = (integer(kind=8)) *m;
  size.947 = stride.945 * NON_LVALUE_EXPR <ubound.944>;
  size.947 = MAX_EXPR <size.947, 0>;
  D.7589 = size.947 + -1;
  D.7590 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.947> * 64;
  D.7591 = (sizetype) NON_LVALUE_EXPR <size.947> * 8;
  offset.946 = ~NON_LVALUE_EXPR <stride.943> - NON_LVALUE_EXPR <stride.945>;
  ubound.986 = (integer(kind=8)) (*q * *r);
  size.987 = NON_LVALUE_EXPR <ubound.986>;
  size.987 = MAX_EXPR <size.987, 0>;
  D.7586 = size.987 + -1;
  D.7587 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.987> * 64;
  D.7588 = (sizetype) NON_LVALUE_EXPR <size.987> * 8;
  {
    integer(kind=4) D.7495;

    D.7495 = *m;
    s = 1;
    if (s <= D.7495)
      {
        while (1)
          {
            {
              logical(kind=4) D.7585;

              st = (*ist)[(integer(kind=8)) s + -1];
              fin = (*ifin)[(integer(kind=8)) s + -1];
              {
                integer(kind=4) D.7498;

                D.7498 = *r;
                j = 1;
                if (j <= D.7498)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.7514;

                          {
                            integer(kind=4) D.7501;

                            D.7501 = *q;
                            i = 1;
                            if (i <= D.7501)
                              {
                                while (1)
                                  {
                                    {
                                      logical(kind=4) D.7512;

                                      sum = 0.0;
                                      {
                                        integer(kind=4) D.7504;
                                        integer(kind=4) D.7505;

                                        D.7504 = st;
                                        D.7505 = fin;
                                        k = D.7504;
                                        if (k <= D.7505)
                                          {
                                            while (1)
                                              {
                                                {
                                                  logical(kind=4) D.7510;

                                                  if ((*patt)[(integer(kind=8)) k + -1] != 0)
                                                    {
                                                      sum = (*pred)[((integer(kind=8)) (*zcol)[(integer(kind=8)) i + -1] * stride.961 + offset.962) + (integer(kind=8)) k] * (*eps)[((integer(kind=8)) j * stride.950 + offset.951) + (integer(kind=8)) k] + sum;
                                                    }
                                                  L.448:;
                                                  __label_000080:;
                                                  L.446:;
                                                  D.7510 = k == D.7505;
                                                  k = k + 1;
                                                  if (D.7510) goto L.447;
                                                }
                                              }
                                          }
                                        L.447:;
                                      }
                                      (*wkqr1)[((integer(kind=8)) j * stride.978 + offset.979) + (integer(kind=8)) i] = sum;
                                      __label_000090:;
                                      L.444:;
                                      D.7512 = i == D.7501;
                                      i = i + 1;
                                      if (D.7512) goto L.445;
                                    }
                                  }
                              }
                            L.445:;
                          }
                          __label_000100:;
                          L.442:;
                          D.7514 = j == D.7498;
                          j = j + 1;
                          if (D.7514) goto L.443;
                        }
                      }
                  }
                L.443:;
              }
              {
                integer(kind=4) D.7515;

                D.7515 = *r;
                j = 1;
                if (j <= D.7515)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.7529;

                          {
                            integer(kind=4) D.7518;

                            D.7518 = *q;
                            i = 1;
                            if (i <= D.7518)
                              {
                                while (1)
                                  {
                                    {
                                      logical(kind=4) D.7527;

                                      sum = 0.0;
                                      {
                                        integer(kind=4) D.7521;

                                        D.7521 = *r;
                                        k = 1;
                                        if (k <= D.7521)
                                          {
                                            while (1)
                                              {
                                                {
                                                  logical(kind=4) D.7525;

                                                  sum = (*sigmainv)[((integer(kind=8)) k * stride.973 + offset.974) + (integer(kind=8)) j] * (*wkqr1)[((integer(kind=8)) k * stride.978 + offset.979) + (integer(kind=8)) i] + sum;
                                                  __label_000180:;
                                                  L.453:;
                                                  D.7525 = k == D.7521;
                                                  k = k + 1;
                                                  if (D.7525) goto L.454;
                                                }
                                              }
                                          }
                                        L.454:;
                                      }
                                      (*wkqr2)[((integer(kind=8)) j * stride.983 + offset.984) + (integer(kind=8)) i] = sum;
                                      __label_000190:;
                                      L.451:;
                                      D.7527 = i == D.7518;
                                      i = i + 1;
                                      if (D.7527) goto L.452;
                                    }
                                  }
                              }
                            L.452:;
                          }
                          __label_000200:;
                          L.449:;
                          D.7529 = j == D.7515;
                          j = j + 1;
                          if (D.7529) goto L.450;
                        }
                      }
                  }
                L.450:;
              }
              {
                integer(kind=4) D.7530;
                integer(kind=4) D.7531;

                D.7530 = *r * *q;
                D.7531 = *r * *q;
                mmul (&D.7530, &D.7531, (integer(kind=4) *) m, sig, &s, wkrqrq2);
              }
              {
                integer(kind=4) D.7532;

                D.7532 = *r * *q;
                i = 1;
                if (i <= D.7532)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.7542;

                          {
                            integer(kind=4) D.7535;
                            integer(kind=4) D.7536;

                            D.7535 = i + 1;
                            D.7536 = *r * *q;
                            j = D.7535;
                            if (j <= D.7536)
                              {
                                while (1)
                                  {
                                    {
                                      logical(kind=4) D.7540;

                                      (*wkrqrq2)[((integer(kind=8)) i * stride.990 + offset.991) + (integer(kind=8)) j] = (*wkrqrq2)[((integer(kind=8)) j * stride.990 + offset.991) + (integer(kind=8)) i];
                                      __label_000210:;
                                      L.457:;
                                      D.7540 = j == D.7536;
                                      j = j + 1;
                                      if (D.7540) goto L.458;
                                    }
                                  }
                              }
                            L.458:;
                          }
                          __label_000220:;
                          L.455:;
                          D.7542 = i == D.7532;
                          i = i + 1;
                          if (D.7542) goto L.456;
                        }
                      }
                  }
                L.456:;
              }
              ia = 0;
              {
                integer(kind=4) D.7543;

                D.7543 = *r;
                i = 1;
                if (i <= D.7543)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.7562;

                          {
                            integer(kind=4) D.7546;

                            D.7546 = *q;
                            ii = 1;
                            if (ii <= D.7546)
                              {
                                while (1)
                                  {
                                    {
                                      logical(kind=4) D.7560;

                                      ia = ia + 1;
                                      ja = 0;
                                      sum = 0.0;
                                      {
                                        integer(kind=4) D.7549;

                                        D.7549 = *r;
                                        j = 1;
                                        if (j <= D.7549)
                                          {
                                            while (1)
                                              {
                                                {
                                                  logical(kind=4) D.7558;

                                                  {
                                                    integer(kind=4) D.7552;

                                                    D.7552 = *q;
                                                    jj = 1;
                                                    if (jj <= D.7552)
                                                      {
                                                        while (1)
                                                          {
                                                            {
                                                              logical(kind=4) D.7556;

                                                              ja = ja + 1;
                                                              sum = (*wkrqrq2)[((integer(kind=8)) ja * stride.990 + offset.991) + (integer(kind=8)) ia] * (*wkqr2)[((integer(kind=8)) j * stride.983 + offset.984) + (integer(kind=8)) jj] + sum;
                                                              __label_000360:;
                                                              L.465:;
                                                              D.7556 = jj == D.7552;
                                                              jj = jj + 1;
                                                              if (D.7556) goto L.466;
                                                            }
                                                          }
                                                      }
                                                    L.466:;
                                                  }
                                                  __label_000370:;
                                                  L.463:;
                                                  D.7558 = j == D.7549;
                                                  j = j + 1;
                                                  if (D.7558) goto L.464;
                                                }
                                              }
                                          }
                                        L.464:;
                                      }
                                      (*b)[(((integer(kind=8)) s * stride.945 + offset.946) + (integer(kind=8)) i * stride.943) + (integer(kind=8)) ii] = sum;
                                      __label_000380:;
                                      L.461:;
                                      D.7560 = ii == D.7546;
                                      ii = ii + 1;
                                      if (D.7560) goto L.462;
                                    }
                                  }
                              }
                            L.462:;
                          }
                          __label_000400:;
                          L.459:;
                          D.7562 = i == D.7543;
                          i = i + 1;
                          if (D.7562) goto L.460;
                        }
                      }
                  }
                L.460:;
              }
              {
                integer(kind=4) D.7563;

                D.7563 = *r * *q;
                i = 1;
                if (i <= D.7563)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.7567;

                          (*wkqrv)[(integer(kind=8)) i + -1] = (real(kind=8)) gauss ();
                          __label_000410:;
                          L.467:;
                          D.7567 = i == D.7563;
                          i = i + 1;
                          if (D.7567) goto L.468;
                        }
                      }
                  }
                L.468:;
              }
              ia = 0;
              {
                integer(kind=4) D.7568;

                D.7568 = *r;
                i = 1;
                if (i <= D.7568)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.7583;

                          {
                            integer(kind=4) D.7571;

                            D.7571 = *q;
                            ii = 1;
                            if (ii <= D.7571)
                              {
                                while (1)
                                  {
                                    {
                                      logical(kind=4) D.7581;

                                      ia = ia + 1;
                                      sum = 0.0;
                                      {
                                        integer(kind=4) D.7574;
                                        integer(kind=4) D.7575;

                                        D.7574 = ia;
                                        D.7575 = *r * *q;
                                        ja = D.7574;
                                        if (ja <= D.7575)
                                          {
                                            while (1)
                                              {
                                                {
                                                  logical(kind=4) D.7579;

                                                  sum = (*sig)[(((integer(kind=8)) s * stride.968 + offset.969) + (integer(kind=8)) ja * stride.966) + (integer(kind=8)) ia] * (*wkqrv)[(integer(kind=8)) ja + -1] + sum;
                                                  __label_000430:;
                                                  L.473:;
                                                  D.7579 = ja == D.7575;
                                                  ja = ja + 1;
                                                  if (D.7579) goto L.474;
                                                }
                                              }
                                          }
                                        L.474:;
                                      }
                                      (*b)[(((integer(kind=8)) s * stride.945 + offset.946) + (integer(kind=8)) i * stride.943) + (integer(kind=8)) ii] = (*b)[(((integer(kind=8)) s * stride.945 + offset.946) + (integer(kind=8)) i * stride.943) + (integer(kind=8)) ii] + sum;
                                      __label_000440:;
                                      L.471:;
                                      D.7581 = ii == D.7571;
                                      ii = ii + 1;
                                      if (D.7581) goto L.472;
                                    }
                                  }
                              }
                            L.472:;
                          }
                          __label_000450:;
                          L.469:;
                          D.7583 = i == D.7568;
                          i = i + 1;
                          if (D.7583) goto L.470;
                        }
                      }
                  }
                L.470:;
              }
              __label_000500:;
              L.440:;
              D.7585 = s == D.7495;
              s = s + 1;
              if (D.7585) goto L.441;
            }
          }
      }
    L.441:;
  }
  return;
}


mksig (integer(kind=4) & restrict r, integer(kind=4) & restrict q, integer(kind=4) & restrict m, real(kind=8)[0:D.7820] * restrict psi, real(kind=8)[0:D.7808] * restrict sigma, real(kind=8)[0:D.7799] * restrict ztz, real(kind=8)[0:D.7802] * restrict sig, real(kind=8)[0:D.7811] * restrict wkrr1, real(kind=8)[0:D.7805] * restrict wkrr2, real(kind=8)[0:D.7817] * restrict wkrqrq1, real(kind=8)[0:D.7814] * restrict wkrqrq2, integer(kind=4) & restrict zflag, integer(kind=4) & restrict nhyp, real(kind=8)[0:D.7823] * restrict hyp)
{
  real(kind=8) c;
  integer(kind=8) ubound.995;
  integer(kind=8) size.996;
  integer(kind=4) i;
  integer(kind=4) ia;
  integer(kind=4) ii;
  integer(kind=4) j;
  integer(kind=4) ja;
  integer(kind=4) jj;
  integer(kind=4) k;
  integer(kind=8) ubound.997;
  integer(kind=8) ubound.998;
  integer(kind=8) stride.999;
  integer(kind=8) offset.1000;
  integer(kind=8) size.1001;
  integer(kind=4) s;
  integer(kind=8) ubound.1002;
  integer(kind=8) ubound.1003;
  integer(kind=8) stride.1004;
  integer(kind=8) ubound.1005;
  integer(kind=8) stride.1006;
  integer(kind=8) offset.1007;
  integer(kind=8) size.1008;
  integer(kind=8) ubound.1009;
  integer(kind=8) ubound.1010;
  integer(kind=8) stride.1011;
  integer(kind=8) offset.1012;
  integer(kind=8) size.1013;
  integer(kind=8) ubound.1014;
  integer(kind=8) ubound.1015;
  integer(kind=8) stride.1016;
  integer(kind=8) offset.1017;
  integer(kind=8) size.1018;
  integer(kind=8) ubound.1019;
  integer(kind=8) ubound.1020;
  integer(kind=8) stride.1021;
  integer(kind=8) offset.1022;
  integer(kind=8) size.1023;
  integer(kind=8) ubound.1024;
  integer(kind=8) ubound.1025;
  integer(kind=8) stride.1026;
  integer(kind=8) offset.1027;
  integer(kind=8) size.1028;
  integer(kind=8) ubound.1029;
  integer(kind=8) ubound.1030;
  integer(kind=8) stride.1031;
  integer(kind=8) offset.1032;
  integer(kind=8) size.1033;
  integer(kind=8) ubound.1034;
  integer(kind=8) ubound.1035;
  integer(kind=8) stride.1036;
  integer(kind=8) ubound.1037;
  integer(kind=8) stride.1038;
  integer(kind=8) offset.1039;
  integer(kind=8) size.1040;
  integer(kind=8) D.7799;
  bitsizetype D.7800;
  sizetype D.7801;
  integer(kind=8) D.7802;
  bitsizetype D.7803;
  sizetype D.7804;
  integer(kind=8) D.7805;
  bitsizetype D.7806;
  sizetype D.7807;
  integer(kind=8) D.7808;
  bitsizetype D.7809;
  sizetype D.7810;
  integer(kind=8) D.7811;
  bitsizetype D.7812;
  sizetype D.7813;
  integer(kind=8) D.7814;
  bitsizetype D.7815;
  sizetype D.7816;
  integer(kind=8) D.7817;
  bitsizetype D.7818;
  sizetype D.7819;
  integer(kind=8) D.7820;
  bitsizetype D.7821;
  sizetype D.7822;
  integer(kind=8) D.7823;
  bitsizetype D.7824;
  sizetype D.7825;

  ubound.995 = (integer(kind=8)) *nhyp;
  size.996 = NON_LVALUE_EXPR <ubound.995>;
  size.996 = MAX_EXPR <size.996, 0>;
  D.7823 = size.996 + -1;
  D.7824 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.996> * 64;
  D.7825 = (sizetype) NON_LVALUE_EXPR <size.996> * 8;
  ubound.997 = (integer(kind=8)) (*r * *q);
  stride.999 = NON_LVALUE_EXPR <ubound.997>;
  stride.999 = MAX_EXPR <stride.999, 0>;
  ubound.998 = (integer(kind=8)) (*r * *q);
  size.1001 = stride.999 * NON_LVALUE_EXPR <ubound.998>;
  size.1001 = MAX_EXPR <size.1001, 0>;
  D.7820 = size.1001 + -1;
  D.7821 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1001> * 64;
  D.7822 = (sizetype) NON_LVALUE_EXPR <size.1001> * 8;
  offset.1000 = ~NON_LVALUE_EXPR <stride.999>;
  ubound.1014 = (integer(kind=8)) (*r * *q);
  stride.1016 = NON_LVALUE_EXPR <ubound.1014>;
  stride.1016 = MAX_EXPR <stride.1016, 0>;
  ubound.1015 = (integer(kind=8)) (*r * *q);
  size.1018 = stride.1016 * NON_LVALUE_EXPR <ubound.1015>;
  size.1018 = MAX_EXPR <size.1018, 0>;
  D.7817 = size.1018 + -1;
  D.7818 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1018> * 64;
  D.7819 = (sizetype) NON_LVALUE_EXPR <size.1018> * 8;
  offset.1017 = ~NON_LVALUE_EXPR <stride.1016>;
  ubound.1019 = (integer(kind=8)) (*r * *q);
  stride.1021 = NON_LVALUE_EXPR <ubound.1019>;
  stride.1021 = MAX_EXPR <stride.1021, 0>;
  ubound.1020 = (integer(kind=8)) (*r * *q);
  size.1023 = stride.1021 * NON_LVALUE_EXPR <ubound.1020>;
  size.1023 = MAX_EXPR <size.1023, 0>;
  D.7814 = size.1023 + -1;
  D.7815 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1023> * 64;
  D.7816 = (sizetype) NON_LVALUE_EXPR <size.1023> * 8;
  offset.1022 = ~NON_LVALUE_EXPR <stride.1021>;
  ubound.1024 = (integer(kind=8)) *r;
  stride.1026 = NON_LVALUE_EXPR <ubound.1024>;
  stride.1026 = MAX_EXPR <stride.1026, 0>;
  ubound.1025 = (integer(kind=8)) *r;
  size.1028 = stride.1026 * NON_LVALUE_EXPR <ubound.1025>;
  size.1028 = MAX_EXPR <size.1028, 0>;
  D.7811 = size.1028 + -1;
  D.7812 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1028> * 64;
  D.7813 = (sizetype) NON_LVALUE_EXPR <size.1028> * 8;
  offset.1027 = ~NON_LVALUE_EXPR <stride.1026>;
  ubound.1009 = (integer(kind=8)) *r;
  stride.1011 = NON_LVALUE_EXPR <ubound.1009>;
  stride.1011 = MAX_EXPR <stride.1011, 0>;
  ubound.1010 = (integer(kind=8)) *r;
  size.1013 = stride.1011 * NON_LVALUE_EXPR <ubound.1010>;
  size.1013 = MAX_EXPR <size.1013, 0>;
  D.7808 = size.1013 + -1;
  D.7809 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1013> * 64;
  D.7810 = (sizetype) NON_LVALUE_EXPR <size.1013> * 8;
  offset.1012 = ~NON_LVALUE_EXPR <stride.1011>;
  ubound.1029 = (integer(kind=8)) *r;
  stride.1031 = NON_LVALUE_EXPR <ubound.1029>;
  stride.1031 = MAX_EXPR <stride.1031, 0>;
  ubound.1030 = (integer(kind=8)) *r;
  size.1033 = stride.1031 * NON_LVALUE_EXPR <ubound.1030>;
  size.1033 = MAX_EXPR <size.1033, 0>;
  D.7805 = size.1033 + -1;
  D.7806 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1033> * 64;
  D.7807 = (sizetype) NON_LVALUE_EXPR <size.1033> * 8;
  offset.1032 = ~NON_LVALUE_EXPR <stride.1031>;
  ubound.1002 = (integer(kind=8)) (*r * *q);
  stride.1004 = NON_LVALUE_EXPR <ubound.1002>;
  stride.1004 = MAX_EXPR <stride.1004, 0>;
  ubound.1003 = (integer(kind=8)) (*r * *q);
  stride.1006 = stride.1004 * NON_LVALUE_EXPR <ubound.1003>;
  stride.1006 = MAX_EXPR <stride.1006, 0>;
  ubound.1005 = (integer(kind=8)) *m;
  size.1008 = stride.1006 * NON_LVALUE_EXPR <ubound.1005>;
  size.1008 = MAX_EXPR <size.1008, 0>;
  D.7802 = size.1008 + -1;
  D.7803 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1008> * 64;
  D.7804 = (sizetype) NON_LVALUE_EXPR <size.1008> * 8;
  offset.1007 = ~NON_LVALUE_EXPR <stride.1004> - NON_LVALUE_EXPR <stride.1006>;
  ubound.1034 = (integer(kind=8)) *q;
  stride.1036 = NON_LVALUE_EXPR <ubound.1034>;
  stride.1036 = MAX_EXPR <stride.1036, 0>;
  ubound.1035 = (integer(kind=8)) *q;
  stride.1038 = stride.1036 * NON_LVALUE_EXPR <ubound.1035>;
  stride.1038 = MAX_EXPR <stride.1038, 0>;
  ubound.1037 = (integer(kind=8)) *m;
  size.1040 = stride.1038 * NON_LVALUE_EXPR <ubound.1037>;
  size.1040 = MAX_EXPR <size.1040, 0>;
  D.7799 = size.1040 + -1;
  D.7800 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1040> * 64;
  D.7801 = (sizetype) NON_LVALUE_EXPR <size.1040> * 8;
  offset.1039 = ~NON_LVALUE_EXPR <stride.1036> - NON_LVALUE_EXPR <stride.1038>;
  if (*zflag == 1)
    {
      k = (*r * (*r + 1)) / 2 + 2;
      c = (*hyp)[(integer(kind=8)) k + -1];
      {
        integer(kind=4) D.7708;

        D.7708 = *r * *q;
        i = 1;
        if (i <= D.7708)
          {
            while (1)
              {
                {
                  logical(kind=4) D.7718;

                  {
                    integer(kind=4) D.7711;
                    integer(kind=4) D.7712;

                    D.7711 = i;
                    D.7712 = *r * *q;
                    j = D.7711;
                    if (j <= D.7712)
                      {
                        while (1)
                          {
                            {
                              logical(kind=4) D.7716;

                              k = k + 1;
                              (*psi)[((integer(kind=8)) j * stride.999 + offset.1000) + (integer(kind=8)) i] = (*hyp)[(integer(kind=8)) k + -1] / c;
                              __label_000003:;
                              L.478:;
                              D.7716 = j == D.7712;
                              j = j + 1;
                              if (D.7716) goto L.479;
                            }
                          }
                      }
                    L.479:;
                  }
                  __label_000004:;
                  L.476:;
                  D.7718 = i == D.7708;
                  i = i + 1;
                  if (D.7718) goto L.477;
                }
              }
          }
        L.477:;
      }
    }
  L.475:;
  {
    integer(kind=4) D.7719;

    D.7719 = *r * *q;
    i = 1;
    if (i <= D.7719)
      {
        while (1)
          {
            {
              logical(kind=4) D.7729;

              {
                integer(kind=4) D.7722;
                integer(kind=4) D.7723;

                D.7722 = i;
                D.7723 = *r * *q;
                j = D.7722;
                if (j <= D.7723)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.7727;

                          (*wkrqrq1)[((integer(kind=8)) j * stride.1016 + offset.1017) + (integer(kind=8)) i] = (*psi)[((integer(kind=8)) j * stride.999 + offset.1000) + (integer(kind=8)) i];
                          __label_000001:;
                          L.482:;
                          D.7727 = j == D.7723;
                          j = j + 1;
                          if (D.7727) goto L.483;
                        }
                      }
                  }
                L.483:;
              }
              __label_000002:;
              L.480:;
              D.7729 = i == D.7719;
              i = i + 1;
              if (D.7729) goto L.481;
            }
          }
      }
    L.481:;
  }
  {
    integer(kind=4) D.7730;
    integer(kind=4) D.7731;

    D.7730 = *r * *q;
    D.7731 = *r * *q;
    chfc (&D.7730, &D.7731, wkrqrq1);
  }
  {
    integer(kind=4) D.7732;
    integer(kind=4) D.7733;

    D.7732 = *r * *q;
    D.7733 = *r * *q;
    bkslv (&D.7732, &D.7733, wkrqrq1);
  }
  {
    integer(kind=4) D.7734;
    integer(kind=4) D.7735;

    D.7734 = *r * *q;
    D.7735 = *r * *q;
    mm (&D.7734, &D.7735, wkrqrq1, wkrqrq2);
  }
  {
    integer(kind=4) D.7736;

    D.7736 = *r;
    i = 1;
    if (i <= D.7736)
      {
        while (1)
          {
            {
              logical(kind=4) D.7746;

              {
                integer(kind=4) D.7739;
                integer(kind=4) D.7740;

                D.7739 = i;
                D.7740 = *r;
                j = D.7739;
                if (j <= D.7740)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.7744;

                          (*wkrr1)[((integer(kind=8)) j * stride.1026 + offset.1027) + (integer(kind=8)) i] = (*sigma)[((integer(kind=8)) j * stride.1011 + offset.1012) + (integer(kind=8)) i];
                          __label_000005:;
                          L.486:;
                          D.7744 = j == D.7740;
                          j = j + 1;
                          if (D.7744) goto L.487;
                        }
                      }
                  }
                L.487:;
              }
              __label_000006:;
              L.484:;
              D.7746 = i == D.7736;
              i = i + 1;
              if (D.7746) goto L.485;
            }
          }
      }
    L.485:;
  }
  chfc ((integer(kind=4) *) r, (integer(kind=4) *) r, wkrr1);
  bkslv ((integer(kind=4) *) r, (integer(kind=4) *) r, wkrr1);
  mm ((integer(kind=4) *) r, (integer(kind=4) *) r, wkrr1, wkrr2);
  {
    integer(kind=4) D.7747;

    D.7747 = *r;
    i = 1;
    if (i <= D.7747)
      {
        while (1)
          {
            {
              logical(kind=4) D.7757;

              {
                integer(kind=4) D.7750;
                integer(kind=4) D.7751;

                D.7750 = i + 1;
                D.7751 = *r;
                j = D.7750;
                if (j <= D.7751)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.7755;

                          (*wkrr2)[((integer(kind=8)) i * stride.1031 + offset.1032) + (integer(kind=8)) j] = (*wkrr2)[((integer(kind=8)) j * stride.1031 + offset.1032) + (integer(kind=8)) i];
                          __label_000008:;
                          L.490:;
                          D.7755 = j == D.7751;
                          j = j + 1;
                          if (D.7755) goto L.491;
                        }
                      }
                  }
                L.491:;
              }
              __label_000009:;
              L.488:;
              D.7757 = i == D.7747;
              i = i + 1;
              if (D.7757) goto L.489;
            }
          }
      }
    L.489:;
  }
  {
    integer(kind=4) D.7758;

    D.7758 = *m;
    s = 1;
    if (s <= D.7758)
      {
        while (1)
          {
            {
              logical(kind=4) D.7798;

              {
                integer(kind=4) D.7761;

                D.7761 = *r;
                i = 1;
                if (i <= D.7761)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.7781;

                          {
                            integer(kind=4) D.7764;
                            integer(kind=4) D.7765;

                            D.7764 = i;
                            D.7765 = *r;
                            j = D.7764;
                            if (j <= D.7765)
                              {
                                while (1)
                                  {
                                    {
                                      logical(kind=4) D.7779;

                                      {
                                        integer(kind=4) D.7768;

                                        D.7768 = *q;
                                        ii = 1;
                                        if (ii <= D.7768)
                                          {
                                            while (1)
                                              {
                                                {
                                                  logical(kind=4) D.7777;

                                                  {
                                                    integer(kind=4) D.7771;

                                                    D.7771 = *q;
                                                    jj = 1;
                                                    if (jj <= D.7771)
                                                      {
                                                        while (1)
                                                          {
                                                            {
                                                              logical(kind=4) D.7775;

                                                              ia = (i + -1) * *q + ii;
                                                              ja = (j + -1) * *q + jj;
                                                              (*sig)[(((integer(kind=8)) s * stride.1006 + offset.1007) + (integer(kind=8)) ja * stride.1004) + (integer(kind=8)) ia] = (*wkrr2)[((integer(kind=8)) j * stride.1031 + offset.1032) + (integer(kind=8)) i] * (*ztz)[(((integer(kind=8)) s * stride.1038 + offset.1039) + (integer(kind=8)) jj * stride.1036) + (integer(kind=8)) ii];
                                                              __label_000010:;
                                                              L.500:;
                                                              D.7775 = jj == D.7771;
                                                              jj = jj + 1;
                                                              if (D.7775) goto L.501;
                                                            }
                                                          }
                                                      }
                                                    L.501:;
                                                  }
                                                  __label_000015:;
                                                  L.498:;
                                                  D.7777 = ii == D.7768;
                                                  ii = ii + 1;
                                                  if (D.7777) goto L.499;
                                                }
                                              }
                                          }
                                        L.499:;
                                      }
                                      __label_000020:;
                                      L.496:;
                                      D.7779 = j == D.7765;
                                      j = j + 1;
                                      if (D.7779) goto L.497;
                                    }
                                  }
                              }
                            L.497:;
                          }
                          __label_000030:;
                          L.494:;
                          D.7781 = i == D.7761;
                          i = i + 1;
                          if (D.7781) goto L.495;
                        }
                      }
                  }
                L.495:;
              }
              {
                integer(kind=4) D.7782;

                D.7782 = *r * *q;
                i = 1;
                if (i <= D.7782)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.7792;

                          {
                            integer(kind=4) D.7785;
                            integer(kind=4) D.7786;

                            D.7785 = i;
                            D.7786 = *r * *q;
                            j = D.7785;
                            if (j <= D.7786)
                              {
                                while (1)
                                  {
                                    {
                                      logical(kind=4) D.7790;

                                      (*sig)[(((integer(kind=8)) s * stride.1006 + offset.1007) + (integer(kind=8)) j * stride.1004) + (integer(kind=8)) i] = (*sig)[(((integer(kind=8)) s * stride.1006 + offset.1007) + (integer(kind=8)) j * stride.1004) + (integer(kind=8)) i] + (*wkrqrq2)[((integer(kind=8)) j * stride.1021 + offset.1022) + (integer(kind=8)) i];
                                      __label_000035:;
                                      L.504:;
                                      D.7790 = j == D.7786;
                                      j = j + 1;
                                      if (D.7790) goto L.505;
                                    }
                                  }
                              }
                            L.505:;
                          }
                          __label_000040:;
                          L.502:;
                          D.7792 = i == D.7782;
                          i = i + 1;
                          if (D.7792) goto L.503;
                        }
                      }
                  }
                L.503:;
              }
              {
                integer(kind=4) D.7793;
                integer(kind=4) D.7794;

                D.7793 = *r * *q;
                D.7794 = *r * *q;
                chl (&D.7793, &D.7794, (integer(kind=4) *) m, sig, &s);
              }
              {
                integer(kind=4) D.7795;
                integer(kind=4) D.7796;

                D.7795 = *r * *q;
                D.7796 = *r * *q;
                bkslvl (&D.7795, &D.7796, (integer(kind=4) *) m, sig, &s);
              }
              __label_000100:;
              L.492:;
              D.7798 = s == D.7758;
              s = s + 1;
              if (D.7798) goto L.493;
            }
          }
      }
    L.493:;
  }
  return;
}


mkpsi0 (integer(kind=4) & restrict r, integer(kind=4) & restrict q, integer(kind=4) & restrict m, real(kind=8)[0:D.7904] * restrict psi, real(kind=8)[0:D.7901] * restrict sig, real(kind=8)[0:D.7898] * restrict wkrqrq1)
{
  integer(kind=4) i;
  integer(kind=4) j;
  integer(kind=8) ubound.1041;
  integer(kind=8) ubound.1042;
  integer(kind=8) stride.1043;
  integer(kind=8) offset.1044;
  integer(kind=8) size.1045;
  integer(kind=4) s;
  integer(kind=8) ubound.1046;
  integer(kind=8) ubound.1047;
  integer(kind=8) stride.1048;
  integer(kind=8) ubound.1049;
  integer(kind=8) stride.1050;
  integer(kind=8) offset.1051;
  integer(kind=8) size.1052;
  integer(kind=8) ubound.1053;
  integer(kind=8) ubound.1054;
  integer(kind=8) stride.1055;
  integer(kind=8) offset.1056;
  integer(kind=8) size.1057;
  integer(kind=8) D.7898;
  bitsizetype D.7899;
  sizetype D.7900;
  integer(kind=8) D.7901;
  bitsizetype D.7902;
  sizetype D.7903;
  integer(kind=8) D.7904;
  bitsizetype D.7905;
  sizetype D.7906;

  ubound.1041 = (integer(kind=8)) (*r * *q);
  stride.1043 = NON_LVALUE_EXPR <ubound.1041>;
  stride.1043 = MAX_EXPR <stride.1043, 0>;
  ubound.1042 = (integer(kind=8)) (*r * *q);
  size.1045 = stride.1043 * NON_LVALUE_EXPR <ubound.1042>;
  size.1045 = MAX_EXPR <size.1045, 0>;
  D.7904 = size.1045 + -1;
  D.7905 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1045> * 64;
  D.7906 = (sizetype) NON_LVALUE_EXPR <size.1045> * 8;
  offset.1044 = ~NON_LVALUE_EXPR <stride.1043>;
  ubound.1046 = (integer(kind=8)) (*r * *q);
  stride.1048 = NON_LVALUE_EXPR <ubound.1046>;
  stride.1048 = MAX_EXPR <stride.1048, 0>;
  ubound.1047 = (integer(kind=8)) (*r * *q);
  stride.1050 = stride.1048 * NON_LVALUE_EXPR <ubound.1047>;
  stride.1050 = MAX_EXPR <stride.1050, 0>;
  ubound.1049 = (integer(kind=8)) *m;
  size.1052 = stride.1050 * NON_LVALUE_EXPR <ubound.1049>;
  size.1052 = MAX_EXPR <size.1052, 0>;
  D.7901 = size.1052 + -1;
  D.7902 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1052> * 64;
  D.7903 = (sizetype) NON_LVALUE_EXPR <size.1052> * 8;
  offset.1051 = ~NON_LVALUE_EXPR <stride.1048> - NON_LVALUE_EXPR <stride.1050>;
  ubound.1053 = (integer(kind=8)) (*r * *q);
  stride.1055 = NON_LVALUE_EXPR <ubound.1053>;
  stride.1055 = MAX_EXPR <stride.1055, 0>;
  ubound.1054 = (integer(kind=8)) (*r * *q);
  size.1057 = stride.1055 * NON_LVALUE_EXPR <ubound.1054>;
  size.1057 = MAX_EXPR <size.1057, 0>;
  D.7898 = size.1057 + -1;
  D.7899 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1057> * 64;
  D.7900 = (sizetype) NON_LVALUE_EXPR <size.1057> * 8;
  offset.1056 = ~NON_LVALUE_EXPR <stride.1055>;
  {
    integer(kind=4) D.7857;

    D.7857 = *r * *q;
    i = 1;
    if (i <= D.7857)
      {
        while (1)
          {
            {
              logical(kind=4) D.7867;

              {
                integer(kind=4) D.7860;
                integer(kind=4) D.7861;

                D.7860 = i;
                D.7861 = *r * *q;
                j = D.7860;
                if (j <= D.7861)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.7865;

                          (*psi)[((integer(kind=8)) j * stride.1043 + offset.1044) + (integer(kind=8)) i] = 0.0;
                          __label_000004:;
                          L.508:;
                          D.7865 = j == D.7861;
                          j = j + 1;
                          if (D.7865) goto L.509;
                        }
                      }
                  }
                L.509:;
              }
              __label_000005:;
              L.506:;
              D.7867 = i == D.7857;
              i = i + 1;
              if (D.7867) goto L.507;
            }
          }
      }
    L.507:;
  }
  {
    integer(kind=4) D.7868;

    D.7868 = *m;
    s = 1;
    if (s <= D.7868)
      {
        while (1)
          {
            {
              logical(kind=4) D.7885;

              {
                integer(kind=4) D.7871;
                integer(kind=4) D.7872;

                D.7871 = *r * *q;
                D.7872 = *r * *q;
                mmul (&D.7871, &D.7872, (integer(kind=4) *) m, sig, &s, wkrqrq1);
              }
              {
                integer(kind=4) D.7873;

                D.7873 = *r * *q;
                i = 1;
                if (i <= D.7873)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.7883;

                          {
                            integer(kind=4) D.7876;
                            integer(kind=4) D.7877;

                            D.7876 = i;
                            D.7877 = *r * *q;
                            j = D.7876;
                            if (j <= D.7877)
                              {
                                while (1)
                                  {
                                    {
                                      logical(kind=4) D.7881;

                                      (*psi)[((integer(kind=8)) j * stride.1043 + offset.1044) + (integer(kind=8)) i] = (*psi)[((integer(kind=8)) j * stride.1043 + offset.1044) + (integer(kind=8)) i] + (*wkrqrq1)[((integer(kind=8)) j * stride.1055 + offset.1056) + (integer(kind=8)) i];
                                      __label_000010:;
                                      L.514:;
                                      D.7881 = j == D.7877;
                                      j = j + 1;
                                      if (D.7881) goto L.515;
                                    }
                                  }
                              }
                            L.515:;
                          }
                          __label_000020:;
                          L.512:;
                          D.7883 = i == D.7873;
                          i = i + 1;
                          if (D.7883) goto L.513;
                        }
                      }
                  }
                L.513:;
              }
              __label_000100:;
              L.510:;
              D.7885 = s == D.7868;
              s = s + 1;
              if (D.7885) goto L.511;
            }
          }
      }
    L.511:;
  }
  {
    integer(kind=4) D.7886;

    D.7886 = *r * *q;
    i = 1;
    if (i <= D.7886)
      {
        while (1)
          {
            {
              logical(kind=4) D.7897;

              {
                integer(kind=4) D.7889;
                integer(kind=4) D.7890;

                D.7889 = i;
                D.7890 = *r * *q;
                j = D.7889;
                if (j <= D.7890)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.7895;

                          (*psi)[((integer(kind=8)) j * stride.1043 + offset.1044) + (integer(kind=8)) i] = (*psi)[((integer(kind=8)) j * stride.1043 + offset.1044) + (integer(kind=8)) i] / (real(kind=8)) *m;
                          if (i != j)
                            {
                              (*psi)[((integer(kind=8)) i * stride.1043 + offset.1044) + (integer(kind=8)) j] = (*psi)[((integer(kind=8)) j * stride.1043 + offset.1044) + (integer(kind=8)) i];
                            }
                          L.520:;
                          __label_000105:;
                          L.518:;
                          D.7895 = j == D.7890;
                          j = j + 1;
                          if (D.7895) goto L.519;
                        }
                      }
                  }
                L.519:;
              }
              __label_000110:;
              L.516:;
              D.7897 = i == D.7886;
              i = i + 1;
              if (D.7897) goto L.517;
            }
          }
      }
    L.517:;
  }
  return;
}


mksigma (integer(kind=4) & restrict ntot, integer(kind=4) & restrict r, real(kind=8)[0:D.7975] * restrict eps, integer(kind=4) & restrict nstar, real(kind=8)[0:D.7981] * restrict sigma, integer(kind=4)[0:D.7978] * restrict patt)
{
  integer(kind=8) ubound.1058;
  integer(kind=8) ubound.1059;
  integer(kind=8) stride.1060;
  integer(kind=8) offset.1061;
  integer(kind=8) size.1062;
  integer(kind=4) i;
  integer(kind=4) j;
  integer(kind=4) k;
  integer(kind=8) ubound.1063;
  integer(kind=8) size.1064;
  integer(kind=8) ubound.1065;
  integer(kind=8) ubound.1066;
  integer(kind=8) stride.1067;
  integer(kind=8) offset.1068;
  integer(kind=8) size.1069;
  integer(kind=8) D.7975;
  bitsizetype D.7976;
  sizetype D.7977;
  integer(kind=8) D.7978;
  bitsizetype D.7979;
  sizetype D.7980;
  integer(kind=8) D.7981;
  bitsizetype D.7982;
  sizetype D.7983;

  ubound.1065 = (integer(kind=8)) *r;
  stride.1067 = NON_LVALUE_EXPR <ubound.1065>;
  stride.1067 = MAX_EXPR <stride.1067, 0>;
  ubound.1066 = (integer(kind=8)) *r;
  size.1069 = stride.1067 * NON_LVALUE_EXPR <ubound.1066>;
  size.1069 = MAX_EXPR <size.1069, 0>;
  D.7981 = size.1069 + -1;
  D.7982 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1069> * 64;
  D.7983 = (sizetype) NON_LVALUE_EXPR <size.1069> * 8;
  offset.1068 = ~NON_LVALUE_EXPR <stride.1067>;
  ubound.1063 = (integer(kind=8)) *ntot;
  size.1064 = NON_LVALUE_EXPR <ubound.1063>;
  size.1064 = MAX_EXPR <size.1064, 0>;
  D.7978 = size.1064 + -1;
  D.7979 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1064> * 32;
  D.7980 = (sizetype) NON_LVALUE_EXPR <size.1064> * 4;
  ubound.1058 = (integer(kind=8)) *ntot;
  stride.1060 = NON_LVALUE_EXPR <ubound.1058>;
  stride.1060 = MAX_EXPR <stride.1060, 0>;
  ubound.1059 = (integer(kind=8)) *r;
  size.1062 = stride.1060 * NON_LVALUE_EXPR <ubound.1059>;
  size.1062 = MAX_EXPR <size.1062, 0>;
  D.7975 = size.1062 + -1;
  D.7976 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1062> * 64;
  D.7977 = (sizetype) NON_LVALUE_EXPR <size.1062> * 8;
  offset.1061 = ~NON_LVALUE_EXPR <stride.1060>;
  {
    integer(kind=4) D.7935;

    D.7935 = *r;
    i = 1;
    if (i <= D.7935)
      {
        while (1)
          {
            {
              logical(kind=4) D.7945;

              {
                integer(kind=4) D.7938;
                integer(kind=4) D.7939;

                D.7938 = i;
                D.7939 = *r;
                j = D.7938;
                if (j <= D.7939)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.7943;

                          (*sigma)[((integer(kind=8)) j * stride.1067 + offset.1068) + (integer(kind=8)) i] = 0.0;
                          __label_000001:;
                          L.523:;
                          D.7943 = j == D.7939;
                          j = j + 1;
                          if (D.7943) goto L.524;
                        }
                      }
                  }
                L.524:;
              }
              __label_000002:;
              L.521:;
              D.7945 = i == D.7935;
              i = i + 1;
              if (D.7945) goto L.522;
            }
          }
      }
    L.522:;
  }
  {
    integer(kind=4) D.7946;

    D.7946 = *ntot;
    i = 1;
    if (i <= D.7946)
      {
        while (1)
          {
            {
              logical(kind=4) D.7962;

              if ((*patt)[(integer(kind=8)) i + -1] != 0)
                {
                  {
                    integer(kind=4) D.7950;

                    D.7950 = *r;
                    j = 1;
                    if (j <= D.7950)
                      {
                        while (1)
                          {
                            {
                              logical(kind=4) D.7960;

                              {
                                integer(kind=4) D.7953;
                                integer(kind=4) D.7954;

                                D.7953 = j;
                                D.7954 = *r;
                                k = D.7953;
                                if (k <= D.7954)
                                  {
                                    while (1)
                                      {
                                        {
                                          logical(kind=4) D.7958;

                                          (*sigma)[((integer(kind=8)) k * stride.1067 + offset.1068) + (integer(kind=8)) j] = (*sigma)[((integer(kind=8)) k * stride.1067 + offset.1068) + (integer(kind=8)) j] + (*eps)[((integer(kind=8)) j * stride.1060 + offset.1061) + (integer(kind=8)) i] * (*eps)[((integer(kind=8)) k * stride.1060 + offset.1061) + (integer(kind=8)) i];
                                          __label_000080:;
                                          L.530:;
                                          D.7958 = k == D.7954;
                                          k = k + 1;
                                          if (D.7958) goto L.531;
                                        }
                                      }
                                  }
                                L.531:;
                              }
                              __label_000090:;
                              L.528:;
                              D.7960 = j == D.7950;
                              j = j + 1;
                              if (D.7960) goto L.529;
                            }
                          }
                      }
                    L.529:;
                  }
                }
              L.527:;
              __label_000100:;
              L.525:;
              D.7962 = i == D.7946;
              i = i + 1;
              if (D.7962) goto L.526;
            }
          }
      }
    L.526:;
  }
  {
    integer(kind=4) D.7963;

    D.7963 = *r;
    i = 1;
    if (i <= D.7963)
      {
        while (1)
          {
            {
              logical(kind=4) D.7974;

              {
                integer(kind=4) D.7966;
                integer(kind=4) D.7967;

                D.7966 = i;
                D.7967 = *r;
                j = D.7966;
                if (j <= D.7967)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.7972;

                          (*sigma)[((integer(kind=8)) j * stride.1067 + offset.1068) + (integer(kind=8)) i] = (*sigma)[((integer(kind=8)) j * stride.1067 + offset.1068) + (integer(kind=8)) i] / (real(kind=8)) *nstar;
                          if (i != j)
                            {
                              (*sigma)[((integer(kind=8)) i * stride.1067 + offset.1068) + (integer(kind=8)) j] = (*sigma)[((integer(kind=8)) j * stride.1067 + offset.1068) + (integer(kind=8)) i];
                            }
                          L.536:;
                          __label_000108:;
                          L.534:;
                          D.7972 = j == D.7967;
                          j = j + 1;
                          if (D.7972) goto L.535;
                        }
                      }
                  }
                L.535:;
              }
              __label_000110:;
              L.532:;
              D.7974 = i == D.7963;
              i = i + 1;
              if (D.7974) goto L.533;
            }
          }
      }
    L.533:;
  }
  return;
}


mimpy (integer(kind=4) & restrict ntot, integer(kind=4) & restrict r, real(kind=8)[0:D.8033] * restrict y, integer(kind=4)[0:D.8039] * restrict patt, integer(kind=4) & restrict npatt, integer(kind=4)[0:D.8036] * restrict rmat)
{
  integer(kind=4) denom;
  integer(kind=4) i;
  integer(kind=4) j;
  real(kind=8) mean;
  integer(kind=8) ubound.1070;
  integer(kind=8) size.1071;
  integer(kind=4) rij;
  integer(kind=8) ubound.1072;
  integer(kind=8) ubound.1073;
  integer(kind=8) stride.1074;
  integer(kind=8) offset.1075;
  integer(kind=8) size.1076;
  real(kind=8) sum;
  integer(kind=8) ubound.1077;
  integer(kind=8) ubound.1078;
  integer(kind=8) stride.1079;
  integer(kind=8) offset.1080;
  integer(kind=8) size.1081;
  integer(kind=8) D.8033;
  bitsizetype D.8034;
  sizetype D.8035;
  integer(kind=8) D.8036;
  bitsizetype D.8037;
  sizetype D.8038;
  integer(kind=8) D.8039;
  bitsizetype D.8040;
  sizetype D.8041;

  ubound.1070 = (integer(kind=8)) *ntot;
  size.1071 = NON_LVALUE_EXPR <ubound.1070>;
  size.1071 = MAX_EXPR <size.1071, 0>;
  D.8039 = size.1071 + -1;
  D.8040 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1071> * 32;
  D.8041 = (sizetype) NON_LVALUE_EXPR <size.1071> * 4;
  ubound.1072 = (integer(kind=8)) *npatt;
  stride.1074 = NON_LVALUE_EXPR <ubound.1072>;
  stride.1074 = MAX_EXPR <stride.1074, 0>;
  ubound.1073 = (integer(kind=8)) *r;
  size.1076 = stride.1074 * NON_LVALUE_EXPR <ubound.1073>;
  size.1076 = MAX_EXPR <size.1076, 0>;
  D.8036 = size.1076 + -1;
  D.8037 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1076> * 32;
  D.8038 = (sizetype) NON_LVALUE_EXPR <size.1076> * 4;
  offset.1075 = ~NON_LVALUE_EXPR <stride.1074>;
  ubound.1077 = (integer(kind=8)) *ntot;
  stride.1079 = NON_LVALUE_EXPR <ubound.1077>;
  stride.1079 = MAX_EXPR <stride.1079, 0>;
  ubound.1078 = (integer(kind=8)) *r;
  size.1081 = stride.1079 * NON_LVALUE_EXPR <ubound.1078>;
  size.1081 = MAX_EXPR <size.1081, 0>;
  D.8033 = size.1081 + -1;
  D.8034 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1081> * 64;
  D.8035 = (sizetype) NON_LVALUE_EXPR <size.1081> * 8;
  offset.1080 = ~NON_LVALUE_EXPR <stride.1079>;
  {
    integer(kind=4) D.8015;

    D.8015 = *r;
    j = 1;
    if (j <= D.8015)
      {
        while (1)
          {
            {
              logical(kind=4) D.8032;

              sum = 0.0;
              denom = 0;
              {
                integer(kind=4) D.8018;

                D.8018 = *ntot;
                i = 1;
                if (i <= D.8018)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.8023;

                          if ((*patt)[(integer(kind=8)) i + -1] != 0)
                            {
                              rij = (*rmat)[((integer(kind=8)) j * stride.1074 + offset.1075) + (integer(kind=8)) (*patt)[(integer(kind=8)) i + -1]];
                              sum = (real(kind=8)) rij * (*y)[((integer(kind=8)) j * stride.1079 + offset.1080) + (integer(kind=8)) i] + sum;
                              denom = denom + rij;
                            }
                          L.541:;
                          __label_000100:;
                          L.539:;
                          D.8023 = i == D.8018;
                          i = i + 1;
                          if (D.8023) goto L.540;
                        }
                      }
                  }
                L.540:;
              }
              mean = sum / (real(kind=8)) denom;
              {
                integer(kind=4) D.8024;

                D.8024 = *ntot;
                i = 1;
                if (i <= D.8024)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.8030;

                          if ((*patt)[(integer(kind=8)) i + -1] != 0)
                            {
                              if ((*rmat)[((integer(kind=8)) j * stride.1074 + offset.1075) + (integer(kind=8)) (*patt)[(integer(kind=8)) i + -1]] == 0)
                                {
                                  (*y)[((integer(kind=8)) j * stride.1079 + offset.1080) + (integer(kind=8)) i] = mean;
                                }
                              L.545:;
                            }
                          L.544:;
                          __label_000150:;
                          L.542:;
                          D.8030 = i == D.8024;
                          i = i + 1;
                          if (D.8030) goto L.543;
                        }
                      }
                  }
                L.543:;
              }
              __label_000200:;
              L.537:;
              D.8032 = j == D.8015;
              j = j + 1;
              if (D.8032) goto L.538;
            }
          }
      }
    L.538:;
  }
  return;
}


prelimm (integer(kind=4) & restrict ntot, integer(kind=4)[0:D.8206] * restrict subj, integer(kind=4) & restrict m, integer(kind=4)[0:D.8203] * restrict ist, integer(kind=4)[0:D.8200] * restrict ifin, integer(kind=4) & restrict pcol, real(kind=8)[0:D.8194] * restrict pred, integer(kind=4) & restrict q, integer(kind=4)[0:D.8191] * restrict zcol, real(kind=8)[0:D.8188] * restrict ztz, integer(kind=4)[0:D.8197] * restrict patt, integer(kind=4) & restrict nstar, integer(kind=4) & restrict p, integer(kind=4)[0:D.8185] * restrict xcol, real(kind=8)[0:D.8179] * restrict xtxinv, real(kind=8)[0:D.8182] * restrict wkpp)
{
  integer(kind=4) i;
  integer(kind=8) ubound.1082;
  integer(kind=8) size.1083;
  integer(kind=8) ubound.1084;
  integer(kind=8) size.1085;
  integer(kind=4) j;
  integer(kind=4) k;
  integer(kind=8) ubound.1086;
  integer(kind=8) size.1087;
  integer(kind=8) ubound.1088;
  integer(kind=8) ubound.1089;
  integer(kind=8) stride.1090;
  integer(kind=8) offset.1091;
  integer(kind=8) size.1092;
  integer(kind=4) s;
  integer(kind=8) ubound.1093;
  integer(kind=8) size.1094;
  real(kind=8) sum;
  integer(kind=8) ubound.1095;
  integer(kind=8) ubound.1096;
  integer(kind=8) stride.1097;
  integer(kind=8) offset.1098;
  integer(kind=8) size.1099;
  integer(kind=8) ubound.1100;
  integer(kind=8) size.1101;
  integer(kind=8) ubound.1102;
  integer(kind=8) ubound.1103;
  integer(kind=8) stride.1104;
  integer(kind=8) offset.1105;
  integer(kind=8) size.1106;
  integer(kind=8) ubound.1107;
  integer(kind=8) size.1108;
  integer(kind=8) ubound.1109;
  integer(kind=8) ubound.1110;
  integer(kind=8) stride.1111;
  integer(kind=8) ubound.1112;
  integer(kind=8) stride.1113;
  integer(kind=8) offset.1114;
  integer(kind=8) size.1115;
  integer(kind=8) D.8179;
  bitsizetype D.8180;
  sizetype D.8181;
  integer(kind=8) D.8182;
  bitsizetype D.8183;
  sizetype D.8184;
  integer(kind=8) D.8185;
  bitsizetype D.8186;
  sizetype D.8187;
  integer(kind=8) D.8188;
  bitsizetype D.8189;
  sizetype D.8190;
  integer(kind=8) D.8191;
  bitsizetype D.8192;
  sizetype D.8193;
  integer(kind=8) D.8194;
  bitsizetype D.8195;
  sizetype D.8196;
  integer(kind=8) D.8197;
  bitsizetype D.8198;
  sizetype D.8199;
  integer(kind=8) D.8200;
  bitsizetype D.8201;
  sizetype D.8202;
  integer(kind=8) D.8203;
  bitsizetype D.8204;
  sizetype D.8205;
  integer(kind=8) D.8206;
  bitsizetype D.8207;
  sizetype D.8208;

  ubound.1093 = (integer(kind=8)) *ntot;
  size.1094 = NON_LVALUE_EXPR <ubound.1093>;
  size.1094 = MAX_EXPR <size.1094, 0>;
  D.8206 = size.1094 + -1;
  D.8207 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1094> * 32;
  D.8208 = (sizetype) NON_LVALUE_EXPR <size.1094> * 4;
  ubound.1084 = (integer(kind=8)) *m;
  size.1085 = NON_LVALUE_EXPR <ubound.1084>;
  size.1085 = MAX_EXPR <size.1085, 0>;
  D.8203 = size.1085 + -1;
  D.8204 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1085> * 32;
  D.8205 = (sizetype) NON_LVALUE_EXPR <size.1085> * 4;
  ubound.1082 = (integer(kind=8)) *m;
  size.1083 = NON_LVALUE_EXPR <ubound.1082>;
  size.1083 = MAX_EXPR <size.1083, 0>;
  D.8200 = size.1083 + -1;
  D.8201 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1083> * 32;
  D.8202 = (sizetype) NON_LVALUE_EXPR <size.1083> * 4;
  ubound.1086 = (integer(kind=8)) *ntot;
  size.1087 = NON_LVALUE_EXPR <ubound.1086>;
  size.1087 = MAX_EXPR <size.1087, 0>;
  D.8197 = size.1087 + -1;
  D.8198 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1087> * 32;
  D.8199 = (sizetype) NON_LVALUE_EXPR <size.1087> * 4;
  ubound.1088 = (integer(kind=8)) *ntot;
  stride.1090 = NON_LVALUE_EXPR <ubound.1088>;
  stride.1090 = MAX_EXPR <stride.1090, 0>;
  ubound.1089 = (integer(kind=8)) *pcol;
  size.1092 = stride.1090 * NON_LVALUE_EXPR <ubound.1089>;
  size.1092 = MAX_EXPR <size.1092, 0>;
  D.8194 = size.1092 + -1;
  D.8195 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1092> * 64;
  D.8196 = (sizetype) NON_LVALUE_EXPR <size.1092> * 8;
  offset.1091 = ~NON_LVALUE_EXPR <stride.1090>;
  ubound.1107 = (integer(kind=8)) *q;
  size.1108 = NON_LVALUE_EXPR <ubound.1107>;
  size.1108 = MAX_EXPR <size.1108, 0>;
  D.8191 = size.1108 + -1;
  D.8192 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1108> * 32;
  D.8193 = (sizetype) NON_LVALUE_EXPR <size.1108> * 4;
  ubound.1109 = (integer(kind=8)) *q;
  stride.1111 = NON_LVALUE_EXPR <ubound.1109>;
  stride.1111 = MAX_EXPR <stride.1111, 0>;
  ubound.1110 = (integer(kind=8)) *q;
  stride.1113 = stride.1111 * NON_LVALUE_EXPR <ubound.1110>;
  stride.1113 = MAX_EXPR <stride.1113, 0>;
  ubound.1112 = (integer(kind=8)) *m;
  size.1115 = stride.1113 * NON_LVALUE_EXPR <ubound.1112>;
  size.1115 = MAX_EXPR <size.1115, 0>;
  D.8188 = size.1115 + -1;
  D.8189 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1115> * 64;
  D.8190 = (sizetype) NON_LVALUE_EXPR <size.1115> * 8;
  offset.1114 = ~NON_LVALUE_EXPR <stride.1111> - NON_LVALUE_EXPR <stride.1113>;
  ubound.1100 = (integer(kind=8)) *p;
  size.1101 = NON_LVALUE_EXPR <ubound.1100>;
  size.1101 = MAX_EXPR <size.1101, 0>;
  D.8185 = size.1101 + -1;
  D.8186 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1101> * 32;
  D.8187 = (sizetype) NON_LVALUE_EXPR <size.1101> * 4;
  ubound.1095 = (integer(kind=8)) *p;
  stride.1097 = NON_LVALUE_EXPR <ubound.1095>;
  stride.1097 = MAX_EXPR <stride.1097, 0>;
  ubound.1096 = (integer(kind=8)) *p;
  size.1099 = stride.1097 * NON_LVALUE_EXPR <ubound.1096>;
  size.1099 = MAX_EXPR <size.1099, 0>;
  D.8182 = size.1099 + -1;
  D.8183 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1099> * 64;
  D.8184 = (sizetype) NON_LVALUE_EXPR <size.1099> * 8;
  offset.1098 = ~NON_LVALUE_EXPR <stride.1097>;
  ubound.1102 = (integer(kind=8)) *p;
  stride.1104 = NON_LVALUE_EXPR <ubound.1102>;
  stride.1104 = MAX_EXPR <stride.1104, 0>;
  ubound.1103 = (integer(kind=8)) *p;
  size.1106 = stride.1104 * NON_LVALUE_EXPR <ubound.1103>;
  size.1106 = MAX_EXPR <size.1106, 0>;
  D.8179 = size.1106 + -1;
  D.8180 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1106> * 64;
  D.8181 = (sizetype) NON_LVALUE_EXPR <size.1106> * 8;
  offset.1105 = ~NON_LVALUE_EXPR <stride.1104>;
  istfin ((integer(kind=4) *) ntot, subj, (integer(kind=4) *) m, ist, ifin);
  *nstar = 0;
  {
    integer(kind=4) D.8121;

    D.8121 = *ntot;
    i = 1;
    if (i <= D.8121)
      {
        while (1)
          {
            {
              logical(kind=4) D.8126;

              if ((*patt)[(integer(kind=8)) i + -1] != 0)
                {
                  *nstar = *nstar + 1;
                }
              L.548:;
              __label_000010:;
              L.546:;
              D.8126 = i == D.8121;
              i = i + 1;
              if (D.8126) goto L.547;
            }
          }
      }
    L.547:;
  }
  {
    integer(kind=4) D.8127;

    D.8127 = *m;
    s = 1;
    if (s <= D.8127)
      {
        while (1)
          {
            {
              logical(kind=4) D.8150;

              {
                integer(kind=4) D.8130;

                D.8130 = *q;
                i = 1;
                if (i <= D.8130)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.8148;

                          {
                            integer(kind=4) D.8133;
                            integer(kind=4) D.8134;

                            D.8133 = i;
                            D.8134 = *q;
                            j = D.8133;
                            if (j <= D.8134)
                              {
                                while (1)
                                  {
                                    {
                                      logical(kind=4) D.8146;

                                      sum = 0.0;
                                      {
                                        integer(kind=4) D.8137;
                                        integer(kind=4) D.8138;

                                        D.8137 = (*ist)[(integer(kind=8)) s + -1];
                                        D.8138 = (*ifin)[(integer(kind=8)) s + -1];
                                        k = D.8137;
                                        if (k <= D.8138)
                                          {
                                            while (1)
                                              {
                                                {
                                                  logical(kind=4) D.8143;

                                                  if ((*patt)[(integer(kind=8)) k + -1] != 0)
                                                    {
                                                      sum = (*pred)[((integer(kind=8)) (*zcol)[(integer(kind=8)) i + -1] * stride.1090 + offset.1091) + (integer(kind=8)) k] * (*pred)[((integer(kind=8)) (*zcol)[(integer(kind=8)) j + -1] * stride.1090 + offset.1091) + (integer(kind=8)) k] + sum;
                                                    }
                                                  L.557:;
                                                  __label_000060:;
                                                  L.555:;
                                                  D.8143 = k == D.8138;
                                                  k = k + 1;
                                                  if (D.8143) goto L.556;
                                                }
                                              }
                                          }
                                        L.556:;
                                      }
                                      (*ztz)[(((integer(kind=8)) s * stride.1113 + offset.1114) + (integer(kind=8)) j * stride.1111) + (integer(kind=8)) i] = sum;
                                      if (i != j)
                                        {
                                          (*ztz)[(((integer(kind=8)) s * stride.1113 + offset.1114) + (integer(kind=8)) i * stride.1111) + (integer(kind=8)) j] = sum;
                                        }
                                      L.558:;
                                      __label_000080:;
                                      L.553:;
                                      D.8146 = j == D.8134;
                                      j = j + 1;
                                      if (D.8146) goto L.554;
                                    }
                                  }
                              }
                            L.554:;
                          }
                          __label_000090:;
                          L.551:;
                          D.8148 = i == D.8130;
                          i = i + 1;
                          if (D.8148) goto L.552;
                        }
                      }
                  }
                L.552:;
              }
              __label_000100:;
              L.549:;
              D.8150 = s == D.8127;
              s = s + 1;
              if (D.8150) goto L.550;
            }
          }
      }
    L.550:;
  }
  {
    integer(kind=4) D.8151;

    D.8151 = *p;
    i = 1;
    if (i <= D.8151)
      {
        while (1)
          {
            {
              logical(kind=4) D.8167;

              {
                integer(kind=4) D.8154;
                integer(kind=4) D.8155;

                D.8154 = i;
                D.8155 = *p;
                j = D.8154;
                if (j <= D.8155)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.8165;

                          sum = 0.0;
                          {
                            integer(kind=4) D.8158;

                            D.8158 = *ntot;
                            k = 1;
                            if (k <= D.8158)
                              {
                                while (1)
                                  {
                                    {
                                      logical(kind=4) D.8163;

                                      if ((*patt)[(integer(kind=8)) k + -1] != 0)
                                        {
                                          sum = (*pred)[((integer(kind=8)) (*xcol)[(integer(kind=8)) i + -1] * stride.1090 + offset.1091) + (integer(kind=8)) k] * (*pred)[((integer(kind=8)) (*xcol)[(integer(kind=8)) j + -1] * stride.1090 + offset.1091) + (integer(kind=8)) k] + sum;
                                        }
                                      L.565:;
                                      __label_000130:;
                                      L.563:;
                                      D.8163 = k == D.8158;
                                      k = k + 1;
                                      if (D.8163) goto L.564;
                                    }
                                  }
                              }
                            L.564:;
                          }
                          (*wkpp)[((integer(kind=8)) j * stride.1097 + offset.1098) + (integer(kind=8)) i] = sum;
                          __label_000140:;
                          L.561:;
                          D.8165 = j == D.8155;
                          j = j + 1;
                          if (D.8165) goto L.562;
                        }
                      }
                  }
                L.562:;
              }
              __label_000150:;
              L.559:;
              D.8167 = i == D.8151;
              i = i + 1;
              if (D.8167) goto L.560;
            }
          }
      }
    L.560:;
  }
  chfc ((integer(kind=4) *) p, (integer(kind=4) *) p, wkpp);
  bkslv ((integer(kind=4) *) p, (integer(kind=4) *) p, wkpp);
  mm ((integer(kind=4) *) p, (integer(kind=4) *) p, wkpp, xtxinv);
  {
    integer(kind=4) D.8168;

    D.8168 = *p;
    i = 1;
    if (i <= D.8168)
      {
        while (1)
          {
            {
              logical(kind=4) D.8178;

              {
                integer(kind=4) D.8171;
                integer(kind=4) D.8172;

                D.8171 = i;
                D.8172 = *p;
                j = D.8171;
                if (j <= D.8172)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.8176;

                          (*xtxinv)[((integer(kind=8)) i * stride.1104 + offset.1105) + (integer(kind=8)) j] = (*xtxinv)[((integer(kind=8)) j * stride.1104 + offset.1105) + (integer(kind=8)) i];
                          __label_000155:;
                          L.568:;
                          D.8176 = j == D.8172;
                          j = j + 1;
                          if (D.8176) goto L.569;
                        }
                      }
                  }
                L.569:;
              }
              __label_000160:;
              L.566:;
              D.8178 = i == D.8168;
              i = i + 1;
              if (D.8178) goto L.567;
            }
          }
      }
    L.567:;
  }
  return;
}


gauss ()
{
  static integer(kind=4) alt;
  static real(kind=4) next;
  static real(kind=4) pi = 3.14159297943115234375e+0;
  real(kind=4) u1;
  real(kind=4) u2;
  real(kind=4) __result_gauss;

  if (alt != 0 && alt != 1)
    {
      alt = 0;
    }
  L.570:;
  if (alt == 0)
    {
      {
        static integer(kind=4) C.8216 = 0;

        u1 = rangen (&C.8216);
      }
      {
        static integer(kind=4) C.8217 = 0;

        u2 = rangen (&C.8217);
      }
      __result_gauss = __builtin_sqrtf (-(__builtin_logf (u1) * 2.0e+0)) * __builtin_cosf ((pi * 2.0e+0) * u2);
      next = __builtin_sqrtf (-(__builtin_logf (u1) * 2.0e+0)) * __builtin_sinf ((pi * 2.0e+0) * u2);
      alt = 1;
    }
  else
    {
      __result_gauss = next;
      alt = 0;
    }
  L.571:;
  return __result_gauss;
  return __result_gauss;
}


storebd (integer(kind=4) & restrict iter, integer(kind=4) & restrict it, integer(kind=4) & restrict p, integer(kind=4) & restrict r, real(kind=8)[0:D.8328] * restrict beta, integer(kind=4) & restrict q, real(kind=8)[0:D.8322] * restrict psi, real(kind=8)[0:D.8316] * restrict sigma, real(kind=8)[0:D.8331] * restrict betas, real(kind=8)[0:D.8319] * restrict sigmas, real(kind=8)[0:D.8325] * restrict psis)
{
  integer(kind=8) ubound.1116;
  integer(kind=8) ubound.1117;
  integer(kind=8) stride.1118;
  integer(kind=8) offset.1119;
  integer(kind=8) size.1120;
  integer(kind=8) ubound.1121;
  integer(kind=8) ubound.1122;
  integer(kind=8) stride.1123;
  integer(kind=8) ubound.1124;
  integer(kind=8) stride.1125;
  integer(kind=8) offset.1126;
  integer(kind=8) size.1127;
  integer(kind=4) i;
  integer(kind=4) j;
  integer(kind=4) l;
  integer(kind=8) ubound.1128;
  integer(kind=8) ubound.1129;
  integer(kind=8) stride.1130;
  integer(kind=8) ubound.1131;
  integer(kind=8) stride.1132;
  integer(kind=8) offset.1133;
  integer(kind=8) size.1134;
  integer(kind=8) ubound.1135;
  integer(kind=8) ubound.1136;
  integer(kind=8) stride.1137;
  integer(kind=8) ubound.1138;
  integer(kind=8) stride.1139;
  integer(kind=8) ubound.1140;
  integer(kind=8) stride.1141;
  integer(kind=8) offset.1142;
  integer(kind=8) size.1143;
  integer(kind=8) ubound.1144;
  integer(kind=8) ubound.1145;
  integer(kind=8) stride.1146;
  integer(kind=8) offset.1147;
  integer(kind=8) size.1148;
  integer(kind=8) ubound.1149;
  integer(kind=8) ubound.1150;
  integer(kind=8) stride.1151;
  integer(kind=8) ubound.1152;
  integer(kind=8) stride.1153;
  integer(kind=8) offset.1154;
  integer(kind=8) size.1155;
  integer(kind=8) D.8316;
  bitsizetype D.8317;
  sizetype D.8318;
  integer(kind=8) D.8319;
  bitsizetype D.8320;
  sizetype D.8321;
  integer(kind=8) D.8322;
  bitsizetype D.8323;
  sizetype D.8324;
  integer(kind=8) D.8325;
  bitsizetype D.8326;
  sizetype D.8327;
  integer(kind=8) D.8328;
  bitsizetype D.8329;
  sizetype D.8330;
  integer(kind=8) D.8331;
  bitsizetype D.8332;
  sizetype D.8333;

  ubound.1121 = (integer(kind=8)) *p;
  stride.1123 = NON_LVALUE_EXPR <ubound.1121>;
  stride.1123 = MAX_EXPR <stride.1123, 0>;
  ubound.1122 = (integer(kind=8)) *r;
  stride.1125 = stride.1123 * NON_LVALUE_EXPR <ubound.1122>;
  stride.1125 = MAX_EXPR <stride.1125, 0>;
  ubound.1124 = (integer(kind=8)) *iter;
  size.1127 = stride.1125 * NON_LVALUE_EXPR <ubound.1124>;
  size.1127 = MAX_EXPR <size.1127, 0>;
  D.8331 = size.1127 + -1;
  D.8332 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1127> * 64;
  D.8333 = (sizetype) NON_LVALUE_EXPR <size.1127> * 8;
  offset.1126 = ~NON_LVALUE_EXPR <stride.1123> - NON_LVALUE_EXPR <stride.1125>;
  ubound.1116 = (integer(kind=8)) *p;
  stride.1118 = NON_LVALUE_EXPR <ubound.1116>;
  stride.1118 = MAX_EXPR <stride.1118, 0>;
  ubound.1117 = (integer(kind=8)) *r;
  size.1120 = stride.1118 * NON_LVALUE_EXPR <ubound.1117>;
  size.1120 = MAX_EXPR <size.1120, 0>;
  D.8328 = size.1120 + -1;
  D.8329 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1120> * 64;
  D.8330 = (sizetype) NON_LVALUE_EXPR <size.1120> * 8;
  offset.1119 = ~NON_LVALUE_EXPR <stride.1118>;
  ubound.1135 = (integer(kind=8)) *q;
  stride.1137 = NON_LVALUE_EXPR <ubound.1135>;
  stride.1137 = MAX_EXPR <stride.1137, 0>;
  ubound.1136 = (integer(kind=8)) *q;
  stride.1139 = stride.1137 * NON_LVALUE_EXPR <ubound.1136>;
  stride.1139 = MAX_EXPR <stride.1139, 0>;
  ubound.1138 = (integer(kind=8)) *r;
  stride.1141 = stride.1139 * NON_LVALUE_EXPR <ubound.1138>;
  stride.1141 = MAX_EXPR <stride.1141, 0>;
  ubound.1140 = (integer(kind=8)) *iter;
  size.1143 = stride.1141 * NON_LVALUE_EXPR <ubound.1140>;
  size.1143 = MAX_EXPR <size.1143, 0>;
  D.8325 = size.1143 + -1;
  D.8326 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1143> * 64;
  D.8327 = (sizetype) NON_LVALUE_EXPR <size.1143> * 8;
  offset.1142 = (~NON_LVALUE_EXPR <stride.1137> - NON_LVALUE_EXPR <stride.1139>) - NON_LVALUE_EXPR <stride.1141>;
  ubound.1128 = (integer(kind=8)) *q;
  stride.1130 = NON_LVALUE_EXPR <ubound.1128>;
  stride.1130 = MAX_EXPR <stride.1130, 0>;
  ubound.1129 = (integer(kind=8)) *q;
  stride.1132 = stride.1130 * NON_LVALUE_EXPR <ubound.1129>;
  stride.1132 = MAX_EXPR <stride.1132, 0>;
  ubound.1131 = (integer(kind=8)) *r;
  size.1134 = stride.1132 * NON_LVALUE_EXPR <ubound.1131>;
  size.1134 = MAX_EXPR <size.1134, 0>;
  D.8322 = size.1134 + -1;
  D.8323 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1134> * 64;
  D.8324 = (sizetype) NON_LVALUE_EXPR <size.1134> * 8;
  offset.1133 = ~NON_LVALUE_EXPR <stride.1130> - NON_LVALUE_EXPR <stride.1132>;
  ubound.1149 = (integer(kind=8)) *r;
  stride.1151 = NON_LVALUE_EXPR <ubound.1149>;
  stride.1151 = MAX_EXPR <stride.1151, 0>;
  ubound.1150 = (integer(kind=8)) *r;
  stride.1153 = stride.1151 * NON_LVALUE_EXPR <ubound.1150>;
  stride.1153 = MAX_EXPR <stride.1153, 0>;
  ubound.1152 = (integer(kind=8)) *iter;
  size.1155 = stride.1153 * NON_LVALUE_EXPR <ubound.1152>;
  size.1155 = MAX_EXPR <size.1155, 0>;
  D.8319 = size.1155 + -1;
  D.8320 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1155> * 64;
  D.8321 = (sizetype) NON_LVALUE_EXPR <size.1155> * 8;
  offset.1154 = ~NON_LVALUE_EXPR <stride.1151> - NON_LVALUE_EXPR <stride.1153>;
  ubound.1144 = (integer(kind=8)) *r;
  stride.1146 = NON_LVALUE_EXPR <ubound.1144>;
  stride.1146 = MAX_EXPR <stride.1146, 0>;
  ubound.1145 = (integer(kind=8)) *r;
  size.1148 = stride.1146 * NON_LVALUE_EXPR <ubound.1145>;
  size.1148 = MAX_EXPR <size.1148, 0>;
  D.8316 = size.1148 + -1;
  D.8317 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1148> * 64;
  D.8318 = (sizetype) NON_LVALUE_EXPR <size.1148> * 8;
  offset.1147 = ~NON_LVALUE_EXPR <stride.1146>;
  {
    integer(kind=4) D.8281;

    D.8281 = *r;
    j = 1;
    if (j <= D.8281)
      {
        while (1)
          {
            {
              logical(kind=4) D.8290;

              {
                integer(kind=4) D.8284;

                D.8284 = *p;
                i = 1;
                if (i <= D.8284)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.8288;

                          (*betas)[(((integer(kind=8)) *it * stride.1125 + offset.1126) + (integer(kind=8)) j * stride.1123) + (integer(kind=8)) i] = (*beta)[((integer(kind=8)) j * stride.1118 + offset.1119) + (integer(kind=8)) i];
                          __label_000005:;
                          L.574:;
                          D.8288 = i == D.8284;
                          i = i + 1;
                          if (D.8288) goto L.575;
                        }
                      }
                  }
                L.575:;
              }
              __label_000010:;
              L.572:;
              D.8290 = j == D.8281;
              j = j + 1;
              if (D.8290) goto L.573;
            }
          }
      }
    L.573:;
  }
  {
    integer(kind=4) D.8291;

    D.8291 = *r;
    l = 1;
    if (l <= D.8291)
      {
        while (1)
          {
            {
              logical(kind=4) D.8305;

              {
                integer(kind=4) D.8294;

                D.8294 = *q;
                j = 1;
                if (j <= D.8294)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.8303;

                          {
                            integer(kind=4) D.8297;

                            D.8297 = *q;
                            i = 1;
                            if (i <= D.8297)
                              {
                                while (1)
                                  {
                                    {
                                      logical(kind=4) D.8301;

                                      (*psis)[((((integer(kind=8)) *it * stride.1141 + offset.1142) + (integer(kind=8)) l * stride.1139) + (integer(kind=8)) j * stride.1137) + (integer(kind=8)) i] = (*psi)[(((integer(kind=8)) l * stride.1132 + offset.1133) + (integer(kind=8)) j * stride.1130) + (integer(kind=8)) i];
                                      __label_000015:;
                                      L.580:;
                                      D.8301 = i == D.8297;
                                      i = i + 1;
                                      if (D.8301) goto L.581;
                                    }
                                  }
                              }
                            L.581:;
                          }
                          __label_000020:;
                          L.578:;
                          D.8303 = j == D.8294;
                          j = j + 1;
                          if (D.8303) goto L.579;
                        }
                      }
                  }
                L.579:;
              }
              __label_000021:;
              L.576:;
              D.8305 = l == D.8291;
              l = l + 1;
              if (D.8305) goto L.577;
            }
          }
      }
    L.577:;
  }
  {
    integer(kind=4) D.8306;

    D.8306 = *r;
    j = 1;
    if (j <= D.8306)
      {
        while (1)
          {
            {
              logical(kind=4) D.8315;

              {
                integer(kind=4) D.8309;

                D.8309 = *r;
                i = 1;
                if (i <= D.8309)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.8313;

                          (*sigmas)[(((integer(kind=8)) *it * stride.1153 + offset.1154) + (integer(kind=8)) j * stride.1151) + (integer(kind=8)) i] = (*sigma)[((integer(kind=8)) j * stride.1146 + offset.1147) + (integer(kind=8)) i];
                          __label_000025:;
                          L.584:;
                          D.8313 = i == D.8309;
                          i = i + 1;
                          if (D.8313) goto L.585;
                        }
                      }
                  }
                L.585:;
              }
              __label_000030:;
              L.582:;
              D.8315 = j == D.8306;
              j = j + 1;
              if (D.8315) goto L.583;
            }
          }
      }
    L.583:;
  }
  return;
}


chsub (integer(kind=4) & restrict r, real(kind=8)[0:D.8365] * restrict sigma, integer(kind=4) & restrict lmc, integer(kind=4)[0:D.8362] * restrict mc, integer(kind=4) & restrict nmc, real(kind=8)[0:D.8368] * restrict wkrr)
{
  integer(kind=4) i;
  integer(kind=4) j;
  integer(kind=8) ubound.1156;
  integer(kind=8) size.1157;
  integer(kind=8) ubound.1158;
  integer(kind=8) ubound.1159;
  integer(kind=8) stride.1160;
  integer(kind=8) offset.1161;
  integer(kind=8) size.1162;
  integer(kind=8) ubound.1163;
  integer(kind=8) ubound.1164;
  integer(kind=8) stride.1165;
  integer(kind=8) offset.1166;
  integer(kind=8) size.1167;
  integer(kind=8) D.8362;
  bitsizetype D.8363;
  sizetype D.8364;
  integer(kind=8) D.8365;
  bitsizetype D.8366;
  sizetype D.8367;
  integer(kind=8) D.8368;
  bitsizetype D.8369;
  sizetype D.8370;

  ubound.1163 = (integer(kind=8)) *r;
  stride.1165 = NON_LVALUE_EXPR <ubound.1163>;
  stride.1165 = MAX_EXPR <stride.1165, 0>;
  ubound.1164 = (integer(kind=8)) *r;
  size.1167 = stride.1165 * NON_LVALUE_EXPR <ubound.1164>;
  size.1167 = MAX_EXPR <size.1167, 0>;
  D.8368 = size.1167 + -1;
  D.8369 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1167> * 64;
  D.8370 = (sizetype) NON_LVALUE_EXPR <size.1167> * 8;
  offset.1166 = ~NON_LVALUE_EXPR <stride.1165>;
  ubound.1158 = (integer(kind=8)) *r;
  stride.1160 = NON_LVALUE_EXPR <ubound.1158>;
  stride.1160 = MAX_EXPR <stride.1160, 0>;
  ubound.1159 = (integer(kind=8)) *r;
  size.1162 = stride.1160 * NON_LVALUE_EXPR <ubound.1159>;
  size.1162 = MAX_EXPR <size.1162, 0>;
  D.8365 = size.1162 + -1;
  D.8366 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1162> * 64;
  D.8367 = (sizetype) NON_LVALUE_EXPR <size.1162> * 8;
  offset.1161 = ~NON_LVALUE_EXPR <stride.1160>;
  ubound.1156 = (integer(kind=8)) *lmc;
  size.1157 = NON_LVALUE_EXPR <ubound.1156>;
  size.1157 = MAX_EXPR <size.1157, 0>;
  D.8362 = size.1157 + -1;
  D.8363 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1157> * 32;
  D.8364 = (sizetype) NON_LVALUE_EXPR <size.1157> * 4;
  {
    integer(kind=4) D.8351;

    D.8351 = *nmc;
    i = 1;
    if (i <= D.8351)
      {
        while (1)
          {
            {
              logical(kind=4) D.8361;

              {
                integer(kind=4) D.8354;
                integer(kind=4) D.8355;

                D.8354 = i;
                D.8355 = *nmc;
                j = D.8354;
                if (j <= D.8355)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.8359;

                          (*wkrr)[((integer(kind=8)) j * stride.1165 + offset.1166) + (integer(kind=8)) i] = (*sigma)[((integer(kind=8)) (*mc)[(integer(kind=8)) j + -1] * stride.1160 + offset.1161) + (integer(kind=8)) (*mc)[(integer(kind=8)) i + -1]];
                          __label_000005:;
                          L.588:;
                          D.8359 = j == D.8355;
                          j = j + 1;
                          if (D.8359) goto L.589;
                        }
                      }
                  }
                L.589:;
              }
              __label_000010:;
              L.586:;
              D.8361 = i == D.8351;
              i = i + 1;
              if (D.8361) goto L.587;
            }
          }
      }
    L.587:;
  }
  chfc ((integer(kind=4) *) r, (integer(kind=4) *) nmc, wkrr);
  return;
}


getoc (integer(kind=4) & restrict r, integer(kind=4) & restrict npatt, integer(kind=4)[0:D.8391] * restrict rmat, integer(kind=4) & restrict pt, integer(kind=4) & restrict loc, integer(kind=4)[0:D.8388] * restrict oc, integer(kind=4) & restrict noc)
{
  integer(kind=4) j;
  integer(kind=8) ubound.1168;
  integer(kind=8) size.1169;
  integer(kind=4) posn;
  integer(kind=8) ubound.1170;
  integer(kind=8) ubound.1171;
  integer(kind=8) stride.1172;
  integer(kind=8) offset.1173;
  integer(kind=8) size.1174;
  integer(kind=8) D.8388;
  bitsizetype D.8389;
  sizetype D.8390;
  integer(kind=8) D.8391;
  bitsizetype D.8392;
  sizetype D.8393;

  ubound.1170 = (integer(kind=8)) *npatt;
  stride.1172 = NON_LVALUE_EXPR <ubound.1170>;
  stride.1172 = MAX_EXPR <stride.1172, 0>;
  ubound.1171 = (integer(kind=8)) *r;
  size.1174 = stride.1172 * NON_LVALUE_EXPR <ubound.1171>;
  size.1174 = MAX_EXPR <size.1174, 0>;
  D.8391 = size.1174 + -1;
  D.8392 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1174> * 32;
  D.8393 = (sizetype) NON_LVALUE_EXPR <size.1174> * 4;
  offset.1173 = ~NON_LVALUE_EXPR <stride.1172>;
  ubound.1168 = (integer(kind=8)) *loc;
  size.1169 = NON_LVALUE_EXPR <ubound.1168>;
  size.1169 = MAX_EXPR <size.1169, 0>;
  D.8388 = size.1169 + -1;
  D.8389 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1169> * 32;
  D.8390 = (sizetype) NON_LVALUE_EXPR <size.1169> * 4;
  *noc = 0;
  posn = 0;
  {
    integer(kind=4) D.8382;

    D.8382 = *r;
    j = 1;
    if (j <= D.8382)
      {
        while (1)
          {
            {
              logical(kind=4) D.8387;

              if ((*rmat)[((integer(kind=8)) j * stride.1172 + offset.1173) + (integer(kind=8)) *pt] == 1)
                {
                  *noc = *noc + 1;
                  posn = posn + 1;
                  (*oc)[(integer(kind=8)) posn + -1] = j;
                }
              L.592:;
              __label_000010:;
              L.590:;
              D.8387 = j == D.8382;
              j = j + 1;
              if (D.8387) goto L.591;
            }
          }
      }
    L.591:;
  }
  return;
}


getmc (integer(kind=4) & restrict r, integer(kind=4) & restrict npatt, integer(kind=4)[0:D.8414] * restrict rmat, integer(kind=4) & restrict pt, integer(kind=4) & restrict lmc, integer(kind=4)[0:D.8411] * restrict mc, integer(kind=4) & restrict nmc)
{
  integer(kind=4) j;
  integer(kind=8) ubound.1175;
  integer(kind=8) size.1176;
  integer(kind=4) posn;
  integer(kind=8) ubound.1177;
  integer(kind=8) ubound.1178;
  integer(kind=8) stride.1179;
  integer(kind=8) offset.1180;
  integer(kind=8) size.1181;
  integer(kind=8) D.8411;
  bitsizetype D.8412;
  sizetype D.8413;
  integer(kind=8) D.8414;
  bitsizetype D.8415;
  sizetype D.8416;

  ubound.1177 = (integer(kind=8)) *npatt;
  stride.1179 = NON_LVALUE_EXPR <ubound.1177>;
  stride.1179 = MAX_EXPR <stride.1179, 0>;
  ubound.1178 = (integer(kind=8)) *r;
  size.1181 = stride.1179 * NON_LVALUE_EXPR <ubound.1178>;
  size.1181 = MAX_EXPR <size.1181, 0>;
  D.8414 = size.1181 + -1;
  D.8415 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1181> * 32;
  D.8416 = (sizetype) NON_LVALUE_EXPR <size.1181> * 4;
  offset.1180 = ~NON_LVALUE_EXPR <stride.1179>;
  ubound.1175 = (integer(kind=8)) *lmc;
  size.1176 = NON_LVALUE_EXPR <ubound.1175>;
  size.1176 = MAX_EXPR <size.1176, 0>;
  D.8411 = size.1176 + -1;
  D.8412 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1176> * 32;
  D.8413 = (sizetype) NON_LVALUE_EXPR <size.1176> * 4;
  *nmc = 0;
  posn = 0;
  {
    integer(kind=4) D.8405;

    D.8405 = *r;
    j = 1;
    if (j <= D.8405)
      {
        while (1)
          {
            {
              logical(kind=4) D.8410;

              if ((*rmat)[((integer(kind=8)) j * stride.1179 + offset.1180) + (integer(kind=8)) *pt] == 0)
                {
                  *nmc = *nmc + 1;
                  posn = posn + 1;
                  (*mc)[(integer(kind=8)) posn + -1] = j;
                }
              L.595:;
              __label_000010:;
              L.593:;
              D.8410 = j == D.8405;
              j = j + 1;
              if (D.8410) goto L.594;
            }
          }
      }
    L.594:;
  }
  return;
}


swpobs (integer(kind=4) & restrict r, real(kind=8)[0:D.8447] * restrict sigma, integer(kind=4) & restrict npatt, integer(kind=4)[0:D.8450] * restrict rmat, integer(kind=4) & restrict pt)
{
  integer(kind=4) col;
  integer(kind=8) ubound.1182;
  integer(kind=8) ubound.1183;
  integer(kind=8) stride.1184;
  integer(kind=8) offset.1185;
  integer(kind=8) size.1186;
  integer(kind=8) ubound.1187;
  integer(kind=8) ubound.1188;
  integer(kind=8) stride.1189;
  integer(kind=8) offset.1190;
  integer(kind=8) size.1191;
  integer(kind=8) D.8447;
  bitsizetype D.8448;
  sizetype D.8449;
  integer(kind=8) D.8450;
  bitsizetype D.8451;
  sizetype D.8452;

  ubound.1182 = (integer(kind=8)) *npatt;
  stride.1184 = NON_LVALUE_EXPR <ubound.1182>;
  stride.1184 = MAX_EXPR <stride.1184, 0>;
  ubound.1183 = (integer(kind=8)) *r;
  size.1186 = stride.1184 * NON_LVALUE_EXPR <ubound.1183>;
  size.1186 = MAX_EXPR <size.1186, 0>;
  D.8450 = size.1186 + -1;
  D.8451 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1186> * 32;
  D.8452 = (sizetype) NON_LVALUE_EXPR <size.1186> * 4;
  offset.1185 = ~NON_LVALUE_EXPR <stride.1184>;
  ubound.1187 = (integer(kind=8)) *r;
  stride.1189 = NON_LVALUE_EXPR <ubound.1187>;
  stride.1189 = MAX_EXPR <stride.1189, 0>;
  ubound.1188 = (integer(kind=8)) *r;
  size.1191 = stride.1189 * NON_LVALUE_EXPR <ubound.1188>;
  size.1191 = MAX_EXPR <size.1191, 0>;
  D.8447 = size.1191 + -1;
  D.8448 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1191> * 64;
  D.8449 = (sizetype) NON_LVALUE_EXPR <size.1191> * 8;
  offset.1190 = ~NON_LVALUE_EXPR <stride.1189>;
  {
    integer(kind=4) D.8430;

    D.8430 = *r;
    col = 1;
    if (col <= D.8430)
      {
        while (1)
          {
            {
              logical(kind=4) D.8446;

              if ((*rmat)[((integer(kind=8)) col * stride.1184 + offset.1185) + (integer(kind=8)) *pt] == 1 && (*sigma)[((integer(kind=8)) col * stride.1189 + offset.1190) + (integer(kind=8)) col] > 0.0)
                {
                  swp ((integer(kind=4) *) r, sigma, &col);
                }
              L.598:;
              if ((*rmat)[((integer(kind=8)) col * stride.1184 + offset.1185) + (integer(kind=8)) *pt] == 0 && (*sigma)[((integer(kind=8)) col * stride.1189 + offset.1190) + (integer(kind=8)) col] <= 0.0)
                {
                  rsw ((integer(kind=4) *) r, sigma, &col);
                }
              L.599:;
              __label_000100:;
              L.596:;
              D.8446 = col == D.8430;
              col = col + 1;
              if (D.8446) goto L.597;
            }
          }
      }
    L.597:;
  }
  return;
}


rsw (integer(kind=4) & restrict n, real(kind=8)[0:D.8501] * restrict mat, integer(kind=4) & restrict p)
{
  integer(kind=4) i;
  integer(kind=4) j;
  integer(kind=8) ubound.1192;
  integer(kind=8) ubound.1193;
  integer(kind=8) stride.1194;
  integer(kind=8) offset.1195;
  integer(kind=8) size.1196;
  integer(kind=8) D.8501;
  bitsizetype D.8502;
  sizetype D.8503;

  ubound.1192 = (integer(kind=8)) *n;
  stride.1194 = NON_LVALUE_EXPR <ubound.1192>;
  stride.1194 = MAX_EXPR <stride.1194, 0>;
  ubound.1193 = (integer(kind=8)) *n;
  size.1196 = stride.1194 * NON_LVALUE_EXPR <ubound.1193>;
  size.1196 = MAX_EXPR <size.1196, 0>;
  D.8501 = size.1196 + -1;
  D.8502 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1196> * 64;
  D.8503 = (sizetype) NON_LVALUE_EXPR <size.1196> * 8;
  offset.1195 = ~NON_LVALUE_EXPR <stride.1194>;
  (*mat)[((integer(kind=8)) *p * stride.1194 + offset.1195) + (integer(kind=8)) *p] = -(1.0e+0 / (*mat)[((integer(kind=8)) *p * stride.1194 + offset.1195) + (integer(kind=8)) *p]);
  {
    integer(kind=4) D.8461;

    D.8461 = *p + -1;
    i = 1;
    if (i <= D.8461)
      {
        while (1)
          {
            {
              logical(kind=4) D.8465;

              (*mat)[((integer(kind=8)) *p * stride.1194 + offset.1195) + (integer(kind=8)) i] = (*mat)[((integer(kind=8)) *p * stride.1194 + offset.1195) + (integer(kind=8)) i] * (*mat)[((integer(kind=8)) *p * stride.1194 + offset.1195) + (integer(kind=8)) *p];
              __label_000001:;
              L.600:;
              D.8465 = i == D.8461;
              i = i + 1;
              if (D.8465) goto L.601;
            }
          }
      }
    L.601:;
  }
  {
    integer(kind=4) D.8466;
    integer(kind=4) D.8467;

    D.8466 = *p + 1;
    D.8467 = *n;
    j = D.8466;
    if (j <= D.8467)
      {
        while (1)
          {
            {
              logical(kind=4) D.8471;

              (*mat)[((integer(kind=8)) j * stride.1194 + offset.1195) + (integer(kind=8)) *p] = (*mat)[((integer(kind=8)) j * stride.1194 + offset.1195) + (integer(kind=8)) *p] * (*mat)[((integer(kind=8)) *p * stride.1194 + offset.1195) + (integer(kind=8)) *p];
              __label_000002:;
              L.602:;
              D.8471 = j == D.8467;
              j = j + 1;
              if (D.8471) goto L.603;
            }
          }
      }
    L.603:;
  }
  {
    integer(kind=4) D.8472;

    D.8472 = *p + -1;
    i = 1;
    if (i <= D.8472)
      {
        while (1)
          {
            {
              logical(kind=4) D.8488;

              {
                integer(kind=4) D.8475;
                integer(kind=4) D.8476;

                D.8475 = i;
                D.8476 = *p + -1;
                j = D.8475;
                if (j <= D.8476)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.8480;

                          (*mat)[((integer(kind=8)) j * stride.1194 + offset.1195) + (integer(kind=8)) i] = (*mat)[((integer(kind=8)) j * stride.1194 + offset.1195) + (integer(kind=8)) i] + ((*mat)[((integer(kind=8)) *p * stride.1194 + offset.1195) + (integer(kind=8)) i] * (*mat)[((integer(kind=8)) *p * stride.1194 + offset.1195) + (integer(kind=8)) j]) / (*mat)[((integer(kind=8)) *p * stride.1194 + offset.1195) + (integer(kind=8)) *p];
                          __label_000004:;
                          L.606:;
                          D.8480 = j == D.8476;
                          j = j + 1;
                          if (D.8480) goto L.607;
                        }
                      }
                  }
                L.607:;
              }
              {
                integer(kind=4) D.8481;
                integer(kind=4) D.8482;

                D.8481 = *p + 1;
                D.8482 = *n;
                j = D.8481;
                if (j <= D.8482)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.8486;

                          (*mat)[((integer(kind=8)) j * stride.1194 + offset.1195) + (integer(kind=8)) i] = (*mat)[((integer(kind=8)) j * stride.1194 + offset.1195) + (integer(kind=8)) i] + ((*mat)[((integer(kind=8)) *p * stride.1194 + offset.1195) + (integer(kind=8)) i] * (*mat)[((integer(kind=8)) j * stride.1194 + offset.1195) + (integer(kind=8)) *p]) / (*mat)[((integer(kind=8)) *p * stride.1194 + offset.1195) + (integer(kind=8)) *p];
                          __label_000005:;
                          L.608:;
                          D.8486 = j == D.8482;
                          j = j + 1;
                          if (D.8486) goto L.609;
                        }
                      }
                  }
                L.609:;
              }
              __label_000006:;
              L.604:;
              D.8488 = i == D.8472;
              i = i + 1;
              if (D.8488) goto L.605;
            }
          }
      }
    L.605:;
  }
  {
    integer(kind=4) D.8489;
    integer(kind=4) D.8490;

    D.8489 = *p + 1;
    D.8490 = *n;
    i = D.8489;
    if (i <= D.8490)
      {
        while (1)
          {
            {
              logical(kind=4) D.8500;

              {
                integer(kind=4) D.8493;
                integer(kind=4) D.8494;

                D.8493 = i;
                D.8494 = *n;
                j = D.8493;
                if (j <= D.8494)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.8498;

                          (*mat)[((integer(kind=8)) j * stride.1194 + offset.1195) + (integer(kind=8)) i] = (*mat)[((integer(kind=8)) j * stride.1194 + offset.1195) + (integer(kind=8)) i] + ((*mat)[((integer(kind=8)) i * stride.1194 + offset.1195) + (integer(kind=8)) *p] * (*mat)[((integer(kind=8)) j * stride.1194 + offset.1195) + (integer(kind=8)) *p]) / (*mat)[((integer(kind=8)) *p * stride.1194 + offset.1195) + (integer(kind=8)) *p];
                          __label_000007:;
                          L.612:;
                          D.8498 = j == D.8494;
                          j = j + 1;
                          if (D.8498) goto L.613;
                        }
                      }
                  }
                L.613:;
              }
              __label_000008:;
              L.610:;
              D.8500 = i == D.8490;
              i = i + 1;
              if (D.8500) goto L.611;
            }
          }
      }
    L.611:;
  }
  return;
}


swp (integer(kind=4) & restrict n, real(kind=8)[0:D.8552] * restrict mat, integer(kind=4) & restrict p)
{
  integer(kind=4) i;
  integer(kind=4) j;
  integer(kind=8) ubound.1197;
  integer(kind=8) ubound.1198;
  integer(kind=8) stride.1199;
  integer(kind=8) offset.1200;
  integer(kind=8) size.1201;
  integer(kind=8) D.8552;
  bitsizetype D.8553;
  sizetype D.8554;

  ubound.1197 = (integer(kind=8)) *n;
  stride.1199 = NON_LVALUE_EXPR <ubound.1197>;
  stride.1199 = MAX_EXPR <stride.1199, 0>;
  ubound.1198 = (integer(kind=8)) *n;
  size.1201 = stride.1199 * NON_LVALUE_EXPR <ubound.1198>;
  size.1201 = MAX_EXPR <size.1201, 0>;
  D.8552 = size.1201 + -1;
  D.8553 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1201> * 64;
  D.8554 = (sizetype) NON_LVALUE_EXPR <size.1201> * 8;
  offset.1200 = ~NON_LVALUE_EXPR <stride.1199>;
  (*mat)[((integer(kind=8)) *p * stride.1199 + offset.1200) + (integer(kind=8)) *p] = -(1.0e+0 / (*mat)[((integer(kind=8)) *p * stride.1199 + offset.1200) + (integer(kind=8)) *p]);
  {
    integer(kind=4) D.8512;

    D.8512 = *p + -1;
    i = 1;
    if (i <= D.8512)
      {
        while (1)
          {
            {
              logical(kind=4) D.8516;

              (*mat)[((integer(kind=8)) *p * stride.1199 + offset.1200) + (integer(kind=8)) i] = -((*mat)[((integer(kind=8)) *p * stride.1199 + offset.1200) + (integer(kind=8)) i] * (*mat)[((integer(kind=8)) *p * stride.1199 + offset.1200) + (integer(kind=8)) *p]);
              __label_000001:;
              L.614:;
              D.8516 = i == D.8512;
              i = i + 1;
              if (D.8516) goto L.615;
            }
          }
      }
    L.615:;
  }
  {
    integer(kind=4) D.8517;
    integer(kind=4) D.8518;

    D.8517 = *p + 1;
    D.8518 = *n;
    j = D.8517;
    if (j <= D.8518)
      {
        while (1)
          {
            {
              logical(kind=4) D.8522;

              (*mat)[((integer(kind=8)) j * stride.1199 + offset.1200) + (integer(kind=8)) *p] = -((*mat)[((integer(kind=8)) j * stride.1199 + offset.1200) + (integer(kind=8)) *p] * (*mat)[((integer(kind=8)) *p * stride.1199 + offset.1200) + (integer(kind=8)) *p]);
              __label_000002:;
              L.616:;
              D.8522 = j == D.8518;
              j = j + 1;
              if (D.8522) goto L.617;
            }
          }
      }
    L.617:;
  }
  {
    integer(kind=4) D.8523;

    D.8523 = *p + -1;
    i = 1;
    if (i <= D.8523)
      {
        while (1)
          {
            {
              logical(kind=4) D.8539;

              {
                integer(kind=4) D.8526;
                integer(kind=4) D.8527;

                D.8526 = i;
                D.8527 = *p + -1;
                j = D.8526;
                if (j <= D.8527)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.8531;

                          (*mat)[((integer(kind=8)) j * stride.1199 + offset.1200) + (integer(kind=8)) i] = (*mat)[((integer(kind=8)) j * stride.1199 + offset.1200) + (integer(kind=8)) i] + ((*mat)[((integer(kind=8)) *p * stride.1199 + offset.1200) + (integer(kind=8)) i] * (*mat)[((integer(kind=8)) *p * stride.1199 + offset.1200) + (integer(kind=8)) j]) / (*mat)[((integer(kind=8)) *p * stride.1199 + offset.1200) + (integer(kind=8)) *p];
                          __label_000004:;
                          L.620:;
                          D.8531 = j == D.8527;
                          j = j + 1;
                          if (D.8531) goto L.621;
                        }
                      }
                  }
                L.621:;
              }
              {
                integer(kind=4) D.8532;
                integer(kind=4) D.8533;

                D.8532 = *p + 1;
                D.8533 = *n;
                j = D.8532;
                if (j <= D.8533)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.8537;

                          (*mat)[((integer(kind=8)) j * stride.1199 + offset.1200) + (integer(kind=8)) i] = (*mat)[((integer(kind=8)) j * stride.1199 + offset.1200) + (integer(kind=8)) i] + ((*mat)[((integer(kind=8)) *p * stride.1199 + offset.1200) + (integer(kind=8)) i] * (*mat)[((integer(kind=8)) j * stride.1199 + offset.1200) + (integer(kind=8)) *p]) / (*mat)[((integer(kind=8)) *p * stride.1199 + offset.1200) + (integer(kind=8)) *p];
                          __label_000005:;
                          L.622:;
                          D.8537 = j == D.8533;
                          j = j + 1;
                          if (D.8537) goto L.623;
                        }
                      }
                  }
                L.623:;
              }
              __label_000006:;
              L.618:;
              D.8539 = i == D.8523;
              i = i + 1;
              if (D.8539) goto L.619;
            }
          }
      }
    L.619:;
  }
  {
    integer(kind=4) D.8540;
    integer(kind=4) D.8541;

    D.8540 = *p + 1;
    D.8541 = *n;
    i = D.8540;
    if (i <= D.8541)
      {
        while (1)
          {
            {
              logical(kind=4) D.8551;

              {
                integer(kind=4) D.8544;
                integer(kind=4) D.8545;

                D.8544 = i;
                D.8545 = *n;
                j = D.8544;
                if (j <= D.8545)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.8549;

                          (*mat)[((integer(kind=8)) j * stride.1199 + offset.1200) + (integer(kind=8)) i] = (*mat)[((integer(kind=8)) j * stride.1199 + offset.1200) + (integer(kind=8)) i] + ((*mat)[((integer(kind=8)) i * stride.1199 + offset.1200) + (integer(kind=8)) *p] * (*mat)[((integer(kind=8)) j * stride.1199 + offset.1200) + (integer(kind=8)) *p]) / (*mat)[((integer(kind=8)) *p * stride.1199 + offset.1200) + (integer(kind=8)) *p];
                          __label_000007:;
                          L.626:;
                          D.8549 = j == D.8545;
                          j = j + 1;
                          if (D.8549) goto L.627;
                        }
                      }
                  }
                L.627:;
              }
              __label_000008:;
              L.624:;
              D.8551 = i == D.8541;
              i = i + 1;
              if (D.8551) goto L.625;
            }
          }
      }
    L.625:;
  }
  return;
}


drpsibd (integer(kind=4) & restrict r, integer(kind=4) & restrict q, integer(kind=4) & restrict m, real(kind=8)[0:D.8693] * restrict psi, real(kind=8)[0:D.8705] * restrict wkqq1, real(kind=8)[0:D.8696] * restrict wkqq2, real(kind=8)[0:D.8702] * restrict wkqrv, integer(kind=4) & restrict nhyp, real(kind=8)[0:D.8708] * restrict hyp, real(kind=8)[0:D.8699] * restrict b)
{
  integer(kind=8) ubound.1202;
  integer(kind=8) ubound.1203;
  integer(kind=8) stride.1204;
  integer(kind=8) ubound.1205;
  integer(kind=8) stride.1206;
  integer(kind=8) offset.1207;
  integer(kind=8) size.1208;
  real(kind=8) c;
  integer(kind=8) ubound.1209;
  integer(kind=8) size.1210;
  integer(kind=4) i;
  integer(kind=4) j;
  integer(kind=4) k;
  integer(kind=4) l;
  integer(kind=8) ubound.1211;
  integer(kind=8) ubound.1212;
  integer(kind=8) stride.1213;
  integer(kind=8) ubound.1214;
  integer(kind=8) stride.1215;
  integer(kind=8) offset.1216;
  integer(kind=8) size.1217;
  integer(kind=4) s;
  real(kind=8) sum;
  integer(kind=8) ubound.1218;
  integer(kind=8) ubound.1219;
  integer(kind=8) stride.1220;
  integer(kind=8) offset.1221;
  integer(kind=8) size.1222;
  integer(kind=8) ubound.1223;
  integer(kind=8) ubound.1224;
  integer(kind=8) stride.1225;
  integer(kind=8) offset.1226;
  integer(kind=8) size.1227;
  integer(kind=8) ubound.1228;
  integer(kind=8) size.1229;
  integer(kind=8) D.8693;
  bitsizetype D.8694;
  sizetype D.8695;
  integer(kind=8) D.8696;
  bitsizetype D.8697;
  sizetype D.8698;
  integer(kind=8) D.8699;
  bitsizetype D.8700;
  sizetype D.8701;
  integer(kind=8) D.8702;
  bitsizetype D.8703;
  sizetype D.8704;
  integer(kind=8) D.8705;
  bitsizetype D.8706;
  sizetype D.8707;
  integer(kind=8) D.8708;
  bitsizetype D.8709;
  sizetype D.8710;

  ubound.1209 = (integer(kind=8)) *nhyp;
  size.1210 = NON_LVALUE_EXPR <ubound.1209>;
  size.1210 = MAX_EXPR <size.1210, 0>;
  D.8708 = size.1210 + -1;
  D.8709 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1210> * 64;
  D.8710 = (sizetype) NON_LVALUE_EXPR <size.1210> * 8;
  ubound.1218 = (integer(kind=8)) *q;
  stride.1220 = NON_LVALUE_EXPR <ubound.1218>;
  stride.1220 = MAX_EXPR <stride.1220, 0>;
  ubound.1219 = (integer(kind=8)) *q;
  size.1222 = stride.1220 * NON_LVALUE_EXPR <ubound.1219>;
  size.1222 = MAX_EXPR <size.1222, 0>;
  D.8705 = size.1222 + -1;
  D.8706 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1222> * 64;
  D.8707 = (sizetype) NON_LVALUE_EXPR <size.1222> * 8;
  offset.1221 = ~NON_LVALUE_EXPR <stride.1220>;
  ubound.1228 = (integer(kind=8)) (*q * *r);
  size.1229 = NON_LVALUE_EXPR <ubound.1228>;
  size.1229 = MAX_EXPR <size.1229, 0>;
  D.8702 = size.1229 + -1;
  D.8703 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1229> * 64;
  D.8704 = (sizetype) NON_LVALUE_EXPR <size.1229> * 8;
  ubound.1202 = (integer(kind=8)) *q;
  stride.1204 = NON_LVALUE_EXPR <ubound.1202>;
  stride.1204 = MAX_EXPR <stride.1204, 0>;
  ubound.1203 = (integer(kind=8)) *r;
  stride.1206 = stride.1204 * NON_LVALUE_EXPR <ubound.1203>;
  stride.1206 = MAX_EXPR <stride.1206, 0>;
  ubound.1205 = (integer(kind=8)) *m;
  size.1208 = stride.1206 * NON_LVALUE_EXPR <ubound.1205>;
  size.1208 = MAX_EXPR <size.1208, 0>;
  D.8699 = size.1208 + -1;
  D.8700 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1208> * 64;
  D.8701 = (sizetype) NON_LVALUE_EXPR <size.1208> * 8;
  offset.1207 = ~NON_LVALUE_EXPR <stride.1204> - NON_LVALUE_EXPR <stride.1206>;
  ubound.1223 = (integer(kind=8)) *q;
  stride.1225 = NON_LVALUE_EXPR <ubound.1223>;
  stride.1225 = MAX_EXPR <stride.1225, 0>;
  ubound.1224 = (integer(kind=8)) *q;
  size.1227 = stride.1225 * NON_LVALUE_EXPR <ubound.1224>;
  size.1227 = MAX_EXPR <size.1227, 0>;
  D.8696 = size.1227 + -1;
  D.8697 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1227> * 64;
  D.8698 = (sizetype) NON_LVALUE_EXPR <size.1227> * 8;
  offset.1226 = ~NON_LVALUE_EXPR <stride.1225>;
  ubound.1211 = (integer(kind=8)) *q;
  stride.1213 = NON_LVALUE_EXPR <ubound.1211>;
  stride.1213 = MAX_EXPR <stride.1213, 0>;
  ubound.1212 = (integer(kind=8)) *q;
  stride.1215 = stride.1213 * NON_LVALUE_EXPR <ubound.1212>;
  stride.1215 = MAX_EXPR <stride.1215, 0>;
  ubound.1214 = (integer(kind=8)) *r;
  size.1217 = stride.1215 * NON_LVALUE_EXPR <ubound.1214>;
  size.1217 = MAX_EXPR <size.1217, 0>;
  D.8693 = size.1217 + -1;
  D.8694 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1217> * 64;
  D.8695 = (sizetype) NON_LVALUE_EXPR <size.1217> * 8;
  offset.1216 = ~NON_LVALUE_EXPR <stride.1213> - NON_LVALUE_EXPR <stride.1215>;
  {
    integer(kind=4) D.8612;

    D.8612 = *r;
    l = 1;
    if (l <= D.8612)
      {
        while (1)
          {
            {
              logical(kind=4) D.8692;

              k = ((*r * (*r + 1)) / 2 + 1) + l;
              c = (*hyp)[(integer(kind=8)) k + -1];
              k = (((*r * (*r + 1)) / 2 + 1) + *r) + (((l + -1) * *q) * (*q + 1)) / 2;
              {
                integer(kind=4) D.8615;

                D.8615 = *q;
                i = 1;
                if (i <= D.8615)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.8625;

                          {
                            integer(kind=4) D.8618;
                            integer(kind=4) D.8619;

                            D.8618 = i;
                            D.8619 = *q;
                            j = D.8618;
                            if (j <= D.8619)
                              {
                                while (1)
                                  {
                                    {
                                      logical(kind=4) D.8623;

                                      k = k + 1;
                                      (*wkqq1)[((integer(kind=8)) j * stride.1220 + offset.1221) + (integer(kind=8)) i] = (*hyp)[(integer(kind=8)) k + -1];
                                      __label_000004:;
                                      L.632:;
                                      D.8623 = j == D.8619;
                                      j = j + 1;
                                      if (D.8623) goto L.633;
                                    }
                                  }
                              }
                            L.633:;
                          }
                          __label_000005:;
                          L.630:;
                          D.8625 = i == D.8615;
                          i = i + 1;
                          if (D.8625) goto L.631;
                        }
                      }
                  }
                L.631:;
              }
              {
                integer(kind=4) D.8626;

                D.8626 = *m;
                s = 1;
                if (s <= D.8626)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.8646;

                          {
                            integer(kind=4) D.8629;

                            D.8629 = *q;
                            i = 1;
                            if (i <= D.8629)
                              {
                                while (1)
                                  {
                                    {
                                      logical(kind=4) D.8633;

                                      (*wkqrv)[(integer(kind=8)) i + -1] = (*b)[(((integer(kind=8)) s * stride.1206 + offset.1207) + (integer(kind=8)) l * stride.1204) + (integer(kind=8)) i];
                                      __label_000015:;
                                      L.636:;
                                      D.8633 = i == D.8629;
                                      i = i + 1;
                                      if (D.8633) goto L.637;
                                    }
                                  }
                              }
                            L.637:;
                          }
                          {
                            integer(kind=4) D.8634;

                            D.8634 = *q;
                            i = 1;
                            if (i <= D.8634)
                              {
                                while (1)
                                  {
                                    {
                                      logical(kind=4) D.8644;

                                      {
                                        integer(kind=4) D.8637;
                                        integer(kind=4) D.8638;

                                        D.8637 = i;
                                        D.8638 = *q;
                                        j = D.8637;
                                        if (j <= D.8638)
                                          {
                                            while (1)
                                              {
                                                {
                                                  logical(kind=4) D.8642;

                                                  (*wkqq1)[((integer(kind=8)) j * stride.1220 + offset.1221) + (integer(kind=8)) i] = (*wkqq1)[((integer(kind=8)) j * stride.1220 + offset.1221) + (integer(kind=8)) i] + (*wkqrv)[(integer(kind=8)) i + -1] * (*wkqrv)[(integer(kind=8)) j + -1];
                                                  __label_000030:;
                                                  L.640:;
                                                  D.8642 = j == D.8638;
                                                  j = j + 1;
                                                  if (D.8642) goto L.641;
                                                }
                                              }
                                          }
                                        L.641:;
                                      }
                                      __label_000040:;
                                      L.638:;
                                      D.8644 = i == D.8634;
                                      i = i + 1;
                                      if (D.8644) goto L.639;
                                    }
                                  }
                              }
                            L.639:;
                          }
                          __label_000100:;
                          L.634:;
                          D.8646 = s == D.8626;
                          s = s + 1;
                          if (D.8646) goto L.635;
                        }
                      }
                  }
                L.635:;
              }
              chfc ((integer(kind=4) *) q, (integer(kind=4) *) q, wkqq1);
              {
                real(kind=4) D.8647;

                D.8647 = (real(kind=4)) c + (real(kind=4)) *m;
                bfac ((integer(kind=4) *) q, &D.8647, wkqq2);
              }
              bkslv ((integer(kind=4) *) q, (integer(kind=4) *) q, wkqq2);
              {
                integer(kind=4) D.8648;

                D.8648 = *q;
                i = 1;
                if (i <= D.8648)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.8663;

                          {
                            integer(kind=4) D.8651;

                            D.8651 = *q;
                            j = 1;
                            if (j <= D.8651)
                              {
                                while (1)
                                  {
                                    {
                                      logical(kind=4) D.8661;

                                      sum = 0.0;
                                      {
                                        integer(kind=4) M.1230;
                                        integer(kind=4) D.8655;

                                        M.1230 = i;
                                        if (j < M.1230)
                                          {
                                            M.1230 = j;
                                          }
                                        D.8655 = M.1230;
                                        k = 1;
                                        if (k <= D.8655)
                                          {
                                            while (1)
                                              {
                                                {
                                                  logical(kind=4) D.8659;

                                                  sum = (*wkqq1)[((integer(kind=8)) i * stride.1220 + offset.1221) + (integer(kind=8)) k] * (*wkqq2)[((integer(kind=8)) j * stride.1225 + offset.1226) + (integer(kind=8)) k] + sum;
                                                  __label_000180:;
                                                  L.646:;
                                                  D.8659 = k == D.8655;
                                                  k = k + 1;
                                                  if (D.8659) goto L.647;
                                                }
                                              }
                                          }
                                        L.647:;
                                      }
                                      (*psi)[(((integer(kind=8)) l * stride.1215 + offset.1216) + (integer(kind=8)) j * stride.1213) + (integer(kind=8)) i] = sum;
                                      __label_000190:;
                                      L.644:;
                                      D.8661 = j == D.8651;
                                      j = j + 1;
                                      if (D.8661) goto L.645;
                                    }
                                  }
                              }
                            L.645:;
                          }
                          __label_000200:;
                          L.642:;
                          D.8663 = i == D.8648;
                          i = i + 1;
                          if (D.8663) goto L.643;
                        }
                      }
                  }
                L.643:;
              }
              {
                integer(kind=4) D.8664;

                D.8664 = *q;
                i = 1;
                if (i <= D.8664)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.8673;

                          {
                            integer(kind=4) D.8667;

                            D.8667 = *q;
                            j = 1;
                            if (j <= D.8667)
                              {
                                while (1)
                                  {
                                    {
                                      logical(kind=4) D.8671;

                                      (*wkqq2)[((integer(kind=8)) j * stride.1225 + offset.1226) + (integer(kind=8)) i] = (*psi)[(((integer(kind=8)) l * stride.1215 + offset.1216) + (integer(kind=8)) j * stride.1213) + (integer(kind=8)) i];
                                      __label_000204:;
                                      L.650:;
                                      D.8671 = j == D.8667;
                                      j = j + 1;
                                      if (D.8671) goto L.651;
                                    }
                                  }
                              }
                            L.651:;
                          }
                          __label_000205:;
                          L.648:;
                          D.8673 = i == D.8664;
                          i = i + 1;
                          if (D.8673) goto L.649;
                        }
                      }
                  }
                L.649:;
              }
              {
                integer(kind=4) D.8674;

                D.8674 = *q;
                i = 1;
                if (i <= D.8674)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.8690;

                          {
                            integer(kind=4) D.8677;
                            integer(kind=4) D.8678;

                            D.8677 = i;
                            D.8678 = *q;
                            j = D.8677;
                            if (j <= D.8678)
                              {
                                while (1)
                                  {
                                    {
                                      logical(kind=4) D.8688;

                                      sum = 0.0;
                                      {
                                        integer(kind=4) D.8681;

                                        D.8681 = *q;
                                        k = 1;
                                        if (k <= D.8681)
                                          {
                                            while (1)
                                              {
                                                {
                                                  logical(kind=4) D.8685;

                                                  sum = (*wkqq2)[((integer(kind=8)) k * stride.1225 + offset.1226) + (integer(kind=8)) i] * (*wkqq2)[((integer(kind=8)) k * stride.1225 + offset.1226) + (integer(kind=8)) j] + sum;
                                                  __label_000250:;
                                                  L.656:;
                                                  D.8685 = k == D.8681;
                                                  k = k + 1;
                                                  if (D.8685) goto L.657;
                                                }
                                              }
                                          }
                                        L.657:;
                                      }
                                      (*psi)[(((integer(kind=8)) l * stride.1215 + offset.1216) + (integer(kind=8)) j * stride.1213) + (integer(kind=8)) i] = sum;
                                      if (i != j)
                                        {
                                          (*psi)[(((integer(kind=8)) l * stride.1215 + offset.1216) + (integer(kind=8)) i * stride.1213) + (integer(kind=8)) j] = (*psi)[(((integer(kind=8)) l * stride.1215 + offset.1216) + (integer(kind=8)) j * stride.1213) + (integer(kind=8)) i];
                                        }
                                      L.658:;
                                      __label_000280:;
                                      L.654:;
                                      D.8688 = j == D.8678;
                                      j = j + 1;
                                      if (D.8688) goto L.655;
                                    }
                                  }
                              }
                            L.655:;
                          }
                          __label_000300:;
                          L.652:;
                          D.8690 = i == D.8674;
                          i = i + 1;
                          if (D.8690) goto L.653;
                        }
                      }
                  }
                L.653:;
              }
              __label_000400:;
              L.628:;
              D.8692 = l == D.8612;
              l = l + 1;
              if (D.8692) goto L.629;
            }
          }
      }
    L.629:;
  }
  return;
}


gamm (real(kind=4) & restrict a)
{
  real(kind=4) b;
  static real(kind=4) e = 2.7182819843292236328125e+0;
  real(kind=4) lq;
  real(kind=4) p;
  real(kind=4) q;
  real(kind=4) u;
  real(kind=4) u1;
  real(kind=4) x;
  real(kind=4) y;
  real(kind=4) __result_gamm;

  if (*a >= 1.0e+0)
    {
      __label_000001:;
      {
        static integer(kind=4) C.8722 = 0;

        u = rangen (&C.8722);
      }
      {
        static integer(kind=4) C.8723 = 0;

        y = -__builtin_logf (rangen (&C.8723));
      }
      lq = ((*a - 1.0e+0)) * ((__builtin_logf (y) - ((y - 1.0e+0))));
      q = __builtin_expf (lq);
      if (u <= q)
        {
          __result_gamm = *a * y;
        }
      else
        {
          goto __label_000001;
        }
      L.660:;
    }
  else
    {
      __label_000002:;
      {
        static integer(kind=4) C.8727 = 0;

        u = rangen (&C.8727);
      }
      b = ((*a + e)) / e;
      p = b * u;
      if (p > 1.0e+0) goto __label_000004;
      L.661:;
      {
        real(kind=4) D.8730;

        D.8730 = p;
        x = __builtin_powf (D.8730, ((1.0e+0 / *a)));
      }
      {
        static integer(kind=4) C.8731 = 0;

        u1 = rangen (&C.8731);
      }
      {
        real(kind=4) D.8733;

        D.8733 = e;
        if (((__builtin_powf (D.8733, ((-x))))) < u1)
          {
            goto __label_000002;
          }
        else
          {
            __result_gamm = x;
            goto __label_000010;
          }
      }
      L.662:;
      __label_000004:;
      x = -__builtin_logf (((b - p)) / *a);
      {
        static integer(kind=4) C.8735 = 0;

        u1 = rangen (&C.8735);
      }
      {
        real(kind=4) D.8737;

        D.8737 = x;
        if (((__builtin_powf (D.8737, ((*a - 1.0e+0))))) < u1)
          {
            goto __label_000002;
          }
        else
          {
            __result_gamm = x;
            goto __label_000010;
          }
      }
      L.663:;
    }
  L.659:;
  __label_000010:;
  return __result_gamm;
  return __result_gamm;
}


mksigbd (integer(kind=4) & restrict r, integer(kind=4) & restrict q, integer(kind=4) & restrict m, real(kind=8)[0:D.8973] * restrict psi, real(kind=8)[0:D.8958] * restrict sigma, real(kind=8)[0:D.8949] * restrict ztz, real(kind=8)[0:D.8952] * restrict sig, real(kind=8)[0:D.8961] * restrict wkrr1, real(kind=8)[0:D.8955] * restrict wkrr2, real(kind=8)[0:D.8970] * restrict wkrqrq2, integer(kind=4) & restrict zflag, integer(kind=4) & restrict nhyp, real(kind=8)[0:D.8976] * restrict hyp, real(kind=8)[0:D.8967] * restrict wkqq1, real(kind=8)[0:D.8964] * restrict wkqq2)
{
  real(kind=8) c;
  integer(kind=8) ubound.1231;
  integer(kind=8) size.1232;
  integer(kind=4) i;
  integer(kind=4) ia;
  integer(kind=4) ii;
  integer(kind=4) j;
  integer(kind=4) ja;
  integer(kind=4) jj;
  integer(kind=4) k1;
  integer(kind=4) k2;
  integer(kind=4) l;
  integer(kind=8) ubound.1233;
  integer(kind=8) ubound.1234;
  integer(kind=8) stride.1235;
  integer(kind=8) ubound.1236;
  integer(kind=8) stride.1237;
  integer(kind=8) offset.1238;
  integer(kind=8) size.1239;
  integer(kind=4) s;
  integer(kind=8) ubound.1240;
  integer(kind=8) ubound.1241;
  integer(kind=8) stride.1242;
  integer(kind=8) ubound.1243;
  integer(kind=8) stride.1244;
  integer(kind=8) offset.1245;
  integer(kind=8) size.1246;
  integer(kind=8) ubound.1247;
  integer(kind=8) ubound.1248;
  integer(kind=8) stride.1249;
  integer(kind=8) offset.1250;
  integer(kind=8) size.1251;
  integer(kind=8) ubound.1252;
  integer(kind=8) ubound.1253;
  integer(kind=8) stride.1254;
  integer(kind=8) offset.1255;
  integer(kind=8) size.1256;
  integer(kind=8) ubound.1257;
  integer(kind=8) ubound.1258;
  integer(kind=8) stride.1259;
  integer(kind=8) offset.1260;
  integer(kind=8) size.1261;
  integer(kind=8) ubound.1262;
  integer(kind=8) ubound.1263;
  integer(kind=8) stride.1264;
  integer(kind=8) offset.1265;
  integer(kind=8) size.1266;
  integer(kind=8) ubound.1267;
  integer(kind=8) ubound.1268;
  integer(kind=8) stride.1269;
  integer(kind=8) offset.1270;
  integer(kind=8) size.1271;
  integer(kind=8) ubound.1272;
  integer(kind=8) ubound.1273;
  integer(kind=8) stride.1274;
  integer(kind=8) offset.1275;
  integer(kind=8) size.1276;
  integer(kind=8) ubound.1277;
  integer(kind=8) ubound.1278;
  integer(kind=8) stride.1279;
  integer(kind=8) ubound.1280;
  integer(kind=8) stride.1281;
  integer(kind=8) offset.1282;
  integer(kind=8) size.1283;
  integer(kind=8) D.8949;
  bitsizetype D.8950;
  sizetype D.8951;
  integer(kind=8) D.8952;
  bitsizetype D.8953;
  sizetype D.8954;
  integer(kind=8) D.8955;
  bitsizetype D.8956;
  sizetype D.8957;
  integer(kind=8) D.8958;
  bitsizetype D.8959;
  sizetype D.8960;
  integer(kind=8) D.8961;
  bitsizetype D.8962;
  sizetype D.8963;
  integer(kind=8) D.8964;
  bitsizetype D.8965;
  sizetype D.8966;
  integer(kind=8) D.8967;
  bitsizetype D.8968;
  sizetype D.8969;
  integer(kind=8) D.8970;
  bitsizetype D.8971;
  sizetype D.8972;
  integer(kind=8) D.8973;
  bitsizetype D.8974;
  sizetype D.8975;
  integer(kind=8) D.8976;
  bitsizetype D.8977;
  sizetype D.8978;

  ubound.1231 = (integer(kind=8)) *nhyp;
  size.1232 = NON_LVALUE_EXPR <ubound.1231>;
  size.1232 = MAX_EXPR <size.1232, 0>;
  D.8976 = size.1232 + -1;
  D.8977 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1232> * 64;
  D.8978 = (sizetype) NON_LVALUE_EXPR <size.1232> * 8;
  ubound.1233 = (integer(kind=8)) *q;
  stride.1235 = NON_LVALUE_EXPR <ubound.1233>;
  stride.1235 = MAX_EXPR <stride.1235, 0>;
  ubound.1234 = (integer(kind=8)) *q;
  stride.1237 = stride.1235 * NON_LVALUE_EXPR <ubound.1234>;
  stride.1237 = MAX_EXPR <stride.1237, 0>;
  ubound.1236 = (integer(kind=8)) *r;
  size.1239 = stride.1237 * NON_LVALUE_EXPR <ubound.1236>;
  size.1239 = MAX_EXPR <size.1239, 0>;
  D.8973 = size.1239 + -1;
  D.8974 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1239> * 64;
  D.8975 = (sizetype) NON_LVALUE_EXPR <size.1239> * 8;
  offset.1238 = ~NON_LVALUE_EXPR <stride.1235> - NON_LVALUE_EXPR <stride.1237>;
  ubound.1262 = (integer(kind=8)) (*r * *q);
  stride.1264 = NON_LVALUE_EXPR <ubound.1262>;
  stride.1264 = MAX_EXPR <stride.1264, 0>;
  ubound.1263 = (integer(kind=8)) (*r * *q);
  size.1266 = stride.1264 * NON_LVALUE_EXPR <ubound.1263>;
  size.1266 = MAX_EXPR <size.1266, 0>;
  D.8970 = size.1266 + -1;
  D.8971 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1266> * 64;
  D.8972 = (sizetype) NON_LVALUE_EXPR <size.1266> * 8;
  offset.1265 = ~NON_LVALUE_EXPR <stride.1264>;
  ubound.1252 = (integer(kind=8)) *q;
  stride.1254 = NON_LVALUE_EXPR <ubound.1252>;
  stride.1254 = MAX_EXPR <stride.1254, 0>;
  ubound.1253 = (integer(kind=8)) *q;
  size.1256 = stride.1254 * NON_LVALUE_EXPR <ubound.1253>;
  size.1256 = MAX_EXPR <size.1256, 0>;
  D.8967 = size.1256 + -1;
  D.8968 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1256> * 64;
  D.8969 = (sizetype) NON_LVALUE_EXPR <size.1256> * 8;
  offset.1255 = ~NON_LVALUE_EXPR <stride.1254>;
  ubound.1257 = (integer(kind=8)) *q;
  stride.1259 = NON_LVALUE_EXPR <ubound.1257>;
  stride.1259 = MAX_EXPR <stride.1259, 0>;
  ubound.1258 = (integer(kind=8)) *q;
  size.1261 = stride.1259 * NON_LVALUE_EXPR <ubound.1258>;
  size.1261 = MAX_EXPR <size.1261, 0>;
  D.8964 = size.1261 + -1;
  D.8965 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1261> * 64;
  D.8966 = (sizetype) NON_LVALUE_EXPR <size.1261> * 8;
  offset.1260 = ~NON_LVALUE_EXPR <stride.1259>;
  ubound.1267 = (integer(kind=8)) *r;
  stride.1269 = NON_LVALUE_EXPR <ubound.1267>;
  stride.1269 = MAX_EXPR <stride.1269, 0>;
  ubound.1268 = (integer(kind=8)) *r;
  size.1271 = stride.1269 * NON_LVALUE_EXPR <ubound.1268>;
  size.1271 = MAX_EXPR <size.1271, 0>;
  D.8961 = size.1271 + -1;
  D.8962 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1271> * 64;
  D.8963 = (sizetype) NON_LVALUE_EXPR <size.1271> * 8;
  offset.1270 = ~NON_LVALUE_EXPR <stride.1269>;
  ubound.1247 = (integer(kind=8)) *r;
  stride.1249 = NON_LVALUE_EXPR <ubound.1247>;
  stride.1249 = MAX_EXPR <stride.1249, 0>;
  ubound.1248 = (integer(kind=8)) *r;
  size.1251 = stride.1249 * NON_LVALUE_EXPR <ubound.1248>;
  size.1251 = MAX_EXPR <size.1251, 0>;
  D.8958 = size.1251 + -1;
  D.8959 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1251> * 64;
  D.8960 = (sizetype) NON_LVALUE_EXPR <size.1251> * 8;
  offset.1250 = ~NON_LVALUE_EXPR <stride.1249>;
  ubound.1272 = (integer(kind=8)) *r;
  stride.1274 = NON_LVALUE_EXPR <ubound.1272>;
  stride.1274 = MAX_EXPR <stride.1274, 0>;
  ubound.1273 = (integer(kind=8)) *r;
  size.1276 = stride.1274 * NON_LVALUE_EXPR <ubound.1273>;
  size.1276 = MAX_EXPR <size.1276, 0>;
  D.8955 = size.1276 + -1;
  D.8956 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1276> * 64;
  D.8957 = (sizetype) NON_LVALUE_EXPR <size.1276> * 8;
  offset.1275 = ~NON_LVALUE_EXPR <stride.1274>;
  ubound.1240 = (integer(kind=8)) (*r * *q);
  stride.1242 = NON_LVALUE_EXPR <ubound.1240>;
  stride.1242 = MAX_EXPR <stride.1242, 0>;
  ubound.1241 = (integer(kind=8)) (*r * *q);
  stride.1244 = stride.1242 * NON_LVALUE_EXPR <ubound.1241>;
  stride.1244 = MAX_EXPR <stride.1244, 0>;
  ubound.1243 = (integer(kind=8)) *m;
  size.1246 = stride.1244 * NON_LVALUE_EXPR <ubound.1243>;
  size.1246 = MAX_EXPR <size.1246, 0>;
  D.8952 = size.1246 + -1;
  D.8953 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1246> * 64;
  D.8954 = (sizetype) NON_LVALUE_EXPR <size.1246> * 8;
  offset.1245 = ~NON_LVALUE_EXPR <stride.1242> - NON_LVALUE_EXPR <stride.1244>;
  ubound.1277 = (integer(kind=8)) *q;
  stride.1279 = NON_LVALUE_EXPR <ubound.1277>;
  stride.1279 = MAX_EXPR <stride.1279, 0>;
  ubound.1278 = (integer(kind=8)) *q;
  stride.1281 = stride.1279 * NON_LVALUE_EXPR <ubound.1278>;
  stride.1281 = MAX_EXPR <stride.1281, 0>;
  ubound.1280 = (integer(kind=8)) *m;
  size.1283 = stride.1281 * NON_LVALUE_EXPR <ubound.1280>;
  size.1283 = MAX_EXPR <size.1283, 0>;
  D.8949 = size.1283 + -1;
  D.8950 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1283> * 64;
  D.8951 = (sizetype) NON_LVALUE_EXPR <size.1283> * 8;
  offset.1282 = ~NON_LVALUE_EXPR <stride.1279> - NON_LVALUE_EXPR <stride.1281>;
  if (*zflag == 1)
    {
      k1 = (*r * (*r + 1)) / 2 + 1;
      k2 = ((*r * (*r + 1)) / 2 + 1) + *r;
      {
        integer(kind=4) D.8832;

        D.8832 = *r;
        l = 1;
        if (l <= D.8832)
          {
            while (1)
              {
                {
                  logical(kind=4) D.8847;

                  k1 = k1 + 1;
                  c = (*hyp)[(integer(kind=8)) k1 + -1];
                  {
                    integer(kind=4) D.8835;

                    D.8835 = *q;
                    i = 1;
                    if (i <= D.8835)
                      {
                        while (1)
                          {
                            {
                              logical(kind=4) D.8845;

                              {
                                integer(kind=4) D.8838;
                                integer(kind=4) D.8839;

                                D.8838 = i;
                                D.8839 = *q;
                                j = D.8838;
                                if (j <= D.8839)
                                  {
                                    while (1)
                                      {
                                        {
                                          logical(kind=4) D.8843;

                                          k2 = k2 + 1;
                                          (*psi)[(((integer(kind=8)) l * stride.1237 + offset.1238) + (integer(kind=8)) j * stride.1235) + (integer(kind=8)) i] = (*hyp)[(integer(kind=8)) k2 + -1] / c;
                                          __label_000003:;
                                          L.669:;
                                          D.8843 = j == D.8839;
                                          j = j + 1;
                                          if (D.8843) goto L.670;
                                        }
                                      }
                                  }
                                L.670:;
                              }
                              __label_000004:;
                              L.667:;
                              D.8845 = i == D.8835;
                              i = i + 1;
                              if (D.8845) goto L.668;
                            }
                          }
                      }
                    L.668:;
                  }
                  __label_000005:;
                  L.665:;
                  D.8847 = l == D.8832;
                  l = l + 1;
                  if (D.8847) goto L.666;
                }
              }
          }
        L.666:;
      }
    }
  L.664:;
  {
    integer(kind=4) D.8848;

    D.8848 = *r * *q;
    i = 1;
    if (i <= D.8848)
      {
        while (1)
          {
            {
              logical(kind=4) D.8858;

              {
                integer(kind=4) D.8851;
                integer(kind=4) D.8852;

                D.8851 = i;
                D.8852 = *r * *q;
                j = D.8851;
                if (j <= D.8852)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.8856;

                          (*wkrqrq2)[((integer(kind=8)) j * stride.1264 + offset.1265) + (integer(kind=8)) i] = 0.0;
                          __label_000101:;
                          L.673:;
                          D.8856 = j == D.8852;
                          j = j + 1;
                          if (D.8856) goto L.674;
                        }
                      }
                  }
                L.674:;
              }
              __label_000102:;
              L.671:;
              D.8858 = i == D.8848;
              i = i + 1;
              if (D.8858) goto L.672;
            }
          }
      }
    L.672:;
  }
  {
    integer(kind=4) D.8859;

    D.8859 = *r;
    l = 1;
    if (l <= D.8859)
      {
        while (1)
          {
            {
              logical(kind=4) D.8885;

              {
                integer(kind=4) D.8862;

                D.8862 = *q;
                i = 1;
                if (i <= D.8862)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.8872;

                          {
                            integer(kind=4) D.8865;
                            integer(kind=4) D.8866;

                            D.8865 = i;
                            D.8866 = *q;
                            j = D.8865;
                            if (j <= D.8866)
                              {
                                while (1)
                                  {
                                    {
                                      logical(kind=4) D.8870;

                                      (*wkqq1)[((integer(kind=8)) j * stride.1254 + offset.1255) + (integer(kind=8)) i] = (*psi)[(((integer(kind=8)) l * stride.1237 + offset.1238) + (integer(kind=8)) j * stride.1235) + (integer(kind=8)) i];
                                      __label_000104:;
                                      L.679:;
                                      D.8870 = j == D.8866;
                                      j = j + 1;
                                      if (D.8870) goto L.680;
                                    }
                                  }
                              }
                            L.680:;
                          }
                          __label_000105:;
                          L.677:;
                          D.8872 = i == D.8862;
                          i = i + 1;
                          if (D.8872) goto L.678;
                        }
                      }
                  }
                L.678:;
              }
              chfc ((integer(kind=4) *) q, (integer(kind=4) *) q, wkqq1);
              bkslv ((integer(kind=4) *) q, (integer(kind=4) *) q, wkqq1);
              mm ((integer(kind=4) *) q, (integer(kind=4) *) q, wkqq1, wkqq2);
              {
                integer(kind=4) D.8873;

                D.8873 = *q;
                i = 1;
                if (i <= D.8873)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.8883;

                          {
                            integer(kind=4) D.8876;
                            integer(kind=4) D.8877;

                            D.8876 = i;
                            D.8877 = *q;
                            j = D.8876;
                            if (j <= D.8877)
                              {
                                while (1)
                                  {
                                    {
                                      logical(kind=4) D.8881;

                                      ii = (l + -1) * *q + i;
                                      jj = (l + -1) * *q + j;
                                      (*wkrqrq2)[((integer(kind=8)) jj * stride.1264 + offset.1265) + (integer(kind=8)) ii] = (*wkqq2)[((integer(kind=8)) j * stride.1259 + offset.1260) + (integer(kind=8)) i];
                                      __label_000107:;
                                      L.683:;
                                      D.8881 = j == D.8877;
                                      j = j + 1;
                                      if (D.8881) goto L.684;
                                    }
                                  }
                              }
                            L.684:;
                          }
                          __label_000108:;
                          L.681:;
                          D.8883 = i == D.8873;
                          i = i + 1;
                          if (D.8883) goto L.682;
                        }
                      }
                  }
                L.682:;
              }
              __label_000110:;
              L.675:;
              D.8885 = l == D.8859;
              l = l + 1;
              if (D.8885) goto L.676;
            }
          }
      }
    L.676:;
  }
  {
    integer(kind=4) D.8886;

    D.8886 = *r;
    i = 1;
    if (i <= D.8886)
      {
        while (1)
          {
            {
              logical(kind=4) D.8896;

              {
                integer(kind=4) D.8889;
                integer(kind=4) D.8890;

                D.8889 = i;
                D.8890 = *r;
                j = D.8889;
                if (j <= D.8890)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.8894;

                          (*wkrr1)[((integer(kind=8)) j * stride.1269 + offset.1270) + (integer(kind=8)) i] = (*sigma)[((integer(kind=8)) j * stride.1249 + offset.1250) + (integer(kind=8)) i];
                          __label_000006:;
                          L.687:;
                          D.8894 = j == D.8890;
                          j = j + 1;
                          if (D.8894) goto L.688;
                        }
                      }
                  }
                L.688:;
              }
              __label_000007:;
              L.685:;
              D.8896 = i == D.8886;
              i = i + 1;
              if (D.8896) goto L.686;
            }
          }
      }
    L.686:;
  }
  chfc ((integer(kind=4) *) r, (integer(kind=4) *) r, wkrr1);
  bkslv ((integer(kind=4) *) r, (integer(kind=4) *) r, wkrr1);
  mm ((integer(kind=4) *) r, (integer(kind=4) *) r, wkrr1, wkrr2);
  {
    integer(kind=4) D.8897;

    D.8897 = *r;
    i = 1;
    if (i <= D.8897)
      {
        while (1)
          {
            {
              logical(kind=4) D.8907;

              {
                integer(kind=4) D.8900;
                integer(kind=4) D.8901;

                D.8900 = i + 1;
                D.8901 = *r;
                j = D.8900;
                if (j <= D.8901)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.8905;

                          (*wkrr2)[((integer(kind=8)) i * stride.1274 + offset.1275) + (integer(kind=8)) j] = (*wkrr2)[((integer(kind=8)) j * stride.1274 + offset.1275) + (integer(kind=8)) i];
                          __label_000008:;
                          L.691:;
                          D.8905 = j == D.8901;
                          j = j + 1;
                          if (D.8905) goto L.692;
                        }
                      }
                  }
                L.692:;
              }
              __label_000009:;
              L.689:;
              D.8907 = i == D.8897;
              i = i + 1;
              if (D.8907) goto L.690;
            }
          }
      }
    L.690:;
  }
  {
    integer(kind=4) D.8908;

    D.8908 = *m;
    s = 1;
    if (s <= D.8908)
      {
        while (1)
          {
            {
              logical(kind=4) D.8948;

              {
                integer(kind=4) D.8911;

                D.8911 = *r;
                i = 1;
                if (i <= D.8911)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.8931;

                          {
                            integer(kind=4) D.8914;
                            integer(kind=4) D.8915;

                            D.8914 = i;
                            D.8915 = *r;
                            j = D.8914;
                            if (j <= D.8915)
                              {
                                while (1)
                                  {
                                    {
                                      logical(kind=4) D.8929;

                                      {
                                        integer(kind=4) D.8918;

                                        D.8918 = *q;
                                        ii = 1;
                                        if (ii <= D.8918)
                                          {
                                            while (1)
                                              {
                                                {
                                                  logical(kind=4) D.8927;

                                                  {
                                                    integer(kind=4) D.8921;

                                                    D.8921 = *q;
                                                    jj = 1;
                                                    if (jj <= D.8921)
                                                      {
                                                        while (1)
                                                          {
                                                            {
                                                              logical(kind=4) D.8925;

                                                              ia = (i + -1) * *q + ii;
                                                              ja = (j + -1) * *q + jj;
                                                              (*sig)[(((integer(kind=8)) s * stride.1244 + offset.1245) + (integer(kind=8)) ja * stride.1242) + (integer(kind=8)) ia] = (*wkrr2)[((integer(kind=8)) j * stride.1274 + offset.1275) + (integer(kind=8)) i] * (*ztz)[(((integer(kind=8)) s * stride.1281 + offset.1282) + (integer(kind=8)) jj * stride.1279) + (integer(kind=8)) ii];
                                                              __label_000010:;
                                                              L.701:;
                                                              D.8925 = jj == D.8921;
                                                              jj = jj + 1;
                                                              if (D.8925) goto L.702;
                                                            }
                                                          }
                                                      }
                                                    L.702:;
                                                  }
                                                  __label_000015:;
                                                  L.699:;
                                                  D.8927 = ii == D.8918;
                                                  ii = ii + 1;
                                                  if (D.8927) goto L.700;
                                                }
                                              }
                                          }
                                        L.700:;
                                      }
                                      __label_000020:;
                                      L.697:;
                                      D.8929 = j == D.8915;
                                      j = j + 1;
                                      if (D.8929) goto L.698;
                                    }
                                  }
                              }
                            L.698:;
                          }
                          __label_000030:;
                          L.695:;
                          D.8931 = i == D.8911;
                          i = i + 1;
                          if (D.8931) goto L.696;
                        }
                      }
                  }
                L.696:;
              }
              {
                integer(kind=4) D.8932;

                D.8932 = *r * *q;
                i = 1;
                if (i <= D.8932)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.8942;

                          {
                            integer(kind=4) D.8935;
                            integer(kind=4) D.8936;

                            D.8935 = i;
                            D.8936 = *r * *q;
                            j = D.8935;
                            if (j <= D.8936)
                              {
                                while (1)
                                  {
                                    {
                                      logical(kind=4) D.8940;

                                      (*sig)[(((integer(kind=8)) s * stride.1244 + offset.1245) + (integer(kind=8)) j * stride.1242) + (integer(kind=8)) i] = (*sig)[(((integer(kind=8)) s * stride.1244 + offset.1245) + (integer(kind=8)) j * stride.1242) + (integer(kind=8)) i] + (*wkrqrq2)[((integer(kind=8)) j * stride.1264 + offset.1265) + (integer(kind=8)) i];
                                      __label_000035:;
                                      L.705:;
                                      D.8940 = j == D.8936;
                                      j = j + 1;
                                      if (D.8940) goto L.706;
                                    }
                                  }
                              }
                            L.706:;
                          }
                          __label_000040:;
                          L.703:;
                          D.8942 = i == D.8932;
                          i = i + 1;
                          if (D.8942) goto L.704;
                        }
                      }
                  }
                L.704:;
              }
              {
                integer(kind=4) D.8943;
                integer(kind=4) D.8944;

                D.8943 = *r * *q;
                D.8944 = *r * *q;
                chl (&D.8943, &D.8944, (integer(kind=4) *) m, sig, &s);
              }
              {
                integer(kind=4) D.8945;
                integer(kind=4) D.8946;

                D.8945 = *r * *q;
                D.8946 = *r * *q;
                bkslvl (&D.8945, &D.8946, (integer(kind=4) *) m, sig, &s);
              }
              __label_000100:;
              L.693:;
              D.8948 = s == D.8908;
              s = s + 1;
              if (D.8948) goto L.694;
            }
          }
      }
    L.694:;
  }
  return;
}


mkpsi0bd (integer(kind=4) & restrict r, integer(kind=4) & restrict q, integer(kind=4) & restrict m, real(kind=8)[0:D.9077] * restrict psi, real(kind=8)[0:D.9074] * restrict sig, real(kind=8)[0:D.9071] * restrict wkrqrq1)
{
  integer(kind=4) i;
  integer(kind=4) ii;
  integer(kind=4) j;
  integer(kind=4) jj;
  integer(kind=4) l;
  integer(kind=8) ubound.1284;
  integer(kind=8) ubound.1285;
  integer(kind=8) stride.1286;
  integer(kind=8) ubound.1287;
  integer(kind=8) stride.1288;
  integer(kind=8) offset.1289;
  integer(kind=8) size.1290;
  integer(kind=4) s;
  integer(kind=8) ubound.1291;
  integer(kind=8) ubound.1292;
  integer(kind=8) stride.1293;
  integer(kind=8) ubound.1294;
  integer(kind=8) stride.1295;
  integer(kind=8) offset.1296;
  integer(kind=8) size.1297;
  integer(kind=8) ubound.1298;
  integer(kind=8) ubound.1299;
  integer(kind=8) stride.1300;
  integer(kind=8) offset.1301;
  integer(kind=8) size.1302;
  integer(kind=8) D.9071;
  bitsizetype D.9072;
  sizetype D.9073;
  integer(kind=8) D.9074;
  bitsizetype D.9075;
  sizetype D.9076;
  integer(kind=8) D.9077;
  bitsizetype D.9078;
  sizetype D.9079;

  ubound.1284 = (integer(kind=8)) *q;
  stride.1286 = NON_LVALUE_EXPR <ubound.1284>;
  stride.1286 = MAX_EXPR <stride.1286, 0>;
  ubound.1285 = (integer(kind=8)) *q;
  stride.1288 = stride.1286 * NON_LVALUE_EXPR <ubound.1285>;
  stride.1288 = MAX_EXPR <stride.1288, 0>;
  ubound.1287 = (integer(kind=8)) *r;
  size.1290 = stride.1288 * NON_LVALUE_EXPR <ubound.1287>;
  size.1290 = MAX_EXPR <size.1290, 0>;
  D.9077 = size.1290 + -1;
  D.9078 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1290> * 64;
  D.9079 = (sizetype) NON_LVALUE_EXPR <size.1290> * 8;
  offset.1289 = ~NON_LVALUE_EXPR <stride.1286> - NON_LVALUE_EXPR <stride.1288>;
  ubound.1291 = (integer(kind=8)) (*r * *q);
  stride.1293 = NON_LVALUE_EXPR <ubound.1291>;
  stride.1293 = MAX_EXPR <stride.1293, 0>;
  ubound.1292 = (integer(kind=8)) (*r * *q);
  stride.1295 = stride.1293 * NON_LVALUE_EXPR <ubound.1292>;
  stride.1295 = MAX_EXPR <stride.1295, 0>;
  ubound.1294 = (integer(kind=8)) *m;
  size.1297 = stride.1295 * NON_LVALUE_EXPR <ubound.1294>;
  size.1297 = MAX_EXPR <size.1297, 0>;
  D.9074 = size.1297 + -1;
  D.9075 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1297> * 64;
  D.9076 = (sizetype) NON_LVALUE_EXPR <size.1297> * 8;
  offset.1296 = ~NON_LVALUE_EXPR <stride.1293> - NON_LVALUE_EXPR <stride.1295>;
  ubound.1298 = (integer(kind=8)) (*r * *q);
  stride.1300 = NON_LVALUE_EXPR <ubound.1298>;
  stride.1300 = MAX_EXPR <stride.1300, 0>;
  ubound.1299 = (integer(kind=8)) (*r * *q);
  size.1302 = stride.1300 * NON_LVALUE_EXPR <ubound.1299>;
  size.1302 = MAX_EXPR <size.1302, 0>;
  D.9071 = size.1302 + -1;
  D.9072 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1302> * 64;
  D.9073 = (sizetype) NON_LVALUE_EXPR <size.1302> * 8;
  offset.1301 = ~NON_LVALUE_EXPR <stride.1300>;
  {
    integer(kind=4) D.9015;

    D.9015 = *r;
    l = 1;
    if (l <= D.9015)
      {
        while (1)
          {
            {
              logical(kind=4) D.9030;

              {
                integer(kind=4) D.9018;

                D.9018 = *q;
                i = 1;
                if (i <= D.9018)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.9028;

                          {
                            integer(kind=4) D.9021;
                            integer(kind=4) D.9022;

                            D.9021 = i;
                            D.9022 = *q;
                            j = D.9021;
                            if (j <= D.9022)
                              {
                                while (1)
                                  {
                                    {
                                      logical(kind=4) D.9026;

                                      (*psi)[(((integer(kind=8)) l * stride.1288 + offset.1289) + (integer(kind=8)) j * stride.1286) + (integer(kind=8)) i] = 0.0;
                                      __label_000004:;
                                      L.711:;
                                      D.9026 = j == D.9022;
                                      j = j + 1;
                                      if (D.9026) goto L.712;
                                    }
                                  }
                              }
                            L.712:;
                          }
                          __label_000005:;
                          L.709:;
                          D.9028 = i == D.9018;
                          i = i + 1;
                          if (D.9028) goto L.710;
                        }
                      }
                  }
                L.710:;
              }
              __label_000006:;
              L.707:;
              D.9030 = l == D.9015;
              l = l + 1;
              if (D.9030) goto L.708;
            }
          }
      }
    L.708:;
  }
  {
    integer(kind=4) D.9031;

    D.9031 = *m;
    s = 1;
    if (s <= D.9031)
      {
        while (1)
          {
            {
              logical(kind=4) D.9053;

              {
                integer(kind=4) D.9034;
                integer(kind=4) D.9035;

                D.9034 = *r * *q;
                D.9035 = *r * *q;
                mmul (&D.9034, &D.9035, (integer(kind=4) *) m, sig, &s, wkrqrq1);
              }
              {
                integer(kind=4) D.9036;

                D.9036 = *r;
                l = 1;
                if (l <= D.9036)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.9051;

                          {
                            integer(kind=4) D.9039;

                            D.9039 = *q;
                            i = 1;
                            if (i <= D.9039)
                              {
                                while (1)
                                  {
                                    {
                                      logical(kind=4) D.9049;

                                      {
                                        integer(kind=4) D.9042;
                                        integer(kind=4) D.9043;

                                        D.9042 = i;
                                        D.9043 = *q;
                                        j = D.9042;
                                        if (j <= D.9043)
                                          {
                                            while (1)
                                              {
                                                {
                                                  logical(kind=4) D.9047;

                                                  ii = (l + -1) * *q + i;
                                                  jj = (l + -1) * *q + j;
                                                  (*psi)[(((integer(kind=8)) l * stride.1288 + offset.1289) + (integer(kind=8)) j * stride.1286) + (integer(kind=8)) i] = (*psi)[(((integer(kind=8)) l * stride.1288 + offset.1289) + (integer(kind=8)) j * stride.1286) + (integer(kind=8)) i] + (*wkrqrq1)[((integer(kind=8)) jj * stride.1300 + offset.1301) + (integer(kind=8)) ii];
                                                  __label_000010:;
                                                  L.719:;
                                                  D.9047 = j == D.9043;
                                                  j = j + 1;
                                                  if (D.9047) goto L.720;
                                                }
                                              }
                                          }
                                        L.720:;
                                      }
                                      __label_000020:;
                                      L.717:;
                                      D.9049 = i == D.9039;
                                      i = i + 1;
                                      if (D.9049) goto L.718;
                                    }
                                  }
                              }
                            L.718:;
                          }
                          __label_000030:;
                          L.715:;
                          D.9051 = l == D.9036;
                          l = l + 1;
                          if (D.9051) goto L.716;
                        }
                      }
                  }
                L.716:;
              }
              __label_000100:;
              L.713:;
              D.9053 = s == D.9031;
              s = s + 1;
              if (D.9053) goto L.714;
            }
          }
      }
    L.714:;
  }
  {
    integer(kind=4) D.9054;

    D.9054 = *r;
    l = 1;
    if (l <= D.9054)
      {
        while (1)
          {
            {
              logical(kind=4) D.9070;

              {
                integer(kind=4) D.9057;

                D.9057 = *q;
                i = 1;
                if (i <= D.9057)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.9068;

                          {
                            integer(kind=4) D.9060;
                            integer(kind=4) D.9061;

                            D.9060 = i;
                            D.9061 = *q;
                            j = D.9060;
                            if (j <= D.9061)
                              {
                                while (1)
                                  {
                                    {
                                      logical(kind=4) D.9066;

                                      (*psi)[(((integer(kind=8)) l * stride.1288 + offset.1289) + (integer(kind=8)) j * stride.1286) + (integer(kind=8)) i] = (*psi)[(((integer(kind=8)) l * stride.1288 + offset.1289) + (integer(kind=8)) j * stride.1286) + (integer(kind=8)) i] / (real(kind=8)) *m;
                                      if (i != j)
                                        {
                                          (*psi)[(((integer(kind=8)) l * stride.1288 + offset.1289) + (integer(kind=8)) i * stride.1286) + (integer(kind=8)) j] = (*psi)[(((integer(kind=8)) l * stride.1288 + offset.1289) + (integer(kind=8)) j * stride.1286) + (integer(kind=8)) i];
                                        }
                                      L.727:;
                                      __label_000105:;
                                      L.725:;
                                      D.9066 = j == D.9061;
                                      j = j + 1;
                                      if (D.9066) goto L.726;
                                    }
                                  }
                              }
                            L.726:;
                          }
                          __label_000110:;
                          L.723:;
                          D.9068 = i == D.9057;
                          i = i + 1;
                          if (D.9068) goto L.724;
                        }
                      }
                  }
                L.724:;
              }
              __label_000120:;
              L.721:;
              D.9070 = l == D.9054;
              l = l + 1;
              if (D.9070) goto L.722;
            }
          }
      }
    L.722:;
  }
  return;
}


mgibbsbd (integer(kind=4) & restrict ntot, integer(kind=4)[0:D.9477] * restrict subj, integer(kind=4) & restrict m, integer(kind=4)[0:D.9474] * restrict ist, integer(kind=4)[0:D.9471] * restrict ifin, integer(kind=4) & restrict pcol, real(kind=8)[0:D.9468] * restrict pred, integer(kind=4) & restrict q, integer(kind=4)[0:D.9465] * restrict zcol, real(kind=8)[0:D.9462] * restrict ztz, integer(kind=4)[0:D.9459] * restrict patt, integer(kind=4) & restrict nstar, integer(kind=4) & restrict r, real(kind=8)[0:D.9447] * restrict y, integer(kind=4) & restrict p, integer(kind=4)[0:D.9456] * restrict xcol, integer(kind=4) & restrict npatt, integer(kind=4)[0:D.9444] * restrict rmat, integer(kind=4) & restrict sflag, real(kind=8)[0:D.9438] * restrict beta, real(kind=8)[0:D.9432] * restrict sigma, real(kind=8)[0:D.9429] * restrict psi, real(kind=8)[0:D.9402] * restrict b, real(kind=8)[0:D.9453] * restrict xtxinv, real(kind=8)[0:D.9450] * restrict wkpp, real(kind=8)[0:D.9441] * restrict wkpr, real(kind=8)[0:D.9435] * restrict eps, real(kind=8)[0:D.9405] * restrict wkrqrq1, real(kind=8)[0:D.9417] * restrict wkrqrq2, real(kind=8)[0:D.9426] * restrict sig, real(kind=8)[0:D.9423] * restrict wkrr1, real(kind=8)[0:D.9420] * restrict wkrr2, integer(kind=4) & restrict iter, real(kind=8)[0:D.9399] * restrict wkqr1, real(kind=8)[0:D.9396] * restrict wkqr2, real(kind=8)[0:D.9393] * restrict wkqrv, integer(kind=4) & restrict nhyp, real(kind=8)[0:D.9414] * restrict hyp, real(kind=8)[0:D.9390] * restrict delta, integer(kind=4)[0:D.9387] * restrict iposn, integer(kind=4)[0:D.9384] * restrict pstfin, real(kind=8)[0:D.9381] * restrict betas, real(kind=8)[0:D.9378] * restrict sigmas, real(kind=8)[0:D.9375] * restrict psis, real(kind=8)[0:D.9411] * restrict wkqq1, real(kind=8)[0:D.9408] * restrict wkqq2)
{
  integer(kind=8) ubound.1303;
  integer(kind=8) ubound.1304;
  integer(kind=8) stride.1305;
  integer(kind=8) ubound.1306;
  integer(kind=8) stride.1307;
  integer(kind=8) offset.1308;
  integer(kind=8) size.1309;
  integer(kind=8) ubound.1310;
  integer(kind=8) ubound.1311;
  integer(kind=8) stride.1312;
  integer(kind=8) offset.1313;
  integer(kind=8) size.1314;
  integer(kind=8) ubound.1315;
  integer(kind=8) ubound.1316;
  integer(kind=8) stride.1317;
  integer(kind=8) ubound.1318;
  integer(kind=8) stride.1319;
  integer(kind=8) offset.1320;
  integer(kind=8) size.1321;
  integer(kind=8) ubound.1322;
  integer(kind=8) ubound.1323;
  integer(kind=8) stride.1324;
  integer(kind=8) offset.1325;
  integer(kind=8) size.1326;
  integer(kind=8) ubound.1327;
  integer(kind=8) ubound.1328;
  integer(kind=8) stride.1329;
  integer(kind=8) offset.1330;
  integer(kind=8) size.1331;
  integer(kind=8) ubound.1332;
  integer(kind=8) size.1333;
  integer(kind=4) i;
  integer(kind=8) ubound.1334;
  integer(kind=8) size.1335;
  integer(kind=8) ubound.1336;
  integer(kind=8) size.1337;
  integer(kind=8) ubound.1338;
  integer(kind=8) size.1339;
  integer(kind=4) it;
  integer(kind=4) j;
  real(kind=4) junk;
  integer(kind=4) mc[100];
  integer(kind=4) oc[100];
  integer(kind=8) ubound.1340;
  integer(kind=8) size.1341;
  integer(kind=8) ubound.1342;
  integer(kind=8) ubound.1343;
  integer(kind=8) stride.1344;
  integer(kind=8) offset.1345;
  integer(kind=8) size.1346;
  integer(kind=8) ubound.1347;
  integer(kind=8) ubound.1348;
  integer(kind=8) stride.1349;
  integer(kind=8) ubound.1350;
  integer(kind=8) stride.1351;
  integer(kind=8) offset.1352;
  integer(kind=8) size.1353;
  integer(kind=8) ubound.1354;
  integer(kind=8) ubound.1355;
  integer(kind=8) stride.1356;
  integer(kind=8) ubound.1357;
  integer(kind=8) stride.1358;
  integer(kind=8) ubound.1359;
  integer(kind=8) stride.1360;
  integer(kind=8) offset.1361;
  integer(kind=8) size.1362;
  integer(kind=8) ubound.1363;
  integer(kind=8) stride.1364;
  integer(kind=8) offset.1365;
  integer(kind=8) size.1366;
  integer(kind=8) ubound.1367;
  integer(kind=8) ubound.1368;
  integer(kind=8) stride.1369;
  integer(kind=8) offset.1370;
  integer(kind=8) size.1371;
  integer(kind=8) ubound.1372;
  integer(kind=8) ubound.1373;
  integer(kind=8) stride.1374;
  integer(kind=8) ubound.1375;
  integer(kind=8) stride.1376;
  integer(kind=8) offset.1377;
  integer(kind=8) size.1378;
  integer(kind=8) ubound.1379;
  integer(kind=8) ubound.1380;
  integer(kind=8) stride.1381;
  integer(kind=8) offset.1382;
  integer(kind=8) size.1383;
  integer(kind=8) ubound.1384;
  integer(kind=8) ubound.1385;
  integer(kind=8) stride.1386;
  integer(kind=8) ubound.1387;
  integer(kind=8) stride.1388;
  integer(kind=8) offset.1389;
  integer(kind=8) size.1390;
  integer(kind=8) ubound.1391;
  integer(kind=8) size.1392;
  integer(kind=8) ubound.1393;
  integer(kind=8) ubound.1394;
  integer(kind=8) stride.1395;
  integer(kind=8) offset.1396;
  integer(kind=8) size.1397;
  integer(kind=8) ubound.1398;
  integer(kind=8) ubound.1399;
  integer(kind=8) stride.1400;
  integer(kind=8) offset.1401;
  integer(kind=8) size.1402;
  integer(kind=8) ubound.1403;
  integer(kind=8) ubound.1404;
  integer(kind=8) stride.1405;
  integer(kind=8) offset.1406;
  integer(kind=8) size.1407;
  integer(kind=8) ubound.1408;
  integer(kind=8) ubound.1409;
  integer(kind=8) stride.1410;
  integer(kind=8) offset.1411;
  integer(kind=8) size.1412;
  integer(kind=8) ubound.1413;
  integer(kind=8) ubound.1414;
  integer(kind=8) stride.1415;
  integer(kind=8) offset.1416;
  integer(kind=8) size.1417;
  integer(kind=8) ubound.1418;
  integer(kind=8) ubound.1419;
  integer(kind=8) stride.1420;
  integer(kind=8) offset.1421;
  integer(kind=8) size.1422;
  integer(kind=8) ubound.1423;
  integer(kind=8) size.1424;
  real(kind=8) wkr[100];
  integer(kind=8) ubound.1425;
  integer(kind=8) ubound.1426;
  integer(kind=8) stride.1427;
  integer(kind=8) offset.1428;
  integer(kind=8) size.1429;
  integer(kind=8) ubound.1430;
  integer(kind=8) ubound.1431;
  integer(kind=8) stride.1432;
  integer(kind=8) offset.1433;
  integer(kind=8) size.1434;
  integer(kind=8) ubound.1435;
  integer(kind=8) ubound.1436;
  integer(kind=8) stride.1437;
  integer(kind=8) offset.1438;
  integer(kind=8) size.1439;
  integer(kind=8) ubound.1440;
  integer(kind=8) ubound.1441;
  integer(kind=8) stride.1442;
  integer(kind=8) offset.1443;
  integer(kind=8) size.1444;
  integer(kind=8) ubound.1445;
  integer(kind=8) size.1446;
  integer(kind=8) ubound.1447;
  integer(kind=8) ubound.1448;
  integer(kind=8) stride.1449;
  integer(kind=8) offset.1450;
  integer(kind=8) size.1451;
  integer(kind=8) ubound.1452;
  integer(kind=8) ubound.1453;
  integer(kind=8) stride.1454;
  integer(kind=8) offset.1455;
  integer(kind=8) size.1456;
  integer(kind=8) ubound.1457;
  integer(kind=8) size.1458;
  integer(kind=8) ubound.1459;
  integer(kind=8) ubound.1460;
  integer(kind=8) stride.1461;
  integer(kind=8) ubound.1462;
  integer(kind=8) stride.1463;
  integer(kind=8) offset.1464;
  integer(kind=8) size.1465;
  integer(kind=8) D.9375;
  bitsizetype D.9376;
  sizetype D.9377;
  integer(kind=8) D.9378;
  bitsizetype D.9379;
  sizetype D.9380;
  integer(kind=8) D.9381;
  bitsizetype D.9382;
  sizetype D.9383;
  integer(kind=8) D.9384;
  bitsizetype D.9385;
  sizetype D.9386;
  integer(kind=8) D.9387;
  bitsizetype D.9388;
  sizetype D.9389;
  integer(kind=8) D.9390;
  bitsizetype D.9391;
  sizetype D.9392;
  integer(kind=8) D.9393;
  bitsizetype D.9394;
  sizetype D.9395;
  integer(kind=8) D.9396;
  bitsizetype D.9397;
  sizetype D.9398;
  integer(kind=8) D.9399;
  bitsizetype D.9400;
  sizetype D.9401;
  integer(kind=8) D.9402;
  bitsizetype D.9403;
  sizetype D.9404;
  integer(kind=8) D.9405;
  bitsizetype D.9406;
  sizetype D.9407;
  integer(kind=8) D.9408;
  bitsizetype D.9409;
  sizetype D.9410;
  integer(kind=8) D.9411;
  bitsizetype D.9412;
  sizetype D.9413;
  integer(kind=8) D.9414;
  bitsizetype D.9415;
  sizetype D.9416;
  integer(kind=8) D.9417;
  bitsizetype D.9418;
  sizetype D.9419;
  integer(kind=8) D.9420;
  bitsizetype D.9421;
  sizetype D.9422;
  integer(kind=8) D.9423;
  bitsizetype D.9424;
  sizetype D.9425;
  integer(kind=8) D.9426;
  bitsizetype D.9427;
  sizetype D.9428;
  integer(kind=8) D.9429;
  bitsizetype D.9430;
  sizetype D.9431;
  integer(kind=8) D.9432;
  bitsizetype D.9433;
  sizetype D.9434;
  integer(kind=8) D.9435;
  bitsizetype D.9436;
  sizetype D.9437;
  integer(kind=8) D.9438;
  bitsizetype D.9439;
  sizetype D.9440;
  integer(kind=8) D.9441;
  bitsizetype D.9442;
  sizetype D.9443;
  integer(kind=8) D.9444;
  bitsizetype D.9445;
  sizetype D.9446;
  integer(kind=8) D.9447;
  bitsizetype D.9448;
  sizetype D.9449;
  integer(kind=8) D.9450;
  bitsizetype D.9451;
  sizetype D.9452;
  integer(kind=8) D.9453;
  bitsizetype D.9454;
  sizetype D.9455;
  integer(kind=8) D.9456;
  bitsizetype D.9457;
  sizetype D.9458;
  integer(kind=8) D.9459;
  bitsizetype D.9460;
  sizetype D.9461;
  integer(kind=8) D.9462;
  bitsizetype D.9463;
  sizetype D.9464;
  integer(kind=8) D.9465;
  bitsizetype D.9466;
  sizetype D.9467;
  integer(kind=8) D.9468;
  bitsizetype D.9469;
  sizetype D.9470;
  integer(kind=8) D.9471;
  bitsizetype D.9472;
  sizetype D.9473;
  integer(kind=8) D.9474;
  bitsizetype D.9475;
  sizetype D.9476;
  integer(kind=8) D.9477;
  bitsizetype D.9478;
  sizetype D.9479;

  ubound.1391 = (integer(kind=8)) *ntot;
  size.1392 = NON_LVALUE_EXPR <ubound.1391>;
  size.1392 = MAX_EXPR <size.1392, 0>;
  D.9477 = size.1392 + -1;
  D.9478 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1392> * 32;
  D.9479 = (sizetype) NON_LVALUE_EXPR <size.1392> * 4;
  ubound.1338 = (integer(kind=8)) *m;
  size.1339 = NON_LVALUE_EXPR <ubound.1338>;
  size.1339 = MAX_EXPR <size.1339, 0>;
  D.9474 = size.1339 + -1;
  D.9475 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1339> * 32;
  D.9476 = (sizetype) NON_LVALUE_EXPR <size.1339> * 4;
  ubound.1334 = (integer(kind=8)) *m;
  size.1335 = NON_LVALUE_EXPR <ubound.1334>;
  size.1335 = MAX_EXPR <size.1335, 0>;
  D.9471 = size.1335 + -1;
  D.9472 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1335> * 32;
  D.9473 = (sizetype) NON_LVALUE_EXPR <size.1335> * 4;
  ubound.1342 = (integer(kind=8)) *ntot;
  stride.1344 = NON_LVALUE_EXPR <ubound.1342>;
  stride.1344 = MAX_EXPR <stride.1344, 0>;
  ubound.1343 = (integer(kind=8)) *pcol;
  size.1346 = stride.1344 * NON_LVALUE_EXPR <ubound.1343>;
  size.1346 = MAX_EXPR <size.1346, 0>;
  D.9468 = size.1346 + -1;
  D.9469 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1346> * 64;
  D.9470 = (sizetype) NON_LVALUE_EXPR <size.1346> * 8;
  offset.1345 = ~NON_LVALUE_EXPR <stride.1344>;
  ubound.1457 = (integer(kind=8)) *q;
  size.1458 = NON_LVALUE_EXPR <ubound.1457>;
  size.1458 = MAX_EXPR <size.1458, 0>;
  D.9465 = size.1458 + -1;
  D.9466 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1458> * 32;
  D.9467 = (sizetype) NON_LVALUE_EXPR <size.1458> * 4;
  ubound.1459 = (integer(kind=8)) *q;
  stride.1461 = NON_LVALUE_EXPR <ubound.1459>;
  stride.1461 = MAX_EXPR <stride.1461, 0>;
  ubound.1460 = (integer(kind=8)) *q;
  stride.1463 = stride.1461 * NON_LVALUE_EXPR <ubound.1460>;
  stride.1463 = MAX_EXPR <stride.1463, 0>;
  ubound.1462 = (integer(kind=8)) *m;
  size.1465 = stride.1463 * NON_LVALUE_EXPR <ubound.1462>;
  size.1465 = MAX_EXPR <size.1465, 0>;
  D.9462 = size.1465 + -1;
  D.9463 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1465> * 64;
  D.9464 = (sizetype) NON_LVALUE_EXPR <size.1465> * 8;
  offset.1464 = ~NON_LVALUE_EXPR <stride.1461> - NON_LVALUE_EXPR <stride.1463>;
  ubound.1340 = (integer(kind=8)) *ntot;
  size.1341 = NON_LVALUE_EXPR <ubound.1340>;
  size.1341 = MAX_EXPR <size.1341, 0>;
  D.9459 = size.1341 + -1;
  D.9460 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1341> * 32;
  D.9461 = (sizetype) NON_LVALUE_EXPR <size.1341> * 4;
  ubound.1445 = (integer(kind=8)) *p;
  size.1446 = NON_LVALUE_EXPR <ubound.1445>;
  size.1446 = MAX_EXPR <size.1446, 0>;
  D.9456 = size.1446 + -1;
  D.9457 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1446> * 32;
  D.9458 = (sizetype) NON_LVALUE_EXPR <size.1446> * 4;
  ubound.1447 = (integer(kind=8)) *p;
  stride.1449 = NON_LVALUE_EXPR <ubound.1447>;
  stride.1449 = MAX_EXPR <stride.1449, 0>;
  ubound.1448 = (integer(kind=8)) *p;
  size.1451 = stride.1449 * NON_LVALUE_EXPR <ubound.1448>;
  size.1451 = MAX_EXPR <size.1451, 0>;
  D.9453 = size.1451 + -1;
  D.9454 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1451> * 64;
  D.9455 = (sizetype) NON_LVALUE_EXPR <size.1451> * 8;
  offset.1450 = ~NON_LVALUE_EXPR <stride.1449>;
  ubound.1393 = (integer(kind=8)) *p;
  stride.1395 = NON_LVALUE_EXPR <ubound.1393>;
  stride.1395 = MAX_EXPR <stride.1395, 0>;
  ubound.1394 = (integer(kind=8)) *p;
  size.1397 = stride.1395 * NON_LVALUE_EXPR <ubound.1394>;
  size.1397 = MAX_EXPR <size.1397, 0>;
  D.9450 = size.1397 + -1;
  D.9451 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1397> * 64;
  D.9452 = (sizetype) NON_LVALUE_EXPR <size.1397> * 8;
  offset.1396 = ~NON_LVALUE_EXPR <stride.1395>;
  ubound.1452 = (integer(kind=8)) *ntot;
  stride.1454 = NON_LVALUE_EXPR <ubound.1452>;
  stride.1454 = MAX_EXPR <stride.1454, 0>;
  ubound.1453 = (integer(kind=8)) *r;
  size.1456 = stride.1454 * NON_LVALUE_EXPR <ubound.1453>;
  size.1456 = MAX_EXPR <size.1456, 0>;
  D.9447 = size.1456 + -1;
  D.9448 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1456> * 64;
  D.9449 = (sizetype) NON_LVALUE_EXPR <size.1456> * 8;
  offset.1455 = ~NON_LVALUE_EXPR <stride.1454>;
  ubound.1367 = (integer(kind=8)) *npatt;
  stride.1369 = NON_LVALUE_EXPR <ubound.1367>;
  stride.1369 = MAX_EXPR <stride.1369, 0>;
  ubound.1368 = (integer(kind=8)) *r;
  size.1371 = stride.1369 * NON_LVALUE_EXPR <ubound.1368>;
  size.1371 = MAX_EXPR <size.1371, 0>;
  D.9444 = size.1371 + -1;
  D.9445 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1371> * 32;
  D.9446 = (sizetype) NON_LVALUE_EXPR <size.1371> * 4;
  offset.1370 = ~NON_LVALUE_EXPR <stride.1369>;
  ubound.1398 = (integer(kind=8)) *p;
  stride.1400 = NON_LVALUE_EXPR <ubound.1398>;
  stride.1400 = MAX_EXPR <stride.1400, 0>;
  ubound.1399 = (integer(kind=8)) *r;
  size.1402 = stride.1400 * NON_LVALUE_EXPR <ubound.1399>;
  size.1402 = MAX_EXPR <size.1402, 0>;
  D.9441 = size.1402 + -1;
  D.9442 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1402> * 64;
  D.9443 = (sizetype) NON_LVALUE_EXPR <size.1402> * 8;
  offset.1401 = ~NON_LVALUE_EXPR <stride.1400>;
  ubound.1310 = (integer(kind=8)) *p;
  stride.1312 = NON_LVALUE_EXPR <ubound.1310>;
  stride.1312 = MAX_EXPR <stride.1312, 0>;
  ubound.1311 = (integer(kind=8)) *r;
  size.1314 = stride.1312 * NON_LVALUE_EXPR <ubound.1311>;
  size.1314 = MAX_EXPR <size.1314, 0>;
  D.9438 = size.1314 + -1;
  D.9439 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1314> * 64;
  D.9440 = (sizetype) NON_LVALUE_EXPR <size.1314> * 8;
  offset.1313 = ~NON_LVALUE_EXPR <stride.1312>;
  ubound.1327 = (integer(kind=8)) *ntot;
  stride.1329 = NON_LVALUE_EXPR <ubound.1327>;
  stride.1329 = MAX_EXPR <stride.1329, 0>;
  ubound.1328 = (integer(kind=8)) *r;
  size.1331 = stride.1329 * NON_LVALUE_EXPR <ubound.1328>;
  size.1331 = MAX_EXPR <size.1331, 0>;
  D.9435 = size.1331 + -1;
  D.9436 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1331> * 64;
  D.9437 = (sizetype) NON_LVALUE_EXPR <size.1331> * 8;
  offset.1330 = ~NON_LVALUE_EXPR <stride.1329>;
  ubound.1379 = (integer(kind=8)) *r;
  stride.1381 = NON_LVALUE_EXPR <ubound.1379>;
  stride.1381 = MAX_EXPR <stride.1381, 0>;
  ubound.1380 = (integer(kind=8)) *r;
  size.1383 = stride.1381 * NON_LVALUE_EXPR <ubound.1380>;
  size.1383 = MAX_EXPR <size.1383, 0>;
  D.9432 = size.1383 + -1;
  D.9433 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1383> * 64;
  D.9434 = (sizetype) NON_LVALUE_EXPR <size.1383> * 8;
  offset.1382 = ~NON_LVALUE_EXPR <stride.1381>;
  ubound.1347 = (integer(kind=8)) *q;
  stride.1349 = NON_LVALUE_EXPR <ubound.1347>;
  stride.1349 = MAX_EXPR <stride.1349, 0>;
  ubound.1348 = (integer(kind=8)) *q;
  stride.1351 = stride.1349 * NON_LVALUE_EXPR <ubound.1348>;
  stride.1351 = MAX_EXPR <stride.1351, 0>;
  ubound.1350 = (integer(kind=8)) *r;
  size.1353 = stride.1351 * NON_LVALUE_EXPR <ubound.1350>;
  size.1353 = MAX_EXPR <size.1353, 0>;
  D.9429 = size.1353 + -1;
  D.9430 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1353> * 64;
  D.9431 = (sizetype) NON_LVALUE_EXPR <size.1353> * 8;
  offset.1352 = ~NON_LVALUE_EXPR <stride.1349> - NON_LVALUE_EXPR <stride.1351>;
  ubound.1372 = (integer(kind=8)) (*r * *q);
  stride.1374 = NON_LVALUE_EXPR <ubound.1372>;
  stride.1374 = MAX_EXPR <stride.1374, 0>;
  ubound.1373 = (integer(kind=8)) (*r * *q);
  stride.1376 = stride.1374 * NON_LVALUE_EXPR <ubound.1373>;
  stride.1376 = MAX_EXPR <stride.1376, 0>;
  ubound.1375 = (integer(kind=8)) *m;
  size.1378 = stride.1376 * NON_LVALUE_EXPR <ubound.1375>;
  size.1378 = MAX_EXPR <size.1378, 0>;
  D.9426 = size.1378 + -1;
  D.9427 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1378> * 64;
  D.9428 = (sizetype) NON_LVALUE_EXPR <size.1378> * 8;
  offset.1377 = ~NON_LVALUE_EXPR <stride.1374> - NON_LVALUE_EXPR <stride.1376>;
  ubound.1435 = (integer(kind=8)) *r;
  stride.1437 = NON_LVALUE_EXPR <ubound.1435>;
  stride.1437 = MAX_EXPR <stride.1437, 0>;
  ubound.1436 = (integer(kind=8)) *r;
  size.1439 = stride.1437 * NON_LVALUE_EXPR <ubound.1436>;
  size.1439 = MAX_EXPR <size.1439, 0>;
  D.9423 = size.1439 + -1;
  D.9424 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1439> * 64;
  D.9425 = (sizetype) NON_LVALUE_EXPR <size.1439> * 8;
  offset.1438 = ~NON_LVALUE_EXPR <stride.1437>;
  ubound.1440 = (integer(kind=8)) *r;
  stride.1442 = NON_LVALUE_EXPR <ubound.1440>;
  stride.1442 = MAX_EXPR <stride.1442, 0>;
  ubound.1441 = (integer(kind=8)) *r;
  size.1444 = stride.1442 * NON_LVALUE_EXPR <ubound.1441>;
  size.1444 = MAX_EXPR <size.1444, 0>;
  D.9420 = size.1444 + -1;
  D.9421 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1444> * 64;
  D.9422 = (sizetype) NON_LVALUE_EXPR <size.1444> * 8;
  offset.1443 = ~NON_LVALUE_EXPR <stride.1442>;
  ubound.1430 = (integer(kind=8)) (*r * *q);
  stride.1432 = NON_LVALUE_EXPR <ubound.1430>;
  stride.1432 = MAX_EXPR <stride.1432, 0>;
  ubound.1431 = (integer(kind=8)) (*r * *q);
  size.1434 = stride.1432 * NON_LVALUE_EXPR <ubound.1431>;
  size.1434 = MAX_EXPR <size.1434, 0>;
  D.9417 = size.1434 + -1;
  D.9418 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1434> * 64;
  D.9419 = (sizetype) NON_LVALUE_EXPR <size.1434> * 8;
  offset.1433 = ~NON_LVALUE_EXPR <stride.1432>;
  ubound.1332 = (integer(kind=8)) *nhyp;
  size.1333 = NON_LVALUE_EXPR <ubound.1332>;
  size.1333 = MAX_EXPR <size.1333, 0>;
  D.9414 = size.1333 + -1;
  D.9415 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1333> * 64;
  D.9416 = (sizetype) NON_LVALUE_EXPR <size.1333> * 8;
  ubound.1403 = (integer(kind=8)) *q;
  stride.1405 = NON_LVALUE_EXPR <ubound.1403>;
  stride.1405 = MAX_EXPR <stride.1405, 0>;
  ubound.1404 = (integer(kind=8)) *q;
  size.1407 = stride.1405 * NON_LVALUE_EXPR <ubound.1404>;
  size.1407 = MAX_EXPR <size.1407, 0>;
  D.9411 = size.1407 + -1;
  D.9412 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1407> * 64;
  D.9413 = (sizetype) NON_LVALUE_EXPR <size.1407> * 8;
  offset.1406 = ~NON_LVALUE_EXPR <stride.1405>;
  ubound.1408 = (integer(kind=8)) *q;
  stride.1410 = NON_LVALUE_EXPR <ubound.1408>;
  stride.1410 = MAX_EXPR <stride.1410, 0>;
  ubound.1409 = (integer(kind=8)) *q;
  size.1412 = stride.1410 * NON_LVALUE_EXPR <ubound.1409>;
  size.1412 = MAX_EXPR <size.1412, 0>;
  D.9408 = size.1412 + -1;
  D.9409 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1412> * 64;
  D.9410 = (sizetype) NON_LVALUE_EXPR <size.1412> * 8;
  offset.1411 = ~NON_LVALUE_EXPR <stride.1410>;
  ubound.1425 = (integer(kind=8)) (*r * *q);
  stride.1427 = NON_LVALUE_EXPR <ubound.1425>;
  stride.1427 = MAX_EXPR <stride.1427, 0>;
  ubound.1426 = (integer(kind=8)) (*r * *q);
  size.1429 = stride.1427 * NON_LVALUE_EXPR <ubound.1426>;
  size.1429 = MAX_EXPR <size.1429, 0>;
  D.9405 = size.1429 + -1;
  D.9406 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1429> * 64;
  D.9407 = (sizetype) NON_LVALUE_EXPR <size.1429> * 8;
  offset.1428 = ~NON_LVALUE_EXPR <stride.1427>;
  ubound.1303 = (integer(kind=8)) *q;
  stride.1305 = NON_LVALUE_EXPR <ubound.1303>;
  stride.1305 = MAX_EXPR <stride.1305, 0>;
  ubound.1304 = (integer(kind=8)) *r;
  stride.1307 = stride.1305 * NON_LVALUE_EXPR <ubound.1304>;
  stride.1307 = MAX_EXPR <stride.1307, 0>;
  ubound.1306 = (integer(kind=8)) *m;
  size.1309 = stride.1307 * NON_LVALUE_EXPR <ubound.1306>;
  size.1309 = MAX_EXPR <size.1309, 0>;
  D.9402 = size.1309 + -1;
  D.9403 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1309> * 64;
  D.9404 = (sizetype) NON_LVALUE_EXPR <size.1309> * 8;
  offset.1308 = ~NON_LVALUE_EXPR <stride.1305> - NON_LVALUE_EXPR <stride.1307>;
  ubound.1413 = (integer(kind=8)) *q;
  stride.1415 = NON_LVALUE_EXPR <ubound.1413>;
  stride.1415 = MAX_EXPR <stride.1415, 0>;
  ubound.1414 = (integer(kind=8)) *r;
  size.1417 = stride.1415 * NON_LVALUE_EXPR <ubound.1414>;
  size.1417 = MAX_EXPR <size.1417, 0>;
  D.9399 = size.1417 + -1;
  D.9400 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1417> * 64;
  D.9401 = (sizetype) NON_LVALUE_EXPR <size.1417> * 8;
  offset.1416 = ~NON_LVALUE_EXPR <stride.1415>;
  ubound.1418 = (integer(kind=8)) *q;
  stride.1420 = NON_LVALUE_EXPR <ubound.1418>;
  stride.1420 = MAX_EXPR <stride.1420, 0>;
  ubound.1419 = (integer(kind=8)) *r;
  size.1422 = stride.1420 * NON_LVALUE_EXPR <ubound.1419>;
  size.1422 = MAX_EXPR <size.1422, 0>;
  D.9396 = size.1422 + -1;
  D.9397 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1422> * 64;
  D.9398 = (sizetype) NON_LVALUE_EXPR <size.1422> * 8;
  offset.1421 = ~NON_LVALUE_EXPR <stride.1420>;
  ubound.1423 = (integer(kind=8)) (*q * *r);
  size.1424 = NON_LVALUE_EXPR <ubound.1423>;
  size.1424 = MAX_EXPR <size.1424, 0>;
  D.9393 = size.1424 + -1;
  D.9394 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1424> * 64;
  D.9395 = (sizetype) NON_LVALUE_EXPR <size.1424> * 8;
  ubound.1322 = (integer(kind=8)) *ntot;
  stride.1324 = NON_LVALUE_EXPR <ubound.1322>;
  stride.1324 = MAX_EXPR <stride.1324, 0>;
  ubound.1323 = (integer(kind=8)) *r;
  size.1326 = stride.1324 * NON_LVALUE_EXPR <ubound.1323>;
  size.1326 = MAX_EXPR <size.1326, 0>;
  D.9390 = size.1326 + -1;
  D.9391 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1326> * 64;
  D.9392 = (sizetype) NON_LVALUE_EXPR <size.1326> * 8;
  offset.1325 = ~NON_LVALUE_EXPR <stride.1324>;
  ubound.1336 = (integer(kind=8)) *ntot;
  size.1337 = NON_LVALUE_EXPR <ubound.1336>;
  size.1337 = MAX_EXPR <size.1337, 0>;
  D.9387 = size.1337 + -1;
  D.9388 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1337> * 32;
  D.9389 = (sizetype) NON_LVALUE_EXPR <size.1337> * 4;
  ubound.1363 = (integer(kind=8)) *npatt;
  stride.1364 = NON_LVALUE_EXPR <ubound.1363>;
  stride.1364 = MAX_EXPR <stride.1364, 0>;
  size.1366 = stride.1364 * 2;
  size.1366 = MAX_EXPR <size.1366, 0>;
  D.9384 = size.1366 + -1;
  D.9385 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1366> * 32;
  D.9386 = (sizetype) NON_LVALUE_EXPR <size.1366> * 4;
  offset.1365 = ~NON_LVALUE_EXPR <stride.1364>;
  ubound.1315 = (integer(kind=8)) *p;
  stride.1317 = NON_LVALUE_EXPR <ubound.1315>;
  stride.1317 = MAX_EXPR <stride.1317, 0>;
  ubound.1316 = (integer(kind=8)) *r;
  stride.1319 = stride.1317 * NON_LVALUE_EXPR <ubound.1316>;
  stride.1319 = MAX_EXPR <stride.1319, 0>;
  ubound.1318 = (integer(kind=8)) *iter;
  size.1321 = stride.1319 * NON_LVALUE_EXPR <ubound.1318>;
  size.1321 = MAX_EXPR <size.1321, 0>;
  D.9381 = size.1321 + -1;
  D.9382 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1321> * 64;
  D.9383 = (sizetype) NON_LVALUE_EXPR <size.1321> * 8;
  offset.1320 = ~NON_LVALUE_EXPR <stride.1317> - NON_LVALUE_EXPR <stride.1319>;
  ubound.1384 = (integer(kind=8)) *r;
  stride.1386 = NON_LVALUE_EXPR <ubound.1384>;
  stride.1386 = MAX_EXPR <stride.1386, 0>;
  ubound.1385 = (integer(kind=8)) *r;
  stride.1388 = stride.1386 * NON_LVALUE_EXPR <ubound.1385>;
  stride.1388 = MAX_EXPR <stride.1388, 0>;
  ubound.1387 = (integer(kind=8)) *iter;
  size.1390 = stride.1388 * NON_LVALUE_EXPR <ubound.1387>;
  size.1390 = MAX_EXPR <size.1390, 0>;
  D.9378 = size.1390 + -1;
  D.9379 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1390> * 64;
  D.9380 = (sizetype) NON_LVALUE_EXPR <size.1390> * 8;
  offset.1389 = ~NON_LVALUE_EXPR <stride.1386> - NON_LVALUE_EXPR <stride.1388>;
  ubound.1354 = (integer(kind=8)) *q;
  stride.1356 = NON_LVALUE_EXPR <ubound.1354>;
  stride.1356 = MAX_EXPR <stride.1356, 0>;
  ubound.1355 = (integer(kind=8)) *q;
  stride.1358 = stride.1356 * NON_LVALUE_EXPR <ubound.1355>;
  stride.1358 = MAX_EXPR <stride.1358, 0>;
  ubound.1357 = (integer(kind=8)) *r;
  stride.1360 = stride.1358 * NON_LVALUE_EXPR <ubound.1357>;
  stride.1360 = MAX_EXPR <stride.1360, 0>;
  ubound.1359 = (integer(kind=8)) *iter;
  size.1362 = stride.1360 * NON_LVALUE_EXPR <ubound.1359>;
  size.1362 = MAX_EXPR <size.1362, 0>;
  D.9375 = size.1362 + -1;
  D.9376 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1362> * 64;
  D.9377 = (sizetype) NON_LVALUE_EXPR <size.1362> * 8;
  offset.1361 = (~NON_LVALUE_EXPR <stride.1356> - NON_LVALUE_EXPR <stride.1358>) - NON_LVALUE_EXPR <stride.1360>;
  junk = gauss ();
  prelimm ((integer(kind=4) *) ntot, subj, (integer(kind=4) *) m, ist, ifin, (integer(kind=4) *) pcol, pred, (integer(kind=4) *) q, zcol, ztz, patt, (integer(kind=4) *) nstar, (integer(kind=4) *) p, xcol, xtxinv, wkpp);
  if (*sflag != 1)
    {
      mimpy ((integer(kind=4) *) ntot, (integer(kind=4) *) r, y, patt, (integer(kind=4) *) npatt, rmat);
      mkxty ((integer(kind=4) *) ntot, (integer(kind=4) *) r, y, (integer(kind=4) *) pcol, pred, (integer(kind=4) *) p, xcol, patt, wkpr);
      mkbeta ((integer(kind=4) *) p, (integer(kind=4) *) r, xtxinv, wkpr, beta);
      mkeps1 ((integer(kind=4) *) ntot, (integer(kind=4) *) r, y, (integer(kind=4) *) pcol, pred, (integer(kind=4) *) p, xcol, beta, eps, patt);
      mksigma ((integer(kind=4) *) ntot, (integer(kind=4) *) r, eps, (integer(kind=4) *) nstar, sigma, patt);
      {
        static integer(kind=4) C.9355 = 1;

        mksigbd ((integer(kind=4) *) r, (integer(kind=4) *) q, (integer(kind=4) *) m, psi, sigma, ztz, sig, wkrr1, wkrr2, wkrqrq2, &C.9355, (integer(kind=4) *) nhyp, hyp, wkqq1, wkqq2);
      }
      mkpsi0bd ((integer(kind=4) *) r, (integer(kind=4) *) q, (integer(kind=4) *) m, psi, sig, wkrqrq1);
    }
  else
    {
      {
        integer(kind=4) D.9356;

        D.9356 = *ntot;
        i = 1;
        if (i <= D.9356)
          {
            while (1)
              {
                {
                  logical(kind=4) D.9365;

                  {
                    integer(kind=4) D.9359;

                    D.9359 = *r;
                    j = 1;
                    if (j <= D.9359)
                      {
                        while (1)
                          {
                            {
                              logical(kind=4) D.9363;

                              (*y)[((integer(kind=8)) j * stride.1454 + offset.1455) + (integer(kind=8)) i] = (*eps)[((integer(kind=8)) j * stride.1329 + offset.1330) + (integer(kind=8)) i];
                              __label_000040:;
                              L.731:;
                              D.9363 = j == D.9359;
                              j = j + 1;
                              if (D.9363) goto L.732;
                            }
                          }
                      }
                    L.732:;
                  }
                  __label_000050:;
                  L.729:;
                  D.9365 = i == D.9356;
                  i = i + 1;
                  if (D.9365) goto L.730;
                }
              }
          }
        L.730:;
      }
    }
  L.728:;
  {
    integer(kind=4) D.9366;

    D.9366 = *iter;
    it = 1;
    if (it <= D.9366)
      {
        while (1)
          {
            {
              logical(kind=4) D.9374;

              mkeps1 ((integer(kind=4) *) ntot, (integer(kind=4) *) r, y, (integer(kind=4) *) pcol, pred, (integer(kind=4) *) p, xcol, beta, eps, patt);
              {
                static integer(kind=4) C.9369 = 0;

                mksigbd ((integer(kind=4) *) r, (integer(kind=4) *) q, (integer(kind=4) *) m, psi, sigma, ztz, sig, wkrr1, wkrr2, wkrqrq2, &C.9369, (integer(kind=4) *) nhyp, hyp, wkqq1, wkqq2);
              }
              drb ((integer(kind=4) *) r, (integer(kind=4) *) q, (integer(kind=4) *) m, b, wkrr2, eps, (integer(kind=4) *) pcol, pred, zcol, wkqr1, wkqr2, ist, ifin, patt, (integer(kind=4) *) ntot, sig, wkrqrq2, wkqrv);
              drpsibd ((integer(kind=4) *) r, (integer(kind=4) *) q, (integer(kind=4) *) m, psi, wkqq1, wkqq2, wkqrv, (integer(kind=4) *) nhyp, hyp, b);
              mkeps2 ((integer(kind=4) *) ntot, (integer(kind=4) *) m, (integer(kind=4) *) r, y, (integer(kind=4) *) pcol, pred, (integer(kind=4) *) q, zcol, b, eps, patt, ist, ifin);
              mkxty ((integer(kind=4) *) ntot, (integer(kind=4) *) r, eps, (integer(kind=4) *) pcol, pred, (integer(kind=4) *) p, xcol, patt, wkpr);
              mkbeta ((integer(kind=4) *) p, (integer(kind=4) *) r, xtxinv, wkpr, beta);
              mkeps1 ((integer(kind=4) *) ntot, (integer(kind=4) *) r, eps, (integer(kind=4) *) pcol, pred, (integer(kind=4) *) p, xcol, beta, delta, patt);
              drsigma ((integer(kind=4) *) ntot, (integer(kind=4) *) r, delta, (integer(kind=4) *) nstar, sigma, patt, (integer(kind=4) *) nhyp, hyp, wkrr1, wkrr2, (integer(kind=4) *) p);
              drbeta ((integer(kind=4) *) r, sigma, xtxinv, (integer(kind=4) *) p, beta, wkrr1, wkpp, wkpr);
              mkeps1 ((integer(kind=4) *) ntot, (integer(kind=4) *) r, eps, (integer(kind=4) *) pcol, pred, (integer(kind=4) *) p, xcol, beta, delta, patt);
              {
                static integer(kind=4) C.9370 = 100;
                static integer(kind=4) C.9371 = 100;
                static integer(kind=4) C.9372 = 100;

                dreps (&C.9370, &C.9371, &oc, &mc, &C.9372, &wkr, (integer(kind=4) *) ntot, iposn, (integer(kind=4) *) npatt, pstfin, (integer(kind=4) *) r, rmat, delta, sigma, wkrr1, wkrr2);
              }
              mky ((integer(kind=4) *) ntot, (integer(kind=4) *) r, (integer(kind=4) *) pcol, pred, delta, y, (integer(kind=4) *) p, xcol, (integer(kind=4) *) q, zcol, beta, (integer(kind=4) *) m, b, ist, ifin, (integer(kind=4) *) npatt, rmat, patt);
              storebd ((integer(kind=4) *) iter, &it, (integer(kind=4) *) p, (integer(kind=4) *) r, beta, (integer(kind=4) *) q, psi, sigma, betas, sigmas, psis);
              __label_000100:;
              L.733:;
              D.9374 = it == D.9366;
              it = it + 1;
              if (D.9374) goto L.734;
            }
          }
      }
    L.734:;
  }
  return;
}


mgibbs (integer(kind=4) & restrict ntot, integer(kind=4)[0:D.9853] * restrict subj, integer(kind=4) & restrict m, integer(kind=4)[0:D.9850] * restrict ist, integer(kind=4)[0:D.9847] * restrict ifin, integer(kind=4) & restrict pcol, real(kind=8)[0:D.9844] * restrict pred, integer(kind=4) & restrict q, integer(kind=4)[0:D.9841] * restrict zcol, real(kind=8)[0:D.9838] * restrict ztz, integer(kind=4)[0:D.9835] * restrict patt, integer(kind=4) & restrict nstar, integer(kind=4) & restrict r, real(kind=8)[0:D.9823] * restrict y, integer(kind=4) & restrict p, integer(kind=4)[0:D.9832] * restrict xcol, integer(kind=4) & restrict npatt, integer(kind=4)[0:D.9820] * restrict rmat, integer(kind=4) & restrict sflag, real(kind=8)[0:D.9814] * restrict beta, real(kind=8)[0:D.9808] * restrict sigma, real(kind=8)[0:D.9805] * restrict psi, real(kind=8)[0:D.9784] * restrict b, real(kind=8)[0:D.9829] * restrict xtxinv, real(kind=8)[0:D.9826] * restrict wkpp, real(kind=8)[0:D.9817] * restrict wkpr, real(kind=8)[0:D.9811] * restrict eps, real(kind=8)[0:D.9793] * restrict wkrqrq1, real(kind=8)[0:D.9790] * restrict wkrqrq2, real(kind=8)[0:D.9802] * restrict sig, real(kind=8)[0:D.9799] * restrict wkrr1, real(kind=8)[0:D.9796] * restrict wkrr2, integer(kind=4) & restrict iter, real(kind=8)[0:D.9781] * restrict wkqr1, real(kind=8)[0:D.9778] * restrict wkqr2, real(kind=8)[0:D.9775] * restrict wkqrv, integer(kind=4) & restrict nhyp, real(kind=8)[0:D.9787] * restrict hyp, real(kind=8)[0:D.9772] * restrict delta, integer(kind=4)[0:D.9769] * restrict iposn, integer(kind=4)[0:D.9766] * restrict pstfin, real(kind=8)[0:D.9763] * restrict betas, real(kind=8)[0:D.9760] * restrict sigmas, real(kind=8)[0:D.9757] * restrict psis)
{
  integer(kind=8) ubound.1466;
  integer(kind=8) ubound.1467;
  integer(kind=8) stride.1468;
  integer(kind=8) ubound.1469;
  integer(kind=8) stride.1470;
  integer(kind=8) offset.1471;
  integer(kind=8) size.1472;
  integer(kind=8) ubound.1473;
  integer(kind=8) ubound.1474;
  integer(kind=8) stride.1475;
  integer(kind=8) offset.1476;
  integer(kind=8) size.1477;
  integer(kind=8) ubound.1478;
  integer(kind=8) ubound.1479;
  integer(kind=8) stride.1480;
  integer(kind=8) ubound.1481;
  integer(kind=8) stride.1482;
  integer(kind=8) offset.1483;
  integer(kind=8) size.1484;
  integer(kind=8) ubound.1485;
  integer(kind=8) ubound.1486;
  integer(kind=8) stride.1487;
  integer(kind=8) offset.1488;
  integer(kind=8) size.1489;
  integer(kind=8) ubound.1490;
  integer(kind=8) ubound.1491;
  integer(kind=8) stride.1492;
  integer(kind=8) offset.1493;
  integer(kind=8) size.1494;
  integer(kind=8) ubound.1495;
  integer(kind=8) size.1496;
  integer(kind=4) i;
  integer(kind=8) ubound.1497;
  integer(kind=8) size.1498;
  integer(kind=8) ubound.1499;
  integer(kind=8) size.1500;
  integer(kind=8) ubound.1501;
  integer(kind=8) size.1502;
  integer(kind=4) it;
  integer(kind=4) j;
  real(kind=4) junk;
  integer(kind=4) mc[100];
  integer(kind=4) oc[100];
  integer(kind=8) ubound.1503;
  integer(kind=8) size.1504;
  integer(kind=8) ubound.1505;
  integer(kind=8) ubound.1506;
  integer(kind=8) stride.1507;
  integer(kind=8) offset.1508;
  integer(kind=8) size.1509;
  integer(kind=8) ubound.1510;
  integer(kind=8) ubound.1511;
  integer(kind=8) stride.1512;
  integer(kind=8) offset.1513;
  integer(kind=8) size.1514;
  integer(kind=8) ubound.1515;
  integer(kind=8) ubound.1516;
  integer(kind=8) stride.1517;
  integer(kind=8) ubound.1518;
  integer(kind=8) stride.1519;
  integer(kind=8) offset.1520;
  integer(kind=8) size.1521;
  integer(kind=8) ubound.1522;
  integer(kind=8) stride.1523;
  integer(kind=8) offset.1524;
  integer(kind=8) size.1525;
  integer(kind=8) ubound.1526;
  integer(kind=8) ubound.1527;
  integer(kind=8) stride.1528;
  integer(kind=8) offset.1529;
  integer(kind=8) size.1530;
  integer(kind=8) ubound.1531;
  integer(kind=8) ubound.1532;
  integer(kind=8) stride.1533;
  integer(kind=8) ubound.1534;
  integer(kind=8) stride.1535;
  integer(kind=8) offset.1536;
  integer(kind=8) size.1537;
  integer(kind=8) ubound.1538;
  integer(kind=8) ubound.1539;
  integer(kind=8) stride.1540;
  integer(kind=8) offset.1541;
  integer(kind=8) size.1542;
  integer(kind=8) ubound.1543;
  integer(kind=8) ubound.1544;
  integer(kind=8) stride.1545;
  integer(kind=8) ubound.1546;
  integer(kind=8) stride.1547;
  integer(kind=8) offset.1548;
  integer(kind=8) size.1549;
  integer(kind=8) ubound.1550;
  integer(kind=8) size.1551;
  integer(kind=8) ubound.1552;
  integer(kind=8) ubound.1553;
  integer(kind=8) stride.1554;
  integer(kind=8) offset.1555;
  integer(kind=8) size.1556;
  integer(kind=8) ubound.1557;
  integer(kind=8) ubound.1558;
  integer(kind=8) stride.1559;
  integer(kind=8) offset.1560;
  integer(kind=8) size.1561;
  integer(kind=8) ubound.1562;
  integer(kind=8) ubound.1563;
  integer(kind=8) stride.1564;
  integer(kind=8) offset.1565;
  integer(kind=8) size.1566;
  integer(kind=8) ubound.1567;
  integer(kind=8) ubound.1568;
  integer(kind=8) stride.1569;
  integer(kind=8) offset.1570;
  integer(kind=8) size.1571;
  integer(kind=8) ubound.1572;
  integer(kind=8) size.1573;
  real(kind=8) wkr[100];
  integer(kind=8) ubound.1574;
  integer(kind=8) ubound.1575;
  integer(kind=8) stride.1576;
  integer(kind=8) offset.1577;
  integer(kind=8) size.1578;
  integer(kind=8) ubound.1579;
  integer(kind=8) ubound.1580;
  integer(kind=8) stride.1581;
  integer(kind=8) offset.1582;
  integer(kind=8) size.1583;
  integer(kind=8) ubound.1584;
  integer(kind=8) ubound.1585;
  integer(kind=8) stride.1586;
  integer(kind=8) offset.1587;
  integer(kind=8) size.1588;
  integer(kind=8) ubound.1589;
  integer(kind=8) ubound.1590;
  integer(kind=8) stride.1591;
  integer(kind=8) offset.1592;
  integer(kind=8) size.1593;
  integer(kind=8) ubound.1594;
  integer(kind=8) size.1595;
  integer(kind=8) ubound.1596;
  integer(kind=8) ubound.1597;
  integer(kind=8) stride.1598;
  integer(kind=8) offset.1599;
  integer(kind=8) size.1600;
  integer(kind=8) ubound.1601;
  integer(kind=8) ubound.1602;
  integer(kind=8) stride.1603;
  integer(kind=8) offset.1604;
  integer(kind=8) size.1605;
  integer(kind=8) ubound.1606;
  integer(kind=8) size.1607;
  integer(kind=8) ubound.1608;
  integer(kind=8) ubound.1609;
  integer(kind=8) stride.1610;
  integer(kind=8) ubound.1611;
  integer(kind=8) stride.1612;
  integer(kind=8) offset.1613;
  integer(kind=8) size.1614;
  integer(kind=8) D.9757;
  bitsizetype D.9758;
  sizetype D.9759;
  integer(kind=8) D.9760;
  bitsizetype D.9761;
  sizetype D.9762;
  integer(kind=8) D.9763;
  bitsizetype D.9764;
  sizetype D.9765;
  integer(kind=8) D.9766;
  bitsizetype D.9767;
  sizetype D.9768;
  integer(kind=8) D.9769;
  bitsizetype D.9770;
  sizetype D.9771;
  integer(kind=8) D.9772;
  bitsizetype D.9773;
  sizetype D.9774;
  integer(kind=8) D.9775;
  bitsizetype D.9776;
  sizetype D.9777;
  integer(kind=8) D.9778;
  bitsizetype D.9779;
  sizetype D.9780;
  integer(kind=8) D.9781;
  bitsizetype D.9782;
  sizetype D.9783;
  integer(kind=8) D.9784;
  bitsizetype D.9785;
  sizetype D.9786;
  integer(kind=8) D.9787;
  bitsizetype D.9788;
  sizetype D.9789;
  integer(kind=8) D.9790;
  bitsizetype D.9791;
  sizetype D.9792;
  integer(kind=8) D.9793;
  bitsizetype D.9794;
  sizetype D.9795;
  integer(kind=8) D.9796;
  bitsizetype D.9797;
  sizetype D.9798;
  integer(kind=8) D.9799;
  bitsizetype D.9800;
  sizetype D.9801;
  integer(kind=8) D.9802;
  bitsizetype D.9803;
  sizetype D.9804;
  integer(kind=8) D.9805;
  bitsizetype D.9806;
  sizetype D.9807;
  integer(kind=8) D.9808;
  bitsizetype D.9809;
  sizetype D.9810;
  integer(kind=8) D.9811;
  bitsizetype D.9812;
  sizetype D.9813;
  integer(kind=8) D.9814;
  bitsizetype D.9815;
  sizetype D.9816;
  integer(kind=8) D.9817;
  bitsizetype D.9818;
  sizetype D.9819;
  integer(kind=8) D.9820;
  bitsizetype D.9821;
  sizetype D.9822;
  integer(kind=8) D.9823;
  bitsizetype D.9824;
  sizetype D.9825;
  integer(kind=8) D.9826;
  bitsizetype D.9827;
  sizetype D.9828;
  integer(kind=8) D.9829;
  bitsizetype D.9830;
  sizetype D.9831;
  integer(kind=8) D.9832;
  bitsizetype D.9833;
  sizetype D.9834;
  integer(kind=8) D.9835;
  bitsizetype D.9836;
  sizetype D.9837;
  integer(kind=8) D.9838;
  bitsizetype D.9839;
  sizetype D.9840;
  integer(kind=8) D.9841;
  bitsizetype D.9842;
  sizetype D.9843;
  integer(kind=8) D.9844;
  bitsizetype D.9845;
  sizetype D.9846;
  integer(kind=8) D.9847;
  bitsizetype D.9848;
  sizetype D.9849;
  integer(kind=8) D.9850;
  bitsizetype D.9851;
  sizetype D.9852;
  integer(kind=8) D.9853;
  bitsizetype D.9854;
  sizetype D.9855;

  ubound.1550 = (integer(kind=8)) *ntot;
  size.1551 = NON_LVALUE_EXPR <ubound.1550>;
  size.1551 = MAX_EXPR <size.1551, 0>;
  D.9853 = size.1551 + -1;
  D.9854 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1551> * 32;
  D.9855 = (sizetype) NON_LVALUE_EXPR <size.1551> * 4;
  ubound.1501 = (integer(kind=8)) *m;
  size.1502 = NON_LVALUE_EXPR <ubound.1501>;
  size.1502 = MAX_EXPR <size.1502, 0>;
  D.9850 = size.1502 + -1;
  D.9851 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1502> * 32;
  D.9852 = (sizetype) NON_LVALUE_EXPR <size.1502> * 4;
  ubound.1497 = (integer(kind=8)) *m;
  size.1498 = NON_LVALUE_EXPR <ubound.1497>;
  size.1498 = MAX_EXPR <size.1498, 0>;
  D.9847 = size.1498 + -1;
  D.9848 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1498> * 32;
  D.9849 = (sizetype) NON_LVALUE_EXPR <size.1498> * 4;
  ubound.1505 = (integer(kind=8)) *ntot;
  stride.1507 = NON_LVALUE_EXPR <ubound.1505>;
  stride.1507 = MAX_EXPR <stride.1507, 0>;
  ubound.1506 = (integer(kind=8)) *pcol;
  size.1509 = stride.1507 * NON_LVALUE_EXPR <ubound.1506>;
  size.1509 = MAX_EXPR <size.1509, 0>;
  D.9844 = size.1509 + -1;
  D.9845 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1509> * 64;
  D.9846 = (sizetype) NON_LVALUE_EXPR <size.1509> * 8;
  offset.1508 = ~NON_LVALUE_EXPR <stride.1507>;
  ubound.1606 = (integer(kind=8)) *q;
  size.1607 = NON_LVALUE_EXPR <ubound.1606>;
  size.1607 = MAX_EXPR <size.1607, 0>;
  D.9841 = size.1607 + -1;
  D.9842 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1607> * 32;
  D.9843 = (sizetype) NON_LVALUE_EXPR <size.1607> * 4;
  ubound.1608 = (integer(kind=8)) *q;
  stride.1610 = NON_LVALUE_EXPR <ubound.1608>;
  stride.1610 = MAX_EXPR <stride.1610, 0>;
  ubound.1609 = (integer(kind=8)) *q;
  stride.1612 = stride.1610 * NON_LVALUE_EXPR <ubound.1609>;
  stride.1612 = MAX_EXPR <stride.1612, 0>;
  ubound.1611 = (integer(kind=8)) *m;
  size.1614 = stride.1612 * NON_LVALUE_EXPR <ubound.1611>;
  size.1614 = MAX_EXPR <size.1614, 0>;
  D.9838 = size.1614 + -1;
  D.9839 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1614> * 64;
  D.9840 = (sizetype) NON_LVALUE_EXPR <size.1614> * 8;
  offset.1613 = ~NON_LVALUE_EXPR <stride.1610> - NON_LVALUE_EXPR <stride.1612>;
  ubound.1503 = (integer(kind=8)) *ntot;
  size.1504 = NON_LVALUE_EXPR <ubound.1503>;
  size.1504 = MAX_EXPR <size.1504, 0>;
  D.9835 = size.1504 + -1;
  D.9836 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1504> * 32;
  D.9837 = (sizetype) NON_LVALUE_EXPR <size.1504> * 4;
  ubound.1594 = (integer(kind=8)) *p;
  size.1595 = NON_LVALUE_EXPR <ubound.1594>;
  size.1595 = MAX_EXPR <size.1595, 0>;
  D.9832 = size.1595 + -1;
  D.9833 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1595> * 32;
  D.9834 = (sizetype) NON_LVALUE_EXPR <size.1595> * 4;
  ubound.1596 = (integer(kind=8)) *p;
  stride.1598 = NON_LVALUE_EXPR <ubound.1596>;
  stride.1598 = MAX_EXPR <stride.1598, 0>;
  ubound.1597 = (integer(kind=8)) *p;
  size.1600 = stride.1598 * NON_LVALUE_EXPR <ubound.1597>;
  size.1600 = MAX_EXPR <size.1600, 0>;
  D.9829 = size.1600 + -1;
  D.9830 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1600> * 64;
  D.9831 = (sizetype) NON_LVALUE_EXPR <size.1600> * 8;
  offset.1599 = ~NON_LVALUE_EXPR <stride.1598>;
  ubound.1552 = (integer(kind=8)) *p;
  stride.1554 = NON_LVALUE_EXPR <ubound.1552>;
  stride.1554 = MAX_EXPR <stride.1554, 0>;
  ubound.1553 = (integer(kind=8)) *p;
  size.1556 = stride.1554 * NON_LVALUE_EXPR <ubound.1553>;
  size.1556 = MAX_EXPR <size.1556, 0>;
  D.9826 = size.1556 + -1;
  D.9827 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1556> * 64;
  D.9828 = (sizetype) NON_LVALUE_EXPR <size.1556> * 8;
  offset.1555 = ~NON_LVALUE_EXPR <stride.1554>;
  ubound.1601 = (integer(kind=8)) *ntot;
  stride.1603 = NON_LVALUE_EXPR <ubound.1601>;
  stride.1603 = MAX_EXPR <stride.1603, 0>;
  ubound.1602 = (integer(kind=8)) *r;
  size.1605 = stride.1603 * NON_LVALUE_EXPR <ubound.1602>;
  size.1605 = MAX_EXPR <size.1605, 0>;
  D.9823 = size.1605 + -1;
  D.9824 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1605> * 64;
  D.9825 = (sizetype) NON_LVALUE_EXPR <size.1605> * 8;
  offset.1604 = ~NON_LVALUE_EXPR <stride.1603>;
  ubound.1526 = (integer(kind=8)) *npatt;
  stride.1528 = NON_LVALUE_EXPR <ubound.1526>;
  stride.1528 = MAX_EXPR <stride.1528, 0>;
  ubound.1527 = (integer(kind=8)) *r;
  size.1530 = stride.1528 * NON_LVALUE_EXPR <ubound.1527>;
  size.1530 = MAX_EXPR <size.1530, 0>;
  D.9820 = size.1530 + -1;
  D.9821 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1530> * 32;
  D.9822 = (sizetype) NON_LVALUE_EXPR <size.1530> * 4;
  offset.1529 = ~NON_LVALUE_EXPR <stride.1528>;
  ubound.1557 = (integer(kind=8)) *p;
  stride.1559 = NON_LVALUE_EXPR <ubound.1557>;
  stride.1559 = MAX_EXPR <stride.1559, 0>;
  ubound.1558 = (integer(kind=8)) *r;
  size.1561 = stride.1559 * NON_LVALUE_EXPR <ubound.1558>;
  size.1561 = MAX_EXPR <size.1561, 0>;
  D.9817 = size.1561 + -1;
  D.9818 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1561> * 64;
  D.9819 = (sizetype) NON_LVALUE_EXPR <size.1561> * 8;
  offset.1560 = ~NON_LVALUE_EXPR <stride.1559>;
  ubound.1473 = (integer(kind=8)) *p;
  stride.1475 = NON_LVALUE_EXPR <ubound.1473>;
  stride.1475 = MAX_EXPR <stride.1475, 0>;
  ubound.1474 = (integer(kind=8)) *r;
  size.1477 = stride.1475 * NON_LVALUE_EXPR <ubound.1474>;
  size.1477 = MAX_EXPR <size.1477, 0>;
  D.9814 = size.1477 + -1;
  D.9815 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1477> * 64;
  D.9816 = (sizetype) NON_LVALUE_EXPR <size.1477> * 8;
  offset.1476 = ~NON_LVALUE_EXPR <stride.1475>;
  ubound.1490 = (integer(kind=8)) *ntot;
  stride.1492 = NON_LVALUE_EXPR <ubound.1490>;
  stride.1492 = MAX_EXPR <stride.1492, 0>;
  ubound.1491 = (integer(kind=8)) *r;
  size.1494 = stride.1492 * NON_LVALUE_EXPR <ubound.1491>;
  size.1494 = MAX_EXPR <size.1494, 0>;
  D.9811 = size.1494 + -1;
  D.9812 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1494> * 64;
  D.9813 = (sizetype) NON_LVALUE_EXPR <size.1494> * 8;
  offset.1493 = ~NON_LVALUE_EXPR <stride.1492>;
  ubound.1538 = (integer(kind=8)) *r;
  stride.1540 = NON_LVALUE_EXPR <ubound.1538>;
  stride.1540 = MAX_EXPR <stride.1540, 0>;
  ubound.1539 = (integer(kind=8)) *r;
  size.1542 = stride.1540 * NON_LVALUE_EXPR <ubound.1539>;
  size.1542 = MAX_EXPR <size.1542, 0>;
  D.9808 = size.1542 + -1;
  D.9809 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1542> * 64;
  D.9810 = (sizetype) NON_LVALUE_EXPR <size.1542> * 8;
  offset.1541 = ~NON_LVALUE_EXPR <stride.1540>;
  ubound.1510 = (integer(kind=8)) (*r * *q);
  stride.1512 = NON_LVALUE_EXPR <ubound.1510>;
  stride.1512 = MAX_EXPR <stride.1512, 0>;
  ubound.1511 = (integer(kind=8)) (*r * *q);
  size.1514 = stride.1512 * NON_LVALUE_EXPR <ubound.1511>;
  size.1514 = MAX_EXPR <size.1514, 0>;
  D.9805 = size.1514 + -1;
  D.9806 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1514> * 64;
  D.9807 = (sizetype) NON_LVALUE_EXPR <size.1514> * 8;
  offset.1513 = ~NON_LVALUE_EXPR <stride.1512>;
  ubound.1531 = (integer(kind=8)) (*r * *q);
  stride.1533 = NON_LVALUE_EXPR <ubound.1531>;
  stride.1533 = MAX_EXPR <stride.1533, 0>;
  ubound.1532 = (integer(kind=8)) (*r * *q);
  stride.1535 = stride.1533 * NON_LVALUE_EXPR <ubound.1532>;
  stride.1535 = MAX_EXPR <stride.1535, 0>;
  ubound.1534 = (integer(kind=8)) *m;
  size.1537 = stride.1535 * NON_LVALUE_EXPR <ubound.1534>;
  size.1537 = MAX_EXPR <size.1537, 0>;
  D.9802 = size.1537 + -1;
  D.9803 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1537> * 64;
  D.9804 = (sizetype) NON_LVALUE_EXPR <size.1537> * 8;
  offset.1536 = ~NON_LVALUE_EXPR <stride.1533> - NON_LVALUE_EXPR <stride.1535>;
  ubound.1584 = (integer(kind=8)) *r;
  stride.1586 = NON_LVALUE_EXPR <ubound.1584>;
  stride.1586 = MAX_EXPR <stride.1586, 0>;
  ubound.1585 = (integer(kind=8)) *r;
  size.1588 = stride.1586 * NON_LVALUE_EXPR <ubound.1585>;
  size.1588 = MAX_EXPR <size.1588, 0>;
  D.9799 = size.1588 + -1;
  D.9800 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1588> * 64;
  D.9801 = (sizetype) NON_LVALUE_EXPR <size.1588> * 8;
  offset.1587 = ~NON_LVALUE_EXPR <stride.1586>;
  ubound.1589 = (integer(kind=8)) *r;
  stride.1591 = NON_LVALUE_EXPR <ubound.1589>;
  stride.1591 = MAX_EXPR <stride.1591, 0>;
  ubound.1590 = (integer(kind=8)) *r;
  size.1593 = stride.1591 * NON_LVALUE_EXPR <ubound.1590>;
  size.1593 = MAX_EXPR <size.1593, 0>;
  D.9796 = size.1593 + -1;
  D.9797 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1593> * 64;
  D.9798 = (sizetype) NON_LVALUE_EXPR <size.1593> * 8;
  offset.1592 = ~NON_LVALUE_EXPR <stride.1591>;
  ubound.1574 = (integer(kind=8)) (*r * *q);
  stride.1576 = NON_LVALUE_EXPR <ubound.1574>;
  stride.1576 = MAX_EXPR <stride.1576, 0>;
  ubound.1575 = (integer(kind=8)) (*r * *q);
  size.1578 = stride.1576 * NON_LVALUE_EXPR <ubound.1575>;
  size.1578 = MAX_EXPR <size.1578, 0>;
  D.9793 = size.1578 + -1;
  D.9794 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1578> * 64;
  D.9795 = (sizetype) NON_LVALUE_EXPR <size.1578> * 8;
  offset.1577 = ~NON_LVALUE_EXPR <stride.1576>;
  ubound.1579 = (integer(kind=8)) (*r * *q);
  stride.1581 = NON_LVALUE_EXPR <ubound.1579>;
  stride.1581 = MAX_EXPR <stride.1581, 0>;
  ubound.1580 = (integer(kind=8)) (*r * *q);
  size.1583 = stride.1581 * NON_LVALUE_EXPR <ubound.1580>;
  size.1583 = MAX_EXPR <size.1583, 0>;
  D.9790 = size.1583 + -1;
  D.9791 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1583> * 64;
  D.9792 = (sizetype) NON_LVALUE_EXPR <size.1583> * 8;
  offset.1582 = ~NON_LVALUE_EXPR <stride.1581>;
  ubound.1495 = (integer(kind=8)) *nhyp;
  size.1496 = NON_LVALUE_EXPR <ubound.1495>;
  size.1496 = MAX_EXPR <size.1496, 0>;
  D.9787 = size.1496 + -1;
  D.9788 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1496> * 64;
  D.9789 = (sizetype) NON_LVALUE_EXPR <size.1496> * 8;
  ubound.1466 = (integer(kind=8)) *q;
  stride.1468 = NON_LVALUE_EXPR <ubound.1466>;
  stride.1468 = MAX_EXPR <stride.1468, 0>;
  ubound.1467 = (integer(kind=8)) *r;
  stride.1470 = stride.1468 * NON_LVALUE_EXPR <ubound.1467>;
  stride.1470 = MAX_EXPR <stride.1470, 0>;
  ubound.1469 = (integer(kind=8)) *m;
  size.1472 = stride.1470 * NON_LVALUE_EXPR <ubound.1469>;
  size.1472 = MAX_EXPR <size.1472, 0>;
  D.9784 = size.1472 + -1;
  D.9785 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1472> * 64;
  D.9786 = (sizetype) NON_LVALUE_EXPR <size.1472> * 8;
  offset.1471 = ~NON_LVALUE_EXPR <stride.1468> - NON_LVALUE_EXPR <stride.1470>;
  ubound.1562 = (integer(kind=8)) *q;
  stride.1564 = NON_LVALUE_EXPR <ubound.1562>;
  stride.1564 = MAX_EXPR <stride.1564, 0>;
  ubound.1563 = (integer(kind=8)) *r;
  size.1566 = stride.1564 * NON_LVALUE_EXPR <ubound.1563>;
  size.1566 = MAX_EXPR <size.1566, 0>;
  D.9781 = size.1566 + -1;
  D.9782 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1566> * 64;
  D.9783 = (sizetype) NON_LVALUE_EXPR <size.1566> * 8;
  offset.1565 = ~NON_LVALUE_EXPR <stride.1564>;
  ubound.1567 = (integer(kind=8)) *q;
  stride.1569 = NON_LVALUE_EXPR <ubound.1567>;
  stride.1569 = MAX_EXPR <stride.1569, 0>;
  ubound.1568 = (integer(kind=8)) *r;
  size.1571 = stride.1569 * NON_LVALUE_EXPR <ubound.1568>;
  size.1571 = MAX_EXPR <size.1571, 0>;
  D.9778 = size.1571 + -1;
  D.9779 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1571> * 64;
  D.9780 = (sizetype) NON_LVALUE_EXPR <size.1571> * 8;
  offset.1570 = ~NON_LVALUE_EXPR <stride.1569>;
  ubound.1572 = (integer(kind=8)) (*q * *r);
  size.1573 = NON_LVALUE_EXPR <ubound.1572>;
  size.1573 = MAX_EXPR <size.1573, 0>;
  D.9775 = size.1573 + -1;
  D.9776 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1573> * 64;
  D.9777 = (sizetype) NON_LVALUE_EXPR <size.1573> * 8;
  ubound.1485 = (integer(kind=8)) *ntot;
  stride.1487 = NON_LVALUE_EXPR <ubound.1485>;
  stride.1487 = MAX_EXPR <stride.1487, 0>;
  ubound.1486 = (integer(kind=8)) *r;
  size.1489 = stride.1487 * NON_LVALUE_EXPR <ubound.1486>;
  size.1489 = MAX_EXPR <size.1489, 0>;
  D.9772 = size.1489 + -1;
  D.9773 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1489> * 64;
  D.9774 = (sizetype) NON_LVALUE_EXPR <size.1489> * 8;
  offset.1488 = ~NON_LVALUE_EXPR <stride.1487>;
  ubound.1499 = (integer(kind=8)) *ntot;
  size.1500 = NON_LVALUE_EXPR <ubound.1499>;
  size.1500 = MAX_EXPR <size.1500, 0>;
  D.9769 = size.1500 + -1;
  D.9770 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1500> * 32;
  D.9771 = (sizetype) NON_LVALUE_EXPR <size.1500> * 4;
  ubound.1522 = (integer(kind=8)) *npatt;
  stride.1523 = NON_LVALUE_EXPR <ubound.1522>;
  stride.1523 = MAX_EXPR <stride.1523, 0>;
  size.1525 = stride.1523 * 2;
  size.1525 = MAX_EXPR <size.1525, 0>;
  D.9766 = size.1525 + -1;
  D.9767 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1525> * 32;
  D.9768 = (sizetype) NON_LVALUE_EXPR <size.1525> * 4;
  offset.1524 = ~NON_LVALUE_EXPR <stride.1523>;
  ubound.1478 = (integer(kind=8)) *p;
  stride.1480 = NON_LVALUE_EXPR <ubound.1478>;
  stride.1480 = MAX_EXPR <stride.1480, 0>;
  ubound.1479 = (integer(kind=8)) *r;
  stride.1482 = stride.1480 * NON_LVALUE_EXPR <ubound.1479>;
  stride.1482 = MAX_EXPR <stride.1482, 0>;
  ubound.1481 = (integer(kind=8)) *iter;
  size.1484 = stride.1482 * NON_LVALUE_EXPR <ubound.1481>;
  size.1484 = MAX_EXPR <size.1484, 0>;
  D.9763 = size.1484 + -1;
  D.9764 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1484> * 64;
  D.9765 = (sizetype) NON_LVALUE_EXPR <size.1484> * 8;
  offset.1483 = ~NON_LVALUE_EXPR <stride.1480> - NON_LVALUE_EXPR <stride.1482>;
  ubound.1543 = (integer(kind=8)) *r;
  stride.1545 = NON_LVALUE_EXPR <ubound.1543>;
  stride.1545 = MAX_EXPR <stride.1545, 0>;
  ubound.1544 = (integer(kind=8)) *r;
  stride.1547 = stride.1545 * NON_LVALUE_EXPR <ubound.1544>;
  stride.1547 = MAX_EXPR <stride.1547, 0>;
  ubound.1546 = (integer(kind=8)) *iter;
  size.1549 = stride.1547 * NON_LVALUE_EXPR <ubound.1546>;
  size.1549 = MAX_EXPR <size.1549, 0>;
  D.9760 = size.1549 + -1;
  D.9761 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1549> * 64;
  D.9762 = (sizetype) NON_LVALUE_EXPR <size.1549> * 8;
  offset.1548 = ~NON_LVALUE_EXPR <stride.1545> - NON_LVALUE_EXPR <stride.1547>;
  ubound.1515 = (integer(kind=8)) (*r * *q);
  stride.1517 = NON_LVALUE_EXPR <ubound.1515>;
  stride.1517 = MAX_EXPR <stride.1517, 0>;
  ubound.1516 = (integer(kind=8)) (*r * *q);
  stride.1519 = stride.1517 * NON_LVALUE_EXPR <ubound.1516>;
  stride.1519 = MAX_EXPR <stride.1519, 0>;
  ubound.1518 = (integer(kind=8)) *iter;
  size.1521 = stride.1519 * NON_LVALUE_EXPR <ubound.1518>;
  size.1521 = MAX_EXPR <size.1521, 0>;
  D.9757 = size.1521 + -1;
  D.9758 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1521> * 64;
  D.9759 = (sizetype) NON_LVALUE_EXPR <size.1521> * 8;
  offset.1520 = ~NON_LVALUE_EXPR <stride.1517> - NON_LVALUE_EXPR <stride.1519>;
  junk = gauss ();
  prelimm ((integer(kind=4) *) ntot, subj, (integer(kind=4) *) m, ist, ifin, (integer(kind=4) *) pcol, pred, (integer(kind=4) *) q, zcol, ztz, patt, (integer(kind=4) *) nstar, (integer(kind=4) *) p, xcol, xtxinv, wkpp);
  if (*sflag != 1)
    {
      mimpy ((integer(kind=4) *) ntot, (integer(kind=4) *) r, y, patt, (integer(kind=4) *) npatt, rmat);
      mkxty ((integer(kind=4) *) ntot, (integer(kind=4) *) r, y, (integer(kind=4) *) pcol, pred, (integer(kind=4) *) p, xcol, patt, wkpr);
      mkbeta ((integer(kind=4) *) p, (integer(kind=4) *) r, xtxinv, wkpr, beta);
      mkeps1 ((integer(kind=4) *) ntot, (integer(kind=4) *) r, y, (integer(kind=4) *) pcol, pred, (integer(kind=4) *) p, xcol, beta, eps, patt);
      mksigma ((integer(kind=4) *) ntot, (integer(kind=4) *) r, eps, (integer(kind=4) *) nstar, sigma, patt);
      {
        static integer(kind=4) C.9737 = 1;

        mksig ((integer(kind=4) *) r, (integer(kind=4) *) q, (integer(kind=4) *) m, psi, sigma, ztz, sig, wkrr1, wkrr2, wkrqrq1, wkrqrq2, &C.9737, (integer(kind=4) *) nhyp, hyp);
      }
      mkpsi0 ((integer(kind=4) *) r, (integer(kind=4) *) q, (integer(kind=4) *) m, psi, sig, wkrqrq1);
    }
  else
    {
      {
        integer(kind=4) D.9738;

        D.9738 = *ntot;
        i = 1;
        if (i <= D.9738)
          {
            while (1)
              {
                {
                  logical(kind=4) D.9747;

                  {
                    integer(kind=4) D.9741;

                    D.9741 = *r;
                    j = 1;
                    if (j <= D.9741)
                      {
                        while (1)
                          {
                            {
                              logical(kind=4) D.9745;

                              (*y)[((integer(kind=8)) j * stride.1603 + offset.1604) + (integer(kind=8)) i] = (*eps)[((integer(kind=8)) j * stride.1492 + offset.1493) + (integer(kind=8)) i];
                              __label_000040:;
                              L.738:;
                              D.9745 = j == D.9741;
                              j = j + 1;
                              if (D.9745) goto L.739;
                            }
                          }
                      }
                    L.739:;
                  }
                  __label_000050:;
                  L.736:;
                  D.9747 = i == D.9738;
                  i = i + 1;
                  if (D.9747) goto L.737;
                }
              }
          }
        L.737:;
      }
    }
  L.735:;
  {
    integer(kind=4) D.9748;

    D.9748 = *iter;
    it = 1;
    if (it <= D.9748)
      {
        while (1)
          {
            {
              logical(kind=4) D.9756;

              mkeps1 ((integer(kind=4) *) ntot, (integer(kind=4) *) r, y, (integer(kind=4) *) pcol, pred, (integer(kind=4) *) p, xcol, beta, eps, patt);
              {
                static integer(kind=4) C.9751 = 0;

                mksig ((integer(kind=4) *) r, (integer(kind=4) *) q, (integer(kind=4) *) m, psi, sigma, ztz, sig, wkrr1, wkrr2, wkrqrq1, wkrqrq2, &C.9751, (integer(kind=4) *) nhyp, hyp);
              }
              drb ((integer(kind=4) *) r, (integer(kind=4) *) q, (integer(kind=4) *) m, b, wkrr2, eps, (integer(kind=4) *) pcol, pred, zcol, wkqr1, wkqr2, ist, ifin, patt, (integer(kind=4) *) ntot, sig, wkrqrq2, wkqrv);
              drpsi ((integer(kind=4) *) r, (integer(kind=4) *) q, (integer(kind=4) *) m, psi, wkrqrq1, wkrqrq2, wkqrv, (integer(kind=4) *) nhyp, hyp, b);
              mkeps2 ((integer(kind=4) *) ntot, (integer(kind=4) *) m, (integer(kind=4) *) r, y, (integer(kind=4) *) pcol, pred, (integer(kind=4) *) q, zcol, b, eps, patt, ist, ifin);
              mkxty ((integer(kind=4) *) ntot, (integer(kind=4) *) r, eps, (integer(kind=4) *) pcol, pred, (integer(kind=4) *) p, xcol, patt, wkpr);
              mkbeta ((integer(kind=4) *) p, (integer(kind=4) *) r, xtxinv, wkpr, beta);
              mkeps1 ((integer(kind=4) *) ntot, (integer(kind=4) *) r, eps, (integer(kind=4) *) pcol, pred, (integer(kind=4) *) p, xcol, beta, delta, patt);
              drsigma ((integer(kind=4) *) ntot, (integer(kind=4) *) r, delta, (integer(kind=4) *) nstar, sigma, patt, (integer(kind=4) *) nhyp, hyp, wkrr1, wkrr2, (integer(kind=4) *) p);
              drbeta ((integer(kind=4) *) r, sigma, xtxinv, (integer(kind=4) *) p, beta, wkrr1, wkpp, wkpr);
              mkeps1 ((integer(kind=4) *) ntot, (integer(kind=4) *) r, eps, (integer(kind=4) *) pcol, pred, (integer(kind=4) *) p, xcol, beta, delta, patt);
              {
                static integer(kind=4) C.9752 = 100;
                static integer(kind=4) C.9753 = 100;
                static integer(kind=4) C.9754 = 100;

                dreps (&C.9752, &C.9753, &oc, &mc, &C.9754, &wkr, (integer(kind=4) *) ntot, iposn, (integer(kind=4) *) npatt, pstfin, (integer(kind=4) *) r, rmat, delta, sigma, wkrr1, wkrr2);
              }
              mky ((integer(kind=4) *) ntot, (integer(kind=4) *) r, (integer(kind=4) *) pcol, pred, delta, y, (integer(kind=4) *) p, xcol, (integer(kind=4) *) q, zcol, beta, (integer(kind=4) *) m, b, ist, ifin, (integer(kind=4) *) npatt, rmat, patt);
              store ((integer(kind=4) *) iter, &it, (integer(kind=4) *) p, (integer(kind=4) *) r, beta, (integer(kind=4) *) q, psi, sigma, betas, sigmas, psis);
              __label_000100:;
              L.740:;
              D.9756 = it == D.9748;
              it = it + 1;
              if (D.9756) goto L.741;
            }
          }
      }
    L.741:;
  }
  return;
}


rngs (integer(kind=4) & restrict seed)
{
  real(kind=4) __result_rngs;

  __result_rngs = rangen ((integer(kind=4) *) seed);
  return __result_rngs;
  return __result_rngs;
}


nopsi (integer(kind=4) & restrict ntot, integer(kind=4) & restrict m, integer(kind=4)[0:D.10039] * restrict ist, integer(kind=4)[0:D.10036] * restrict ifin, integer(kind=4)[0:D.10033] * restrict occ, integer(kind=4) & restrict nmax, real(kind=8)[0:D.10030] * restrict vi, real(kind=8)[0:D.10027] * restrict vh, integer(kind=4) & restrict pcol, real(kind=8)[0:D.10024] * restrict pred, integer(kind=4) & restrict q, integer(kind=4)[0:] * restrict zcol, real(kind=8)[0:] * restrict ztv, real(kind=8)[0:] * restrict sig0, integer(kind=4) & restrict iflag, real(kind=8)[0:D.10021] * restrict sig, real(kind=8)[0:] * restrict psi, real(kind=8) & restrict sigma2, integer(kind=4) & restrict p, integer(kind=4)[0:D.10018] * restrict xcol, real(kind=8)[0:D.10015] * restrict beta, real(kind=8)[0:] * restrict wkq1, real(kind=8)[0:] * restrict wkq2, real(kind=8)[0:] * restrict wkq3, real(kind=8)[0:D.10012] * restrict y, real(kind=8)[0:D.10009] * restrict delta, real(kind=8)[0:] * restrict b, real(kind=8)[0:] * restrict wk, real(kind=8)[0:D.10006] * restrict w, real(kind=8)[0:D.10003] * restrict xtw, real(kind=8)[0:D.10000] * restrict xtwx, real(kind=8)[0:D.9997] * restrict xtwy, real(kind=8)[0:D.9994] * restrict xtwxinv, real(kind=8) & restrict ll)
{
  integer(kind=8) ubound.1615;
  integer(kind=8) size.1616;
  integer(kind=8) ubound.1617;
  integer(kind=8) size.1618;
  integer(kind=8) ubound.1619;
  integer(kind=8) size.1620;
  integer(kind=8) ubound.1621;
  integer(kind=8) size.1622;
  integer(kind=8) ubound.1623;
  integer(kind=8) size.1624;
  integer(kind=8) ubound.1625;
  integer(kind=8) ubound.1626;
  integer(kind=8) stride.1627;
  integer(kind=8) offset.1628;
  integer(kind=8) size.1629;
  integer(kind=8) ubound.1630;
  integer(kind=8) ubound.1631;
  integer(kind=8) stride.1632;
  integer(kind=8) ubound.1633;
  integer(kind=8) stride.1634;
  integer(kind=8) offset.1635;
  integer(kind=8) size.1636;
  integer(kind=8) ubound.1637;
  integer(kind=8) ubound.1638;
  integer(kind=8) stride.1639;
  integer(kind=8) ubound.1640;
  integer(kind=8) stride.1641;
  integer(kind=8) offset.1642;
  integer(kind=8) size.1643;
  integer(kind=8) ubound.1644;
  integer(kind=8) ubound.1645;
  integer(kind=8) stride.1646;
  integer(kind=8) ubound.1647;
  integer(kind=8) stride.1648;
  integer(kind=8) offset.1649;
  integer(kind=8) size.1650;
  integer(kind=8) ubound.1651;
  integer(kind=8) ubound.1652;
  integer(kind=8) stride.1653;
  integer(kind=8) ubound.1654;
  integer(kind=8) stride.1655;
  integer(kind=8) offset.1656;
  integer(kind=8) size.1657;
  integer(kind=8) ubound.1658;
  integer(kind=8) size.1659;
  integer(kind=8) ubound.1660;
  integer(kind=8) ubound.1661;
  integer(kind=8) stride.1662;
  integer(kind=8) offset.1663;
  integer(kind=8) size.1664;
  integer(kind=8) ubound.1665;
  integer(kind=8) ubound.1666;
  integer(kind=8) stride.1667;
  integer(kind=8) offset.1668;
  integer(kind=8) size.1669;
  integer(kind=8) ubound.1670;
  integer(kind=8) ubound.1671;
  integer(kind=8) stride.1672;
  integer(kind=8) offset.1673;
  integer(kind=8) size.1674;
  integer(kind=8) ubound.1675;
  integer(kind=8) size.1676;
  integer(kind=8) ubound.1677;
  integer(kind=8) size.1678;
  integer(kind=8) D.9994;
  bitsizetype D.9995;
  sizetype D.9996;
  integer(kind=8) D.9997;
  bitsizetype D.9998;
  sizetype D.9999;
  integer(kind=8) D.10000;
  bitsizetype D.10001;
  sizetype D.10002;
  integer(kind=8) D.10003;
  bitsizetype D.10004;
  sizetype D.10005;
  integer(kind=8) D.10006;
  bitsizetype D.10007;
  sizetype D.10008;
  integer(kind=8) D.10009;
  bitsizetype D.10010;
  sizetype D.10011;
  integer(kind=8) D.10012;
  bitsizetype D.10013;
  sizetype D.10014;
  integer(kind=8) D.10015;
  bitsizetype D.10016;
  sizetype D.10017;
  integer(kind=8) D.10018;
  bitsizetype D.10019;
  sizetype D.10020;
  integer(kind=8) D.10021;
  bitsizetype D.10022;
  sizetype D.10023;
  integer(kind=8) D.10024;
  bitsizetype D.10025;
  sizetype D.10026;
  integer(kind=8) D.10027;
  bitsizetype D.10028;
  sizetype D.10029;
  integer(kind=8) D.10030;
  bitsizetype D.10031;
  sizetype D.10032;
  integer(kind=8) D.10033;
  bitsizetype D.10034;
  sizetype D.10035;
  integer(kind=8) D.10036;
  bitsizetype D.10037;
  sizetype D.10038;
  integer(kind=8) D.10039;
  bitsizetype D.10040;
  sizetype D.10041;

  ubound.1621 = (integer(kind=8)) *m;
  size.1622 = NON_LVALUE_EXPR <ubound.1621>;
  size.1622 = MAX_EXPR <size.1622, 0>;
  D.10039 = size.1622 + -1;
  D.10040 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1622> * 32;
  D.10041 = (sizetype) NON_LVALUE_EXPR <size.1622> * 4;
  ubound.1619 = (integer(kind=8)) *m;
  size.1620 = NON_LVALUE_EXPR <ubound.1619>;
  size.1620 = MAX_EXPR <size.1620, 0>;
  D.10036 = size.1620 + -1;
  D.10037 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1620> * 32;
  D.10038 = (sizetype) NON_LVALUE_EXPR <size.1620> * 4;
  ubound.1623 = (integer(kind=8)) *ntot;
  size.1624 = NON_LVALUE_EXPR <ubound.1623>;
  size.1624 = MAX_EXPR <size.1624, 0>;
  D.10033 = size.1624 + -1;
  D.10034 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1624> * 32;
  D.10035 = (sizetype) NON_LVALUE_EXPR <size.1624> * 4;
  ubound.1644 = (integer(kind=8)) *nmax;
  stride.1646 = NON_LVALUE_EXPR <ubound.1644>;
  stride.1646 = MAX_EXPR <stride.1646, 0>;
  ubound.1645 = (integer(kind=8)) *nmax;
  stride.1648 = stride.1646 * NON_LVALUE_EXPR <ubound.1645>;
  stride.1648 = MAX_EXPR <stride.1648, 0>;
  ubound.1647 = (integer(kind=8)) *m;
  size.1650 = stride.1648 * NON_LVALUE_EXPR <ubound.1647>;
  size.1650 = MAX_EXPR <size.1650, 0>;
  D.10030 = size.1650 + -1;
  D.10031 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1650> * 64;
  D.10032 = (sizetype) NON_LVALUE_EXPR <size.1650> * 8;
  offset.1649 = ~NON_LVALUE_EXPR <stride.1646> - NON_LVALUE_EXPR <stride.1648>;
  ubound.1637 = (integer(kind=8)) *nmax;
  stride.1639 = NON_LVALUE_EXPR <ubound.1637>;
  stride.1639 = MAX_EXPR <stride.1639, 0>;
  ubound.1638 = (integer(kind=8)) *nmax;
  stride.1641 = stride.1639 * NON_LVALUE_EXPR <ubound.1638>;
  stride.1641 = MAX_EXPR <stride.1641, 0>;
  ubound.1640 = (integer(kind=8)) *m;
  size.1643 = stride.1641 * NON_LVALUE_EXPR <ubound.1640>;
  size.1643 = MAX_EXPR <size.1643, 0>;
  D.10027 = size.1643 + -1;
  D.10028 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1643> * 64;
  D.10029 = (sizetype) NON_LVALUE_EXPR <size.1643> * 8;
  offset.1642 = ~NON_LVALUE_EXPR <stride.1639> - NON_LVALUE_EXPR <stride.1641>;
  ubound.1625 = (integer(kind=8)) *ntot;
  stride.1627 = NON_LVALUE_EXPR <ubound.1625>;
  stride.1627 = MAX_EXPR <stride.1627, 0>;
  ubound.1626 = (integer(kind=8)) *pcol;
  size.1629 = stride.1627 * NON_LVALUE_EXPR <ubound.1626>;
  size.1629 = MAX_EXPR <size.1629, 0>;
  D.10024 = size.1629 + -1;
  D.10025 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1629> * 64;
  D.10026 = (sizetype) NON_LVALUE_EXPR <size.1629> * 8;
  offset.1628 = ~NON_LVALUE_EXPR <stride.1627>;
  ubound.1630 = (integer(kind=8)) *q;
  stride.1632 = NON_LVALUE_EXPR <ubound.1630>;
  stride.1632 = MAX_EXPR <stride.1632, 0>;
  ubound.1631 = (integer(kind=8)) *q;
  stride.1634 = stride.1632 * NON_LVALUE_EXPR <ubound.1631>;
  stride.1634 = MAX_EXPR <stride.1634, 0>;
  ubound.1633 = (integer(kind=8)) *m;
  size.1636 = stride.1634 * NON_LVALUE_EXPR <ubound.1633>;
  size.1636 = MAX_EXPR <size.1636, 0>;
  D.10021 = size.1636 + -1;
  D.10022 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1636> * 64;
  D.10023 = (sizetype) NON_LVALUE_EXPR <size.1636> * 8;
  offset.1635 = ~NON_LVALUE_EXPR <stride.1632> - NON_LVALUE_EXPR <stride.1634>;
  ubound.1658 = (integer(kind=8)) *p;
  size.1659 = NON_LVALUE_EXPR <ubound.1658>;
  size.1659 = MAX_EXPR <size.1659, 0>;
  D.10018 = size.1659 + -1;
  D.10019 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1659> * 32;
  D.10020 = (sizetype) NON_LVALUE_EXPR <size.1659> * 4;
  ubound.1615 = (integer(kind=8)) *p;
  size.1616 = NON_LVALUE_EXPR <ubound.1615>;
  size.1616 = MAX_EXPR <size.1616, 0>;
  D.10015 = size.1616 + -1;
  D.10016 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1616> * 64;
  D.10017 = (sizetype) NON_LVALUE_EXPR <size.1616> * 8;
  ubound.1677 = (integer(kind=8)) *ntot;
  size.1678 = NON_LVALUE_EXPR <ubound.1677>;
  size.1678 = MAX_EXPR <size.1678, 0>;
  D.10012 = size.1678 + -1;
  D.10013 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1678> * 64;
  D.10014 = (sizetype) NON_LVALUE_EXPR <size.1678> * 8;
  ubound.1617 = (integer(kind=8)) *ntot;
  size.1618 = NON_LVALUE_EXPR <ubound.1617>;
  size.1618 = MAX_EXPR <size.1618, 0>;
  D.10009 = size.1618 + -1;
  D.10010 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1618> * 64;
  D.10011 = (sizetype) NON_LVALUE_EXPR <size.1618> * 8;
  ubound.1651 = (integer(kind=8)) *nmax;
  stride.1653 = NON_LVALUE_EXPR <ubound.1651>;
  stride.1653 = MAX_EXPR <stride.1653, 0>;
  ubound.1652 = (integer(kind=8)) *nmax;
  stride.1655 = stride.1653 * NON_LVALUE_EXPR <ubound.1652>;
  stride.1655 = MAX_EXPR <stride.1655, 0>;
  ubound.1654 = (integer(kind=8)) *m;
  size.1657 = stride.1655 * NON_LVALUE_EXPR <ubound.1654>;
  size.1657 = MAX_EXPR <size.1657, 0>;
  D.10006 = size.1657 + -1;
  D.10007 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1657> * 64;
  D.10008 = (sizetype) NON_LVALUE_EXPR <size.1657> * 8;
  offset.1656 = ~NON_LVALUE_EXPR <stride.1653> - NON_LVALUE_EXPR <stride.1655>;
  ubound.1660 = (integer(kind=8)) *p;
  stride.1662 = NON_LVALUE_EXPR <ubound.1660>;
  stride.1662 = MAX_EXPR <stride.1662, 0>;
  ubound.1661 = (integer(kind=8)) *nmax;
  size.1664 = stride.1662 * NON_LVALUE_EXPR <ubound.1661>;
  size.1664 = MAX_EXPR <size.1664, 0>;
  D.10003 = size.1664 + -1;
  D.10004 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1664> * 64;
  D.10005 = (sizetype) NON_LVALUE_EXPR <size.1664> * 8;
  offset.1663 = ~NON_LVALUE_EXPR <stride.1662>;
  ubound.1665 = (integer(kind=8)) *p;
  stride.1667 = NON_LVALUE_EXPR <ubound.1665>;
  stride.1667 = MAX_EXPR <stride.1667, 0>;
  ubound.1666 = (integer(kind=8)) *p;
  size.1669 = stride.1667 * NON_LVALUE_EXPR <ubound.1666>;
  size.1669 = MAX_EXPR <size.1669, 0>;
  D.10000 = size.1669 + -1;
  D.10001 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1669> * 64;
  D.10002 = (sizetype) NON_LVALUE_EXPR <size.1669> * 8;
  offset.1668 = ~NON_LVALUE_EXPR <stride.1667>;
  ubound.1675 = (integer(kind=8)) *p;
  size.1676 = NON_LVALUE_EXPR <ubound.1675>;
  size.1676 = MAX_EXPR <size.1676, 0>;
  D.9997 = size.1676 + -1;
  D.9998 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1676> * 64;
  D.9999 = (sizetype) NON_LVALUE_EXPR <size.1676> * 8;
  ubound.1670 = (integer(kind=8)) *p;
  stride.1672 = NON_LVALUE_EXPR <ubound.1670>;
  stride.1672 = MAX_EXPR <stride.1672, 0>;
  ubound.1671 = (integer(kind=8)) *p;
  size.1674 = stride.1672 * NON_LVALUE_EXPR <ubound.1671>;
  size.1674 = MAX_EXPR <size.1674, 0>;
  D.9994 = size.1674 + -1;
  D.9995 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1674> * 64;
  D.9996 = (sizetype) NON_LVALUE_EXPR <size.1674> * 8;
  offset.1673 = ~NON_LVALUE_EXPR <stride.1672>;
  gls ((integer(kind=4) *) ntot, (integer(kind=4) *) m, ist, ifin, occ, (integer(kind=4) *) nmax, vi, vh, (integer(kind=4) *) pcol, pred, (integer(kind=4) *) q, (integer(kind=4) *) iflag, sig, (real(kind=8) *) sigma2, (integer(kind=4) *) p, xcol, beta, y, delta, w, xtw, xtwx, xtwy, xtwxinv);
  mkll2 ((integer(kind=4) *) nmax, (integer(kind=4) *) m, w, (integer(kind=4) *) ntot, delta, occ, ist, ifin, (real(kind=8) *) ll);
  return;
}


ecme3 (integer(kind=4) & restrict ntot, integer(kind=4)[0:D.10416] * restrict subj, integer(kind=4) & restrict m, integer(kind=4)[0:D.10413] * restrict ist, integer(kind=4)[0:D.10410] * restrict ifin, integer(kind=4)[0:D.10407] * restrict occ, integer(kind=4) & restrict nmax, real(kind=8)[0:D.10398] * restrict vi, real(kind=8)[0:D.10401] * restrict vh, integer(kind=4) & restrict pcol, real(kind=8)[0:D.10395] * restrict pred, integer(kind=4) & restrict q, integer(kind=4)[0:D.10392] * restrict zcol, real(kind=8)[0:D.10389] * restrict ztv, real(kind=8)[0:D.10386] * restrict sig0, integer(kind=4) & restrict iflag, real(kind=8)[0:D.10383] * restrict sig, real(kind=8)[0:D.10380] * restrict psi, real(kind=8) & restrict sigma2, integer(kind=4) & restrict p, integer(kind=4)[0:D.10377] * restrict xcol, real(kind=8)[0:D.10374] * restrict beta, real(kind=8)[0:D.10371] * restrict wkq1, real(kind=8)[0:D.10368] * restrict wkq2, real(kind=8)[0:D.10365] * restrict wkq3, real(kind=8)[0:D.10362] * restrict y, real(kind=8)[0:D.10359] * restrict delta, real(kind=8)[0:D.10356] * restrict b, real(kind=8)[0:D.10353] * restrict wk, real(kind=8)[0:D.10350] * restrict w, real(kind=8)[0:D.10347] * restrict xtw, real(kind=8)[0:D.10344] * restrict xtwx, real(kind=8)[0:D.10341] * restrict xtwy, real(kind=8)[0:D.10338] * restrict xtwxinv, real(kind=8)[0:D.10329] * restrict llk, real(kind=8)[0:D.10404] * restrict vmax, integer(kind=4) & restrict sflag, real(kind=8) & restrict eps, real(kind=8)[0:D.10335] * restrict obeta, real(kind=8)[0:D.10332] * restrict opsi, integer(kind=4) & restrict maxits, integer(kind=4) & restrict iter, integer(kind=4) & restrict cvgd)
{
  integer(kind=8) ubound.1679;
  integer(kind=8) ubound.1680;
  integer(kind=8) stride.1681;
  integer(kind=8) offset.1682;
  integer(kind=8) size.1683;
  integer(kind=8) ubound.1684;
  integer(kind=8) size.1685;
  integer(kind=4) c1;
  integer(kind=4) c2;
  integer(kind=4) c3;
  integer(kind=8) ubound.1686;
  integer(kind=8) size.1687;
  integer(kind=4) i;
  integer(kind=8) ubound.1688;
  integer(kind=8) size.1689;
  integer(kind=8) ubound.1690;
  integer(kind=8) size.1691;
  integer(kind=4) j;
  real(kind=8) ldsig;
  real(kind=8) ldxi;
  real(kind=8) ll;
  integer(kind=8) ubound.1692;
  integer(kind=8) size.1693;
  integer(kind=8) ubound.1694;
  integer(kind=8) size.1695;
  integer(kind=8) ubound.1696;
  integer(kind=8) size.1697;
  integer(kind=8) ubound.1698;
  integer(kind=8) ubound.1699;
  integer(kind=8) stride.1700;
  integer(kind=8) offset.1701;
  integer(kind=8) size.1702;
  real(kind=8) osigma2;
  integer(kind=8) ubound.1703;
  integer(kind=8) ubound.1704;
  integer(kind=8) stride.1705;
  integer(kind=8) offset.1706;
  integer(kind=8) size.1707;
  integer(kind=8) ubound.1708;
  integer(kind=8) ubound.1709;
  integer(kind=8) stride.1710;
  integer(kind=8) offset.1711;
  integer(kind=8) size.1712;
  integer(kind=8) ubound.1713;
  integer(kind=8) ubound.1714;
  integer(kind=8) stride.1715;
  integer(kind=8) ubound.1716;
  integer(kind=8) stride.1717;
  integer(kind=8) offset.1718;
  integer(kind=8) size.1719;
  integer(kind=8) ubound.1720;
  integer(kind=8) ubound.1721;
  integer(kind=8) stride.1722;
  integer(kind=8) ubound.1723;
  integer(kind=8) stride.1724;
  integer(kind=8) offset.1725;
  integer(kind=8) size.1726;
  integer(kind=8) ubound.1727;
  integer(kind=8) size.1728;
  integer(kind=8) ubound.1729;
  integer(kind=8) ubound.1730;
  integer(kind=8) stride.1731;
  integer(kind=8) ubound.1732;
  integer(kind=8) stride.1733;
  integer(kind=8) offset.1734;
  integer(kind=8) size.1735;
  integer(kind=8) ubound.1736;
  integer(kind=8) ubound.1737;
  integer(kind=8) stride.1738;
  integer(kind=8) ubound.1739;
  integer(kind=8) stride.1740;
  integer(kind=8) offset.1741;
  integer(kind=8) size.1742;
  integer(kind=8) ubound.1743;
  integer(kind=8) ubound.1744;
  integer(kind=8) stride.1745;
  integer(kind=8) offset.1746;
  integer(kind=8) size.1747;
  integer(kind=8) ubound.1748;
  integer(kind=8) ubound.1749;
  integer(kind=8) stride.1750;
  integer(kind=8) ubound.1751;
  integer(kind=8) stride.1752;
  integer(kind=8) offset.1753;
  integer(kind=8) size.1754;
  integer(kind=8) ubound.1755;
  integer(kind=8) ubound.1756;
  integer(kind=8) stride.1757;
  integer(kind=8) ubound.1758;
  integer(kind=8) stride.1759;
  integer(kind=8) offset.1760;
  integer(kind=8) size.1761;
  integer(kind=8) ubound.1762;
  integer(kind=8) ubound.1763;
  integer(kind=8) stride.1764;
  integer(kind=8) offset.1765;
  integer(kind=8) size.1766;
  integer(kind=8) ubound.1767;
  integer(kind=8) ubound.1768;
  integer(kind=8) stride.1769;
  integer(kind=8) offset.1770;
  integer(kind=8) size.1771;
  integer(kind=8) ubound.1772;
  integer(kind=8) ubound.1773;
  integer(kind=8) stride.1774;
  integer(kind=8) offset.1775;
  integer(kind=8) size.1776;
  integer(kind=8) ubound.1777;
  integer(kind=8) size.1778;
  integer(kind=8) ubound.1779;
  integer(kind=8) ubound.1780;
  integer(kind=8) stride.1781;
  integer(kind=8) offset.1782;
  integer(kind=8) size.1783;
  integer(kind=8) ubound.1784;
  integer(kind=8) ubound.1785;
  integer(kind=8) stride.1786;
  integer(kind=8) offset.1787;
  integer(kind=8) size.1788;
  integer(kind=8) ubound.1789;
  integer(kind=8) ubound.1790;
  integer(kind=8) stride.1791;
  integer(kind=8) offset.1792;
  integer(kind=8) size.1793;
  integer(kind=8) ubound.1794;
  integer(kind=8) size.1795;
  integer(kind=8) ubound.1796;
  integer(kind=8) size.1797;
  integer(kind=8) ubound.1798;
  integer(kind=8) size.1799;
  integer(kind=8) ubound.1800;
  integer(kind=8) ubound.1801;
  integer(kind=8) stride.1802;
  integer(kind=8) ubound.1803;
  integer(kind=8) stride.1804;
  integer(kind=8) offset.1805;
  integer(kind=8) size.1806;
  integer(kind=8) D.10329;
  bitsizetype D.10330;
  sizetype D.10331;
  integer(kind=8) D.10332;
  bitsizetype D.10333;
  sizetype D.10334;
  integer(kind=8) D.10335;
  bitsizetype D.10336;
  sizetype D.10337;
  integer(kind=8) D.10338;
  bitsizetype D.10339;
  sizetype D.10340;
  integer(kind=8) D.10341;
  bitsizetype D.10342;
  sizetype D.10343;
  integer(kind=8) D.10344;
  bitsizetype D.10345;
  sizetype D.10346;
  integer(kind=8) D.10347;
  bitsizetype D.10348;
  sizetype D.10349;
  integer(kind=8) D.10350;
  bitsizetype D.10351;
  sizetype D.10352;
  integer(kind=8) D.10353;
  bitsizetype D.10354;
  sizetype D.10355;
  integer(kind=8) D.10356;
  bitsizetype D.10357;
  sizetype D.10358;
  integer(kind=8) D.10359;
  bitsizetype D.10360;
  sizetype D.10361;
  integer(kind=8) D.10362;
  bitsizetype D.10363;
  sizetype D.10364;
  integer(kind=8) D.10365;
  bitsizetype D.10366;
  sizetype D.10367;
  integer(kind=8) D.10368;
  bitsizetype D.10369;
  sizetype D.10370;
  integer(kind=8) D.10371;
  bitsizetype D.10372;
  sizetype D.10373;
  integer(kind=8) D.10374;
  bitsizetype D.10375;
  sizetype D.10376;
  integer(kind=8) D.10377;
  bitsizetype D.10378;
  sizetype D.10379;
  integer(kind=8) D.10380;
  bitsizetype D.10381;
  sizetype D.10382;
  integer(kind=8) D.10383;
  bitsizetype D.10384;
  sizetype D.10385;
  integer(kind=8) D.10386;
  bitsizetype D.10387;
  sizetype D.10388;
  integer(kind=8) D.10389;
  bitsizetype D.10390;
  sizetype D.10391;
  integer(kind=8) D.10392;
  bitsizetype D.10393;
  sizetype D.10394;
  integer(kind=8) D.10395;
  bitsizetype D.10396;
  sizetype D.10397;
  integer(kind=8) D.10398;
  bitsizetype D.10399;
  sizetype D.10400;
  integer(kind=8) D.10401;
  bitsizetype D.10402;
  sizetype D.10403;
  integer(kind=8) D.10404;
  bitsizetype D.10405;
  sizetype D.10406;
  integer(kind=8) D.10407;
  bitsizetype D.10408;
  sizetype D.10409;
  integer(kind=8) D.10410;
  bitsizetype D.10411;
  sizetype D.10412;
  integer(kind=8) D.10413;
  bitsizetype D.10414;
  sizetype D.10415;
  integer(kind=8) D.10416;
  bitsizetype D.10417;
  sizetype D.10418;

  ubound.1727 = (integer(kind=8)) *ntot;
  size.1728 = NON_LVALUE_EXPR <ubound.1727>;
  size.1728 = MAX_EXPR <size.1728, 0>;
  D.10416 = size.1728 + -1;
  D.10417 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1728> * 32;
  D.10418 = (sizetype) NON_LVALUE_EXPR <size.1728> * 4;
  ubound.1690 = (integer(kind=8)) *m;
  size.1691 = NON_LVALUE_EXPR <ubound.1690>;
  size.1691 = MAX_EXPR <size.1691, 0>;
  D.10413 = size.1691 + -1;
  D.10414 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1691> * 32;
  D.10415 = (sizetype) NON_LVALUE_EXPR <size.1691> * 4;
  ubound.1688 = (integer(kind=8)) *m;
  size.1689 = NON_LVALUE_EXPR <ubound.1688>;
  size.1689 = MAX_EXPR <size.1689, 0>;
  D.10410 = size.1689 + -1;
  D.10411 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1689> * 32;
  D.10412 = (sizetype) NON_LVALUE_EXPR <size.1689> * 4;
  ubound.1696 = (integer(kind=8)) *ntot;
  size.1697 = NON_LVALUE_EXPR <ubound.1696>;
  size.1697 = MAX_EXPR <size.1697, 0>;
  D.10407 = size.1697 + -1;
  D.10408 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1697> * 32;
  D.10409 = (sizetype) NON_LVALUE_EXPR <size.1697> * 4;
  ubound.1743 = (integer(kind=8)) *nmax;
  stride.1745 = NON_LVALUE_EXPR <ubound.1743>;
  stride.1745 = MAX_EXPR <stride.1745, 0>;
  ubound.1744 = (integer(kind=8)) *nmax;
  size.1747 = stride.1745 * NON_LVALUE_EXPR <ubound.1744>;
  size.1747 = MAX_EXPR <size.1747, 0>;
  D.10404 = size.1747 + -1;
  D.10405 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1747> * 64;
  D.10406 = (sizetype) NON_LVALUE_EXPR <size.1747> * 8;
  offset.1746 = ~NON_LVALUE_EXPR <stride.1745>;
  ubound.1729 = (integer(kind=8)) *nmax;
  stride.1731 = NON_LVALUE_EXPR <ubound.1729>;
  stride.1731 = MAX_EXPR <stride.1731, 0>;
  ubound.1730 = (integer(kind=8)) *nmax;
  stride.1733 = stride.1731 * NON_LVALUE_EXPR <ubound.1730>;
  stride.1733 = MAX_EXPR <stride.1733, 0>;
  ubound.1732 = (integer(kind=8)) *m;
  size.1735 = stride.1733 * NON_LVALUE_EXPR <ubound.1732>;
  size.1735 = MAX_EXPR <size.1735, 0>;
  D.10401 = size.1735 + -1;
  D.10402 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1735> * 64;
  D.10403 = (sizetype) NON_LVALUE_EXPR <size.1735> * 8;
  offset.1734 = ~NON_LVALUE_EXPR <stride.1731> - NON_LVALUE_EXPR <stride.1733>;
  ubound.1736 = (integer(kind=8)) *nmax;
  stride.1738 = NON_LVALUE_EXPR <ubound.1736>;
  stride.1738 = MAX_EXPR <stride.1738, 0>;
  ubound.1737 = (integer(kind=8)) *nmax;
  stride.1740 = stride.1738 * NON_LVALUE_EXPR <ubound.1737>;
  stride.1740 = MAX_EXPR <stride.1740, 0>;
  ubound.1739 = (integer(kind=8)) *m;
  size.1742 = stride.1740 * NON_LVALUE_EXPR <ubound.1739>;
  size.1742 = MAX_EXPR <size.1742, 0>;
  D.10398 = size.1742 + -1;
  D.10399 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1742> * 64;
  D.10400 = (sizetype) NON_LVALUE_EXPR <size.1742> * 8;
  offset.1741 = ~NON_LVALUE_EXPR <stride.1738> - NON_LVALUE_EXPR <stride.1740>;
  ubound.1703 = (integer(kind=8)) *ntot;
  stride.1705 = NON_LVALUE_EXPR <ubound.1703>;
  stride.1705 = MAX_EXPR <stride.1705, 0>;
  ubound.1704 = (integer(kind=8)) *pcol;
  size.1707 = stride.1705 * NON_LVALUE_EXPR <ubound.1704>;
  size.1707 = MAX_EXPR <size.1707, 0>;
  D.10395 = size.1707 + -1;
  D.10396 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1707> * 64;
  D.10397 = (sizetype) NON_LVALUE_EXPR <size.1707> * 8;
  offset.1706 = ~NON_LVALUE_EXPR <stride.1705>;
  ubound.1798 = (integer(kind=8)) *q;
  size.1799 = NON_LVALUE_EXPR <ubound.1798>;
  size.1799 = MAX_EXPR <size.1799, 0>;
  D.10392 = size.1799 + -1;
  D.10393 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1799> * 32;
  D.10394 = (sizetype) NON_LVALUE_EXPR <size.1799> * 4;
  ubound.1800 = (integer(kind=8)) *q;
  stride.1802 = NON_LVALUE_EXPR <ubound.1800>;
  stride.1802 = MAX_EXPR <stride.1802, 0>;
  ubound.1801 = (integer(kind=8)) *nmax;
  stride.1804 = stride.1802 * NON_LVALUE_EXPR <ubound.1801>;
  stride.1804 = MAX_EXPR <stride.1804, 0>;
  ubound.1803 = (integer(kind=8)) *m;
  size.1806 = stride.1804 * NON_LVALUE_EXPR <ubound.1803>;
  size.1806 = MAX_EXPR <size.1806, 0>;
  D.10389 = size.1806 + -1;
  D.10390 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1806> * 64;
  D.10391 = (sizetype) NON_LVALUE_EXPR <size.1806> * 8;
  offset.1805 = ~NON_LVALUE_EXPR <stride.1802> - NON_LVALUE_EXPR <stride.1804>;
  ubound.1720 = (integer(kind=8)) *q;
  stride.1722 = NON_LVALUE_EXPR <ubound.1720>;
  stride.1722 = MAX_EXPR <stride.1722, 0>;
  ubound.1721 = (integer(kind=8)) *q;
  stride.1724 = stride.1722 * NON_LVALUE_EXPR <ubound.1721>;
  stride.1724 = MAX_EXPR <stride.1724, 0>;
  ubound.1723 = (integer(kind=8)) *m;
  size.1726 = stride.1724 * NON_LVALUE_EXPR <ubound.1723>;
  size.1726 = MAX_EXPR <size.1726, 0>;
  D.10386 = size.1726 + -1;
  D.10387 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1726> * 64;
  D.10388 = (sizetype) NON_LVALUE_EXPR <size.1726> * 8;
  offset.1725 = ~NON_LVALUE_EXPR <stride.1722> - NON_LVALUE_EXPR <stride.1724>;
  ubound.1713 = (integer(kind=8)) *q;
  stride.1715 = NON_LVALUE_EXPR <ubound.1713>;
  stride.1715 = MAX_EXPR <stride.1715, 0>;
  ubound.1714 = (integer(kind=8)) *q;
  stride.1717 = stride.1715 * NON_LVALUE_EXPR <ubound.1714>;
  stride.1717 = MAX_EXPR <stride.1717, 0>;
  ubound.1716 = (integer(kind=8)) *m;
  size.1719 = stride.1717 * NON_LVALUE_EXPR <ubound.1716>;
  size.1719 = MAX_EXPR <size.1719, 0>;
  D.10383 = size.1719 + -1;
  D.10384 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1719> * 64;
  D.10385 = (sizetype) NON_LVALUE_EXPR <size.1719> * 8;
  offset.1718 = ~NON_LVALUE_EXPR <stride.1715> - NON_LVALUE_EXPR <stride.1717>;
  ubound.1708 = (integer(kind=8)) *q;
  stride.1710 = NON_LVALUE_EXPR <ubound.1708>;
  stride.1710 = MAX_EXPR <stride.1710, 0>;
  ubound.1709 = (integer(kind=8)) *q;
  size.1712 = stride.1710 * NON_LVALUE_EXPR <ubound.1709>;
  size.1712 = MAX_EXPR <size.1712, 0>;
  D.10380 = size.1712 + -1;
  D.10381 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1712> * 64;
  D.10382 = (sizetype) NON_LVALUE_EXPR <size.1712> * 8;
  offset.1711 = ~NON_LVALUE_EXPR <stride.1710>;
  ubound.1777 = (integer(kind=8)) *p;
  size.1778 = NON_LVALUE_EXPR <ubound.1777>;
  size.1778 = MAX_EXPR <size.1778, 0>;
  D.10377 = size.1778 + -1;
  D.10378 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1778> * 32;
  D.10379 = (sizetype) NON_LVALUE_EXPR <size.1778> * 4;
  ubound.1684 = (integer(kind=8)) *p;
  size.1685 = NON_LVALUE_EXPR <ubound.1684>;
  size.1685 = MAX_EXPR <size.1685, 0>;
  D.10374 = size.1685 + -1;
  D.10375 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1685> * 64;
  D.10376 = (sizetype) NON_LVALUE_EXPR <size.1685> * 8;
  ubound.1762 = (integer(kind=8)) *q;
  stride.1764 = NON_LVALUE_EXPR <ubound.1762>;
  stride.1764 = MAX_EXPR <stride.1764, 0>;
  ubound.1763 = (integer(kind=8)) *q;
  size.1766 = stride.1764 * NON_LVALUE_EXPR <ubound.1763>;
  size.1766 = MAX_EXPR <size.1766, 0>;
  D.10371 = size.1766 + -1;
  D.10372 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1766> * 64;
  D.10373 = (sizetype) NON_LVALUE_EXPR <size.1766> * 8;
  offset.1765 = ~NON_LVALUE_EXPR <stride.1764>;
  ubound.1767 = (integer(kind=8)) *q;
  stride.1769 = NON_LVALUE_EXPR <ubound.1767>;
  stride.1769 = MAX_EXPR <stride.1769, 0>;
  ubound.1768 = (integer(kind=8)) *q;
  size.1771 = stride.1769 * NON_LVALUE_EXPR <ubound.1768>;
  size.1771 = MAX_EXPR <size.1771, 0>;
  D.10368 = size.1771 + -1;
  D.10369 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1771> * 64;
  D.10370 = (sizetype) NON_LVALUE_EXPR <size.1771> * 8;
  offset.1770 = ~NON_LVALUE_EXPR <stride.1769>;
  ubound.1772 = (integer(kind=8)) *q;
  stride.1774 = NON_LVALUE_EXPR <ubound.1772>;
  stride.1774 = MAX_EXPR <stride.1774, 0>;
  ubound.1773 = (integer(kind=8)) *q;
  size.1776 = stride.1774 * NON_LVALUE_EXPR <ubound.1773>;
  size.1776 = MAX_EXPR <size.1776, 0>;
  D.10365 = size.1776 + -1;
  D.10366 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1776> * 64;
  D.10367 = (sizetype) NON_LVALUE_EXPR <size.1776> * 8;
  offset.1775 = ~NON_LVALUE_EXPR <stride.1774>;
  ubound.1796 = (integer(kind=8)) *ntot;
  size.1797 = NON_LVALUE_EXPR <ubound.1796>;
  size.1797 = MAX_EXPR <size.1797, 0>;
  D.10362 = size.1797 + -1;
  D.10363 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1797> * 64;
  D.10364 = (sizetype) NON_LVALUE_EXPR <size.1797> * 8;
  ubound.1686 = (integer(kind=8)) *ntot;
  size.1687 = NON_LVALUE_EXPR <ubound.1686>;
  size.1687 = MAX_EXPR <size.1687, 0>;
  D.10359 = size.1687 + -1;
  D.10360 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1687> * 64;
  D.10361 = (sizetype) NON_LVALUE_EXPR <size.1687> * 8;
  ubound.1679 = (integer(kind=8)) *q;
  stride.1681 = NON_LVALUE_EXPR <ubound.1679>;
  stride.1681 = MAX_EXPR <stride.1681, 0>;
  ubound.1680 = (integer(kind=8)) *m;
  size.1683 = stride.1681 * NON_LVALUE_EXPR <ubound.1680>;
  size.1683 = MAX_EXPR <size.1683, 0>;
  D.10356 = size.1683 + -1;
  D.10357 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1683> * 64;
  D.10358 = (sizetype) NON_LVALUE_EXPR <size.1683> * 8;
  offset.1682 = ~NON_LVALUE_EXPR <stride.1681>;
  ubound.1755 = (integer(kind=8)) *q;
  stride.1757 = NON_LVALUE_EXPR <ubound.1755>;
  stride.1757 = MAX_EXPR <stride.1757, 0>;
  ubound.1756 = (integer(kind=8)) *nmax;
  stride.1759 = stride.1757 * NON_LVALUE_EXPR <ubound.1756>;
  stride.1759 = MAX_EXPR <stride.1759, 0>;
  ubound.1758 = (integer(kind=8)) *m;
  size.1761 = stride.1759 * NON_LVALUE_EXPR <ubound.1758>;
  size.1761 = MAX_EXPR <size.1761, 0>;
  D.10353 = size.1761 + -1;
  D.10354 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1761> * 64;
  D.10355 = (sizetype) NON_LVALUE_EXPR <size.1761> * 8;
  offset.1760 = ~NON_LVALUE_EXPR <stride.1757> - NON_LVALUE_EXPR <stride.1759>;
  ubound.1748 = (integer(kind=8)) *nmax;
  stride.1750 = NON_LVALUE_EXPR <ubound.1748>;
  stride.1750 = MAX_EXPR <stride.1750, 0>;
  ubound.1749 = (integer(kind=8)) *nmax;
  stride.1752 = stride.1750 * NON_LVALUE_EXPR <ubound.1749>;
  stride.1752 = MAX_EXPR <stride.1752, 0>;
  ubound.1751 = (integer(kind=8)) *m;
  size.1754 = stride.1752 * NON_LVALUE_EXPR <ubound.1751>;
  size.1754 = MAX_EXPR <size.1754, 0>;
  D.10350 = size.1754 + -1;
  D.10351 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1754> * 64;
  D.10352 = (sizetype) NON_LVALUE_EXPR <size.1754> * 8;
  offset.1753 = ~NON_LVALUE_EXPR <stride.1750> - NON_LVALUE_EXPR <stride.1752>;
  ubound.1779 = (integer(kind=8)) *p;
  stride.1781 = NON_LVALUE_EXPR <ubound.1779>;
  stride.1781 = MAX_EXPR <stride.1781, 0>;
  ubound.1780 = (integer(kind=8)) *nmax;
  size.1783 = stride.1781 * NON_LVALUE_EXPR <ubound.1780>;
  size.1783 = MAX_EXPR <size.1783, 0>;
  D.10347 = size.1783 + -1;
  D.10348 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1783> * 64;
  D.10349 = (sizetype) NON_LVALUE_EXPR <size.1783> * 8;
  offset.1782 = ~NON_LVALUE_EXPR <stride.1781>;
  ubound.1784 = (integer(kind=8)) *p;
  stride.1786 = NON_LVALUE_EXPR <ubound.1784>;
  stride.1786 = MAX_EXPR <stride.1786, 0>;
  ubound.1785 = (integer(kind=8)) *p;
  size.1788 = stride.1786 * NON_LVALUE_EXPR <ubound.1785>;
  size.1788 = MAX_EXPR <size.1788, 0>;
  D.10344 = size.1788 + -1;
  D.10345 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1788> * 64;
  D.10346 = (sizetype) NON_LVALUE_EXPR <size.1788> * 8;
  offset.1787 = ~NON_LVALUE_EXPR <stride.1786>;
  ubound.1794 = (integer(kind=8)) *p;
  size.1795 = NON_LVALUE_EXPR <ubound.1794>;
  size.1795 = MAX_EXPR <size.1795, 0>;
  D.10341 = size.1795 + -1;
  D.10342 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1795> * 64;
  D.10343 = (sizetype) NON_LVALUE_EXPR <size.1795> * 8;
  ubound.1789 = (integer(kind=8)) *p;
  stride.1791 = NON_LVALUE_EXPR <ubound.1789>;
  stride.1791 = MAX_EXPR <stride.1791, 0>;
  ubound.1790 = (integer(kind=8)) *p;
  size.1793 = stride.1791 * NON_LVALUE_EXPR <ubound.1790>;
  size.1793 = MAX_EXPR <size.1793, 0>;
  D.10338 = size.1793 + -1;
  D.10339 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1793> * 64;
  D.10340 = (sizetype) NON_LVALUE_EXPR <size.1793> * 8;
  offset.1792 = ~NON_LVALUE_EXPR <stride.1791>;
  ubound.1694 = (integer(kind=8)) *p;
  size.1695 = NON_LVALUE_EXPR <ubound.1694>;
  size.1695 = MAX_EXPR <size.1695, 0>;
  D.10335 = size.1695 + -1;
  D.10336 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1695> * 64;
  D.10337 = (sizetype) NON_LVALUE_EXPR <size.1695> * 8;
  ubound.1698 = (integer(kind=8)) *q;
  stride.1700 = NON_LVALUE_EXPR <ubound.1698>;
  stride.1700 = MAX_EXPR <stride.1700, 0>;
  ubound.1699 = (integer(kind=8)) *q;
  size.1702 = stride.1700 * NON_LVALUE_EXPR <ubound.1699>;
  size.1702 = MAX_EXPR <size.1702, 0>;
  D.10332 = size.1702 + -1;
  D.10333 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1702> * 64;
  D.10334 = (sizetype) NON_LVALUE_EXPR <size.1702> * 8;
  offset.1701 = ~NON_LVALUE_EXPR <stride.1700>;
  ubound.1692 = (integer(kind=8)) *maxits;
  size.1693 = NON_LVALUE_EXPR <ubound.1692>;
  size.1693 = MAX_EXPR <size.1693, 0>;
  D.10329 = size.1693 + -1;
  D.10330 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1693> * 64;
  D.10331 = (sizetype) NON_LVALUE_EXPR <size.1693> * 8;
  prelim ((integer(kind=4) *) ntot, subj, (integer(kind=4) *) m, ist, ifin, occ, (integer(kind=4) *) nmax, vmax, vh, vi, (integer(kind=4) *) pcol, pred, (integer(kind=4) *) q, zcol, ztv, sig0, (integer(kind=4) *) iflag);
  if (*sflag != 1)
    {
      stval ((integer(kind=4) *) ntot, (integer(kind=4) *) m, ist, ifin, occ, (integer(kind=4) *) nmax, vi, vh, (integer(kind=4) *) pcol, pred, (integer(kind=4) *) q, zcol, ztv, sig0, (integer(kind=4) *) iflag, sig, psi, (real(kind=8) *) sigma2, (integer(kind=4) *) p, xcol, beta, wkq1, wkq2, wkq3, y, delta, b, wk, w, xtw, xtwx, xtwy, xtwxinv);
    }
  else
    {
      mkdel ((integer(kind=4) *) ntot, (integer(kind=4) *) pcol, pred, (integer(kind=4) *) p, xcol, y, beta, delta);
    }
  L.742:;
  *iter = 0;
  *cvgd = 0;
  __label_000001:;
  *iter = *iter + 1;
  {
    integer(kind=4) D.10280;

    D.10280 = *p;
    i = 1;
    if (i <= D.10280)
      {
        while (1)
          {
            {
              logical(kind=4) D.10284;

              (*obeta)[(integer(kind=8)) i + -1] = (*beta)[(integer(kind=8)) i + -1];
              __label_000002:;
              L.743:;
              D.10284 = i == D.10280;
              i = i + 1;
              if (D.10284) goto L.744;
            }
          }
      }
    L.744:;
  }
  {
    integer(kind=4) D.10285;

    D.10285 = *q;
    i = 1;
    if (i <= D.10285)
      {
        while (1)
          {
            {
              logical(kind=4) D.10295;

              {
                integer(kind=4) D.10288;
                integer(kind=4) D.10289;

                D.10288 = i;
                D.10289 = *q;
                j = D.10288;
                if (j <= D.10289)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.10293;

                          (*opsi)[((integer(kind=8)) j * stride.1700 + offset.1701) + (integer(kind=8)) i] = (*psi)[((integer(kind=8)) j * stride.1710 + offset.1711) + (integer(kind=8)) i];
                          (*wkq3)[((integer(kind=8)) j * stride.1774 + offset.1775) + (integer(kind=8)) i] = (*psi)[((integer(kind=8)) j * stride.1710 + offset.1711) + (integer(kind=8)) i] / *sigma2;
                          __label_000005:;
                          L.747:;
                          D.10293 = j == D.10289;
                          j = j + 1;
                          if (D.10293) goto L.748;
                        }
                      }
                  }
                L.748:;
              }
              __label_000010:;
              L.745:;
              D.10295 = i == D.10285;
              i = i + 1;
              if (D.10295) goto L.746;
            }
          }
      }
    L.746:;
  }
  osigma2 = *sigma2;
  mksig3 ((integer(kind=4) *) q, wkq3, (integer(kind=4) *) m, sig0, sig, wkq1, wkq2, &ldxi, &ldsig);
  mkwk3 ((integer(kind=4) *) q, (integer(kind=4) *) m, sig, (integer(kind=4) *) nmax, ztv, wk, (integer(kind=4) *) ntot, occ, ist, ifin);
  mkb ((integer(kind=4) *) q, (integer(kind=4) *) nmax, (integer(kind=4) *) m, wk, (integer(kind=4) *) ntot, delta, b, occ, ist, ifin);
  mkxi ((integer(kind=4) *) q, (integer(kind=4) *) m, b, sig, wkq3, (real(kind=8) *) sigma2);
  {
    integer(kind=4) D.10296;

    D.10296 = *q;
    i = 1;
    if (i <= D.10296)
      {
        while (1)
          {
            {
              logical(kind=4) D.10307;

              {
                integer(kind=4) D.10299;
                integer(kind=4) D.10300;

                D.10299 = i;
                D.10300 = *q;
                j = D.10299;
                if (j <= D.10300)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.10305;

                          (*psi)[((integer(kind=8)) j * stride.1710 + offset.1711) + (integer(kind=8)) i] = (*wkq3)[((integer(kind=8)) j * stride.1774 + offset.1775) + (integer(kind=8)) i] * *sigma2;
                          if (i != j)
                            {
                              (*psi)[((integer(kind=8)) i * stride.1710 + offset.1711) + (integer(kind=8)) j] = (*psi)[((integer(kind=8)) j * stride.1710 + offset.1711) + (integer(kind=8)) i];
                            }
                          L.753:;
                          __label_000015:;
                          L.751:;
                          D.10305 = j == D.10300;
                          j = j + 1;
                          if (D.10305) goto L.752;
                        }
                      }
                  }
                L.752:;
              }
              __label_000020:;
              L.749:;
              D.10307 = i == D.10296;
              i = i + 1;
              if (D.10307) goto L.750;
            }
          }
      }
    L.750:;
  }
  mkbeta3 ((integer(kind=4) *) q, (integer(kind=4) *) nmax, (integer(kind=4) *) m, wk, ztv, vi, w, (integer(kind=4) *) ntot, occ, ist, ifin, (integer(kind=4) *) pcol, pred, (integer(kind=4) *) p, xcol, y, xtw, xtwx, xtwy, xtwxinv, beta, (integer(kind=4) *) iflag);
  mkdel ((integer(kind=4) *) ntot, (integer(kind=4) *) pcol, pred, (integer(kind=4) *) p, xcol, y, beta, delta);
  mksig23 ((integer(kind=4) *) ntot, delta, (integer(kind=4) *) m, (real(kind=8) *) sigma2, (integer(kind=4) *) nmax, occ, ist, ifin, w);
  ll = ((real(kind=8)) *m * ldxi - ((real(kind=8)) *ntot * 5.0e-1) * __builtin_log (*sigma2)) + ldsig;
  ll = ll - (real(kind=8)) *ntot * 5.0e-1;
  (*llk)[(integer(kind=8)) *iter + -1] = ll;
  c1 = 0;
  {
    integer(kind=4) D.10308;

    D.10308 = *p;
    i = 1;
    if (i <= D.10308)
      {
        while (1)
          {
            {
              logical(kind=4) D.10313;

              if (ABS_EXPR <(*beta)[(integer(kind=8)) i + -1] - (*obeta)[(integer(kind=8)) i + -1]> > ((*eps * ABS_EXPR <(*obeta)[(integer(kind=8)) i + -1]>)))
                {
                  c1 = 1;
                }
              L.756:;
              __label_000030:;
              L.754:;
              D.10313 = i == D.10308;
              i = i + 1;
              if (D.10313) goto L.755;
            }
          }
      }
    L.755:;
  }
  c2 = 0;
  {
    integer(kind=4) D.10314;

    D.10314 = *q;
    i = 1;
    if (i <= D.10314)
      {
        while (1)
          {
            {
              logical(kind=4) D.10325;

              {
                integer(kind=4) D.10317;
                integer(kind=4) D.10318;

                D.10317 = i;
                D.10318 = *q;
                j = D.10317;
                if (j <= D.10318)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.10323;

                          if (ABS_EXPR <(*psi)[((integer(kind=8)) j * stride.1710 + offset.1711) + (integer(kind=8)) i] - (*opsi)[((integer(kind=8)) j * stride.1700 + offset.1701) + (integer(kind=8)) i]> > ((*eps * ABS_EXPR <(*opsi)[((integer(kind=8)) j * stride.1700 + offset.1701) + (integer(kind=8)) i]>)))
                            {
                              c2 = 1;
                            }
                          L.761:;
                          __label_000035:;
                          L.759:;
                          D.10323 = j == D.10318;
                          j = j + 1;
                          if (D.10323) goto L.760;
                        }
                      }
                  }
                L.760:;
              }
              __label_000040:;
              L.757:;
              D.10325 = i == D.10314;
              i = i + 1;
              if (D.10325) goto L.758;
            }
          }
      }
    L.758:;
  }
  c3 = 0;
  if (ABS_EXPR <*sigma2 - osigma2> > ((*eps * ABS_EXPR <osigma2>)))
    {
      c3 = 1;
    }
  L.762:;
  if ((c1 == 0 && c2 == 0) && c3 == 0)
    {
      *cvgd = 1;
    }
  L.763:;
  if (*cvgd == 0 && *iter < *maxits) goto __label_000001;
  L.764:;
  return;
}


mkll (integer(kind=4) & restrict nmax, integer(kind=4) & restrict m, real(kind=8)[0:D.10493] * restrict w, integer(kind=4) & restrict ntot, real(kind=8)[0:D.10496] * restrict delta, integer(kind=4)[0:D.10490] * restrict occ, integer(kind=4)[0:D.10502] * restrict ist, integer(kind=4)[0:D.10499] * restrict ifin, real(kind=8) & restrict ll, real(kind=8) & restrict ldpsi, real(kind=8) & restrict ldsig, real(kind=8) & restrict sigma2)
{
  integer(kind=8) ubound.1807;
  integer(kind=8) size.1808;
  integer(kind=4) fin;
  integer(kind=4) i;
  integer(kind=8) ubound.1809;
  integer(kind=8) size.1810;
  integer(kind=8) ubound.1811;
  integer(kind=8) size.1812;
  integer(kind=4) j;
  integer(kind=8) ubound.1813;
  integer(kind=8) size.1814;
  integer(kind=4) s;
  integer(kind=4) st;
  real(kind=8) sum;
  integer(kind=8) ubound.1815;
  integer(kind=8) ubound.1816;
  integer(kind=8) stride.1817;
  integer(kind=8) ubound.1818;
  integer(kind=8) stride.1819;
  integer(kind=8) offset.1820;
  integer(kind=8) size.1821;
  integer(kind=8) D.10490;
  bitsizetype D.10491;
  sizetype D.10492;
  integer(kind=8) D.10493;
  bitsizetype D.10494;
  sizetype D.10495;
  integer(kind=8) D.10496;
  bitsizetype D.10497;
  sizetype D.10498;
  integer(kind=8) D.10499;
  bitsizetype D.10500;
  sizetype D.10501;
  integer(kind=8) D.10502;
  bitsizetype D.10503;
  sizetype D.10504;

  ubound.1811 = (integer(kind=8)) *m;
  size.1812 = NON_LVALUE_EXPR <ubound.1811>;
  size.1812 = MAX_EXPR <size.1812, 0>;
  D.10502 = size.1812 + -1;
  D.10503 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1812> * 32;
  D.10504 = (sizetype) NON_LVALUE_EXPR <size.1812> * 4;
  ubound.1809 = (integer(kind=8)) *m;
  size.1810 = NON_LVALUE_EXPR <ubound.1809>;
  size.1810 = MAX_EXPR <size.1810, 0>;
  D.10499 = size.1810 + -1;
  D.10500 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1810> * 32;
  D.10501 = (sizetype) NON_LVALUE_EXPR <size.1810> * 4;
  ubound.1807 = (integer(kind=8)) *ntot;
  size.1808 = NON_LVALUE_EXPR <ubound.1807>;
  size.1808 = MAX_EXPR <size.1808, 0>;
  D.10496 = size.1808 + -1;
  D.10497 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1808> * 64;
  D.10498 = (sizetype) NON_LVALUE_EXPR <size.1808> * 8;
  ubound.1815 = (integer(kind=8)) *nmax;
  stride.1817 = NON_LVALUE_EXPR <ubound.1815>;
  stride.1817 = MAX_EXPR <stride.1817, 0>;
  ubound.1816 = (integer(kind=8)) *nmax;
  stride.1819 = stride.1817 * NON_LVALUE_EXPR <ubound.1816>;
  stride.1819 = MAX_EXPR <stride.1819, 0>;
  ubound.1818 = (integer(kind=8)) *m;
  size.1821 = stride.1819 * NON_LVALUE_EXPR <ubound.1818>;
  size.1821 = MAX_EXPR <size.1821, 0>;
  D.10493 = size.1821 + -1;
  D.10494 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1821> * 64;
  D.10495 = (sizetype) NON_LVALUE_EXPR <size.1821> * 8;
  offset.1820 = ~NON_LVALUE_EXPR <stride.1817> - NON_LVALUE_EXPR <stride.1819>;
  ubound.1813 = (integer(kind=8)) *ntot;
  size.1814 = NON_LVALUE_EXPR <ubound.1813>;
  size.1814 = MAX_EXPR <size.1814, 0>;
  D.10490 = size.1814 + -1;
  D.10491 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1814> * 32;
  D.10492 = (sizetype) NON_LVALUE_EXPR <size.1814> * 4;
  *ll = 0.0;
  {
    integer(kind=4) D.10467;

    D.10467 = *m;
    s = 1;
    if (s <= D.10467)
      {
        while (1)
          {
            {
              logical(kind=4) D.10489;

              st = (*ist)[(integer(kind=8)) s + -1];
              fin = (*ifin)[(integer(kind=8)) s + -1];
              {
                integer(kind=4) D.10470;
                integer(kind=4) D.10471;

                D.10470 = st;
                D.10471 = fin;
                i = D.10470;
                if (i <= D.10471)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.10487;

                          sum = 0.0;
                          {
                            integer(kind=4) D.10474;
                            integer(kind=4) D.10475;

                            D.10474 = st;
                            D.10475 = i;
                            j = D.10474;
                            if (j <= D.10475)
                              {
                                while (1)
                                  {
                                    {
                                      logical(kind=4) D.10479;

                                      sum = (*delta)[(integer(kind=8)) j + -1] * (*w)[(((integer(kind=8)) s * stride.1819 + offset.1820) + (integer(kind=8)) (*occ)[(integer(kind=8)) i + -1] * stride.1817) + (integer(kind=8)) (*occ)[(integer(kind=8)) j + -1]] + sum;
                                      __label_000100:;
                                      L.769:;
                                      D.10479 = j == D.10475;
                                      j = j + 1;
                                      if (D.10479) goto L.770;
                                    }
                                  }
                              }
                            L.770:;
                          }
                          {
                            integer(kind=4) D.10480;
                            integer(kind=4) D.10481;

                            D.10480 = i + 1;
                            D.10481 = fin;
                            j = D.10480;
                            if (j <= D.10481)
                              {
                                while (1)
                                  {
                                    {
                                      logical(kind=4) D.10485;

                                      sum = (*delta)[(integer(kind=8)) j + -1] * (*w)[(((integer(kind=8)) s * stride.1819 + offset.1820) + (integer(kind=8)) (*occ)[(integer(kind=8)) j + -1] * stride.1817) + (integer(kind=8)) (*occ)[(integer(kind=8)) i + -1]] + sum;
                                      __label_000200:;
                                      L.771:;
                                      D.10485 = j == D.10481;
                                      j = j + 1;
                                      if (D.10485) goto L.772;
                                    }
                                  }
                              }
                            L.772:;
                          }
                          *ll = *ll + (*delta)[(integer(kind=8)) i + -1] * sum;
                          __label_000300:;
                          L.767:;
                          D.10487 = i == D.10471;
                          i = i + 1;
                          if (D.10487) goto L.768;
                        }
                      }
                  }
                L.768:;
              }
              __label_000900:;
              L.765:;
              D.10489 = s == D.10467;
              s = s + 1;
              if (D.10489) goto L.766;
            }
          }
      }
    L.766:;
  }
  *ll = -(*ll * 5.0e-1) - ((real(kind=8)) *ntot * 5.0e-1) * __builtin_log (*sigma2);
  *ll = (*ll + (real(kind=8)) *m * *ldpsi) + *ldsig;
  return;
}


bdiag (integer(kind=4) & restrict q, integer(kind=4) & restrict m, real(kind=8)[0:D.10536] * restrict sig)
{
  integer(kind=4) i;
  integer(kind=4) j;
  integer(kind=4) s;
  integer(kind=8) ubound.1822;
  integer(kind=8) ubound.1823;
  integer(kind=8) stride.1824;
  integer(kind=8) ubound.1825;
  integer(kind=8) stride.1826;
  integer(kind=8) offset.1827;
  integer(kind=8) size.1828;
  integer(kind=8) D.10536;
  bitsizetype D.10537;
  sizetype D.10538;

  ubound.1822 = (integer(kind=8)) *q;
  stride.1824 = NON_LVALUE_EXPR <ubound.1822>;
  stride.1824 = MAX_EXPR <stride.1824, 0>;
  ubound.1823 = (integer(kind=8)) *q;
  stride.1826 = stride.1824 * NON_LVALUE_EXPR <ubound.1823>;
  stride.1826 = MAX_EXPR <stride.1826, 0>;
  ubound.1825 = (integer(kind=8)) *m;
  size.1828 = stride.1826 * NON_LVALUE_EXPR <ubound.1825>;
  size.1828 = MAX_EXPR <size.1828, 0>;
  D.10536 = size.1828 + -1;
  D.10537 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.1828> * 64;
  D.10538 = (sizetype) NON_LVALUE_EXPR <size.1828> * 8;
  offset.1827 = ~NON_LVALUE_EXPR <stride.1824> - NON_LVALUE_EXPR <stride.1826>;
  {
    integer(kind=4) D.10521;

    D.10521 = *m;
    s = 1;
    if (s <= D.10521)
      {
        while (1)
          {
            {
              logical(kind=4) D.10535;

              {
                integer(kind=4) D.10524;

                D.10524 = *q;
                i = 1;
                if (i <= D.10524)
                  {
                    while (1)
                      {
                        {
                          logical(kind=4) D.10533;

                          {
                            integer(kind=4) D.10527;

                            D.10527 = i + -1;
                            j = 1;
                            if (j <= D.10527)
                              {
                                while (1)
                                  {
                                    {
                                      logical(kind=4) D.10531;

                                      (*sig)[(((integer(kind=8)) s * stride.1826 + offset.1827) + (integer(kind=8)) j * stride.1824) + (integer(kind=8)) i] = (*sig)[(((integer(kind=8)) s * stride.1826 + offset.1827) + (integer(kind=8)) i * stride.1824) + (integer(kind=8)) j];
                                      __label_000001:;
                                      L.777:;
                                      D.10531 = j == D.10527;
                                      j = j + 1;
                                      if (D.10531) goto L.778;
                                    }
                                  }
                              }
                            L.778:;
                          }
                          __label_000005:;
                          L.775:;
                          D.10533 = i == D.10524;
                          i = i + 1;
                          if (D.10533) goto L.776;
                        }
                      }
                  }
                L.776:;
              }
              __label_000010:;
              L.773:;
              D.10535 = s == D.10521;
              s = s + 1;
              if (D.10535) goto L.774;
            }
          }
      }
    L.774:;
  }
  return;
}


